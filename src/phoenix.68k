
*0000-3FFF: ROM

*4000-4FFF: video/general purpose RAM, banked with 2 memory banks

*4000-4340: fg tiles video ram (26*32 208*256)
*4364   if != 0 the "killed bird" sound is played
*43A0 	IN0Current 	Current value of IN0
*43A1 	IN0Previous 	Previous value of IN0
*43A2 	game_in_play_43A2  0 game not playing, !=0: playing, 1 or 2 nb players
*43A4 	game_state_43A4 	Function table jump
*43A5 	timer_43A5 	general purpose state timer
*43B8   current stage, always odd (even values are used for transitions)
*43BA   nb enemies to kill before stage completed (not vultures, only birds stage)
*43BB   nb vultures to kill before stage completed
*438F 	CoinCount 	Number of coins inserted (max counted is 9)
*439A:439B 	counter_439A 	16 bit counter (MSB:LSB)
*43C2:43C3  player ship X/Y (X changes, Y stays on the bottom of screen)
*4800-4B40: bg tiles video ram (scrollable part)

* to skip a level, MAME cheat sets 43BA or 43BB depending on stage, and on final stage
* just changes game_state_43A4 to 6 to set boss explode sequence

*5000-53FF: video registers
*50xx: write a value with bit 0 cleared to enable memory bank 0
*      else bank 1 is shown
*50xx: write a value with bit 0 cleared: select palette #1 else palette #2
*5800-5BFF: scroll registers
*6000-63ff: sound
*6800-6bff: sound
*7000-73ff: input
*7800-7bff: dip switches
*
* ram banks are used at startup but mostly used on 2 player mode to swap/store
* non-playing player screen & variables
*
* no interrupts are used at all (which allows for safe bank switching, which
* contains the stack...)
*
* "bird" means small birds, I'm calling the big birds vultures (or eagles?)

*http://www.computerarcheology.com/Arcade/Phoenix/

	.include "phoenix.inc"
	.ifdef	__amiga__
	.include "phoenix_ram.68k"
	.align	2
	.endif	
	.global	phoenix_reset
	
	.macro CLEAR_XC_FLAGS
	move.w	d7,-(a7)
	moveq	#0,d7
	roxl.b	#1,d7
	movem.w	(a7)+,d7
	.endm

	.macro SET_XC_FLAGS
	move.w	d7,-(a7)
	st	d7
	roxl.b	#1,d7
	movem.w	(a7)+,d7
	.endm

	.macro	INVERT_XC_FLAGS
	jcs	0f
	SET_XC_FLAGS
	bra.b	1f
0:
	CLEAR_XC_FLAGS
1:
	.endm

	.macro	SET_X_FROM_C
	jcc	0f
	SET_XC_FLAGS
	bra.b	1f
0:
	CLEAR_XC_FLAGS
1:
	.endm
	.macro	SET_C_FROM_X
	move.w	d7,-(a7)
	roxl.b	#1,d7
	roxr.b	#1,d7
	movem.w	(a7)+,d7
	.endm


	
	.macro	LOAD_D1_16_FROM_D1D2
	and.l	#0xFFFF,d1
	lsl.w	#8,d1
	move.b	d2,d1
	.endm
	
	.macro	LOAD_D3_16_FROM_D3D4
	and.l	#0xFFFF,d3
	lsl.w	#8,d3
	move.b	d4,d3
	.endm
	.macro	LOAD_D5_16_FROM_D5D6
	and.l	#0xFFFF,d5
	lsl.w	#8,d5
	move.b	d6,d5
	.endm
	.macro	LOAD_D1D2_FROM_D1_16
	move.b	d1,d2
	lsr.w	#8,d1
	.endm
	.macro	LOAD_D5D6_FROM_D5_16
	move.b	d5,d6
	lsr.w	#8,d5
	.endm
	.macro	LOAD_D3D4_FROM_D3_16
	move.b	d3,d4
	lsr.w	#8,d3
	.endm
	
	
copy_a0_a1_d1:
	move.b	(a1)+,(a0)+                         	| [$3520: LD      A,(DE)]
	                        	| [$3521: LD      (HL),A]
	                           	| [$3522: INC     DE]
	                           	| [$3523: INC     HL]
	move.b	(a1)+,(a0)                         	| [$3524: LD      A,(DE)]
	                         	| [$3525: LD      (HL),A]
	                           	| [$3526: INC     DE]
	add.w	d1,a0                            	| [$3527: ADD     HL,BC]
	rts


phoenix_reset:


l_0000:
												| [$0000: NOP] Start/restart and interrupts end up at 0008
												| [$0001: NOP]
												| [$0002: NOP]
												| [$0003: NOP]
												| [$0004: NOP]
												| [$0005: NOP]
												| [$0006: NOP]
												| [$0007: NOP]

	lea		stack_top,a7						| LD      SP,unknown_4BFF            ; Top-ish of RAM

	moveq	#0,d0
	jbsr	osd_write_5000                 	| [$000b: LD      H,$50] 50xx video register
											| [$000d: LD      (HL),$00] Select the first bank of RAM
	jbsr	InitSoundScreen_0050              	| [$000f: CALL    InitSoundScreen_0050] Turn sound off and clear both screen areas
	lea	game_rom+0x1800,a0                      	| [$0012: LD      HL,$1800] Screen draw info
	move.b	#0x03,d2                        	| [$0015: LD      C,$03] 3 columns (rotated to 3 rows)
	jbsr	l_01d0                            	| [$0017: CALL    $01D0] Draw the first 3 rows of the background (scores and coins);
* init has ended, enter the mainloop, always called no matter what
mainloop_001A:
	jbsr	WaitVBlankCoin_0080               	| [$001a: CALL    WaitVBlankCoin_0080] Wait for VBlank and count any coins
	move.b	game_in_play_43A2,d0            	| [$001d: LD      A,(game_in_play_43A2)]
	                               	| [$0020: AND     A]
	jeq	l_002d                             	| [$0021: JP      Z,$002D]
* called only when game is in play
	jbsr	in_game_scheduler_0400            	| [$0024: CALL    in_game_scheduler_0400]
	jbsr	l_2700                            	| [$0027: CALL    $2700]
	jra	mainloop_001A                      	| [$002a: JP      mainloop_001A]
* called only when game not in play
l_002d:
	move.b	#0x0F,d0                        	| [$002d: LD      A,$0F]
	move.b	#0x60,d5                        	| [$002f: LD      H,$60] 60xx sound A
	move.b	d0,(a0)                         	| [$0031: LD      (HL),A]
	move.b	#0x68,d5                        	| [$0032: LD      H,$68] 68xx sound B
	move.b	d0,(a0)                         	| [$0034: LD      (HL),A]
	jbsr	l_0377                            	| [$0035: CALL    $0377]
	nop                                    	| [$0038: NOP]
	jbsr	l_17e0                            	| [$0039: CALL    $17E0]
	tst.b	d0                               	| [$003c: AND     A]
	jeq	l_0046                             	| [$003d: JP      Z,$0046]
	jbsr	l_0288                            	| [$0040: CALL    $0288]
	jra	mainloop_001A                      	| [$0043: JP      mainloop_001A]
*
l_0046:
	jbsr	l_00e3                            	| [$0046: CALL    $00E3]
	jra	mainloop_001A                      	| [$0049: JP      mainloop_001A]



* Initialize the sound (off) and screen (clear)
InitSoundScreen_0050:
	move.b	#0x68,d5                        	| [$0050: LD      H,$68] 68xx sound B
	clr.b	(a0)                             	| [$0052: LD      (HL),$00] Sound off
	move.b	#0x60,d5                        	| [$0054: LD      H,$60] 60xx sound A
	clr.b	(a0)                             	| [$0056: LD      (HL),$00] Sound off
	move.b	#0x58,d5                        	| [$0058: LD      H,$58] 58xx scroll register
	clr.b	(a0)                             	| [$005a: LD      (HL),$00] set scrolling to zero
	jbsr	ClearScreenPlane_006B             	| [$005c: CALL    ClearScreenPlane_006B] Clear the plane
	move.b	#0x50,d5                        	| [$005f: LD      H,$50] 50xx video register
	move.b	#0x01,(a0)                      	| [$0061: LD      (HL),$01] Second memory bank
	jbsr	ClearScreenPlane_006B             	| [$0063: CALL    ClearScreenPlane_006B] Clear the plane
	move.b	#0x50,d5                        	| [$0066: LD      H,$50] 50xx video register
	clr.b	(a0)                             	| [$0068: LD      (HL),$00] Back to first memory bank
	rts                                    	| [$006a: RET] Done

* Clear a screen plane (foreground or background)
* Set the lower bit of the video register to pick fore/back.
* 4000 - 4BF8 (inclusive)
*
ClearScreenPlane_006B:
	lea	unknown_4BF8,a0                	| [$006b: LD      HL,unknown_4BF8] Highest point
	move.b	#0x3F,d0                        	| [$006e: LD      A,$3F] Stop when H reaches 3F
l_0070:
	clr.b	(a0)                             	| [$0070: LD      (HL),$00] Clear the memory
	subq.w	#1,a0                           	| [$0072: DEC     HL] Point to next
	cmp.b	d5,d0                            	| [$0073: CP      H] All done?
	jne	l_0070                             	| [$0074: JP      NZ,$0070] No ... go back for all
	rts                                    	| [$0077: RET] Done

l_0078:
	jbsr	l_0196                            	| [$0078: CALL    $0196]
	jra	l_06f0                             	| [$007b: JP      $06F0]



* Wait for the vertical blanking and then handle coin counting
*
WaitVBlankCoin_0080:
	move.b	#0x78,d5                        	| [$0080: LD      H,$78] 78xx DSW0 Check ...
	move.b	(a0),d0                         	| [$0082: LD      A,(HL)] ... screen blanking flag
	and.b	#0x80,d0                         	| [$0083: AND     $80] Wait for it ...
	jeq	WaitVBlankCoin_0080                	| [$0085: JP      Z,WaitVBlankCoin_0080] ... to set
l_0088:
	move.b	(a0),d0                         	| [$0088: LD      A,(HL)] Check screen blanking flag
	and.b	#0x80,d0                         	| [$0089: AND     $80] Wait for it ...
	jne	l_0088                             	| [$008b: JP      NZ,$0088] ... to clear (0=in blanking)
*
	move.b	#0x70,d5                        	| [$008e: LD      H,$70] 70xx IN0 Current value ...
	move.b	(a0),d0                         	| [$0090: LD      A,(HL)] ... of IN0 inputs
	lea	current_input_value_43A0,a0                	| [$0091: LD      HL,current_input_value_43A0] Value from ...
	move.b	(a0),d1                         	| [$0094: LD      B,(HL)] ... last read
	move.b	d0,(a0)                         	| [$0095: LD      (HL),A] Store new value
	addq.w	#1,a0                           	| [$0096: INC     L] To 43A1
	move.b	d1,(a0)                         	| [$0097: LD      (HL),B] Store old value
	lea	unknown_439B,a0                        	| [$0098: LD      L,$9B] Bump the ...
	jbsr	AddOneToMem_0200                  	| [$009a: CALL    AddOneToMem_0200] ... ?? counter
	lea	unknown_438F,a0                        	| [$009d: LD      L,$8F] Get number ...
	move.b	(a0),d0                         	| [$009f: LD      A,(HL)] ... of coins
*
* !! There are two digits for "coins" on the screen, but only the one's digit is
* !! changed. Once you get to 9, the code stops counting. It takes the coin
* !! from you, but it doesn't give you credit.
*
	cmp.b	#0x09,d0                         	| [$00a0: CP      $09] Already 9?
	bne.b	0f                               	| [...]
	rts                                    	| [$00a2: RET     Z] Yes ... nothing more to check [...]
0:
	jcc	l_0000                             	| [$00a3: JP      NC,$0000] More than 9? OOPS -- soft reset
	move.b	#0x01,d1                        	| [$00a6: LD      B,$01] Coin bit of the input register
	jbsr	CheckInputBits                    	| [$00a8: CALL    CheckInputBits] Has the coin input gone from 1 to 0?
	bne.b	0f                               	| [...]
	rts                                    	| [$00ab: RET     Z] No ... no coins inserted ... done [...]
0:
	lea	unknown_438F,a0                        	| [$00ac: LD      L,$8F] Add one ...
	addq.b	#1,(a0)                         	| [$00ae: INC     (HL)] ... to coin count (438F)
	move.b	(a0),d0                         	| [$00af: LD      A,(HL)] Current value ...
	add.b	#0x20,d0                         	| [$00b0: ADD     $20] ... to number tile
	move.b	d0,unknown_4142                 	| [$00b2: LD      (unknown_4142),A] Change number of coins on screen
	rts                                    	| [$00b5: RET] Done

* Never called
	nop                                    	| [$00b6: NOP]
	rts                                    	| [$00b7: RET]



* Check to see if a particular bit(s) in the input register has changed
* from 1 to 0 since last we checked. Return NZ if transitioned from 1 to 0.
*
CheckInputBits:
	lea	current_input_value_43A0,a0                	| [$00bb: LD      HL,current_input_value_43A0] Get current ...
	move.b	(a0)+,d0                         	| [$00be: LD      A,(HL)] ... input value
	not.b	d0                               	| [$00bf: CPL] Flip the current bits
	and.b	d1,d0                            	| [$00c0: AND     B] Mask off all but the ones we are checking
	addq.w	#1,a0                           	| [$00c1: INC     L] Point to last input value
	and.b	(a0),d0                          	| [$00c2: AND     (HL)] Zero unles new bit is 0 and old is 1
	rts                                    	| [$00c3: RET] Return state

l_00c4:
	move.b	(a0),d0                         	| [$00c4: LD      A,(HL)]
	and.b	#0x0F,d0                         	| [$00c5: AND     $0F]
	or.b	#0x20,d0                          	| [$00c7: OR      $20]
	move.b	d0,(a1)                         	| [$00c9: LD      (DE),A]
	jbsr	AddOneRow_0210                    	| [$00ca: CALL    AddOneRow_0210]
	subq.b	#1,d1                           	| [$00cd: DEC     B]
	bne.b	0f                               	| [...]
	rts                                    	| [$00ce: RET     Z] [...]
0:
	move.b	(a0),d0                         	| [$00cf: LD      A,(HL)]
	ror.b	#4,d0                            	| [$00d0: RRCA] * 4
	and.b	#0x0F,d0                         	| [$00d4: AND     $0F]
	or.b	#0x20,d0                          	| [$00d6: OR      $20]
	move.b	d0,(a1)                         	| [$00d8: LD      (DE),A]
	jbsr	AddOneRow_0210                    	| [$00d9: CALL    AddOneRow_0210]
	subq.w	#1,a0                           	| [$00dc: DEC     HL]
	subq.b	#1,d1                           	| [$00dd: DEC     B]
	jne	l_00c4                             	| [$00de: JP      NZ,$00C4]
	rts                                    	| [$00e1: RET]

l_00e3:
	lea	unknown_4399,a0                	| [$00e3: LD      HL,unknown_4399]
	jbsr	AddOneToMem_0200                  	| [$00e6: CALL    AddOneToMem_0200]
	move.w	#0x0001,d1                      	| [$00e9: LD      BC,$0001] 1
	jbsr	CompareBCtoMem_0258               	| [$00ec: CALL    CompareBCtoMem_0258]
	jeq	l_01e1                             	| [$00ef: JP      Z,$01E1]
	move.w	#0x0002,d1                      	| [$00f2: LD      BC,$0002] 2
	move.w	#0x011F,d3                      	| [$00f5: LD      DE,$011F]
	jbsr	SubtractIfEnough_0260             	| [$00f8: CALL    SubtractIfEnough_0260]
	jcc	l_0196                             	| [$00fb: JP      NC,$0196]
	move.w	#0x0120,d1                      	| [$00fe: LD      BC,$0120]
	jbsr	CompareBCtoMem_0258               	| [$0101: CALL    CompareBCtoMem_0258]
	jeq	l_0bca                             	| [$0104: JP      Z,$0BCA]
	move.b	#0xB0,d1                        	| [$0107: LD      C,$B0]
	jbsr	CompareBCtoMem_0258               	| [$0109: CALL    CompareBCtoMem_0258]
	jeq	l_01e1                             	| [$010c: JP      Z,$01E1]
	move.w	#0xB8,d1                        	| [$010f: LD      C,$B8]
	jbsr	CompareBCtoMem_0258               	| [$0111: CALL    CompareBCtoMem_0258]
	jeq	l_0580                             	| [$0114: JP      Z,$0580]
	move.w	#0xC0,d1                        	| [$0117: LD      C,$C0]
	move.w	#0x02DF,d3                      	| [$0119: LD      DE,$02DF]
	jbsr	SubtractIfEnough_0260             	| [$011c: CALL    SubtractIfEnough_0260]
	jcc	l_0078                             	| [$011f: JP      NC,$0078]
	move.w	#0x0300,d1                      	| [$0122: LD      BC,$0300]
	move.w	#0x03AF,d3                      	| [$0125: LD      DE,$03AF]
	jbsr	SubtractIfEnough_0260             	| [$0128: CALL    SubtractIfEnough_0260]
	jcc	l_21dc                             	| [$012b: JP      NC,$21DC]
	move.w	#0x03E6,d1                      	| [$012e: LD      BC,$03E6]
	moveq	#-1,d3                      	| [$0131: LD      DE,$FFFF]
	jbsr	SubtractIfEnough_0260             	| [$0134: CALL    SubtractIfEnough_0260]
	jcc	l_03b0                             	| [$0137: JP      NC,$03B0]
	rts                                    	| [$013a: RET]



* no idea of what it does. If commented out, first level is skipped
l_0140:
	jbsr	l_03a0                            	| [$0140: CALL    $03A0]
	jbsr	WaitVBlankCoin_0080               	| [$0143: CALL    WaitVBlankCoin_0080]
	jbsr	l_0380                            	| [$0146: CALL    $0380]
	lea	unknown_43A3,a0                	| [$0149: LD      HL,unknown_43A3]
	move.b	#0x02,(a0)                      	| [$014c: LD      (HL),$02]
	addq.w	#1,a0                           	| [$014e: INC     L]
	clr.b	(a0)                             	| [$014f: LD      (HL),$00]
	                                    	| [$0151: NOP]
	                                    	| [$0152: NOP]
	                                    	| [$0153: NOP]
	lea	unknown_43B8,a0                        	| [$0154: LD      L,$B8]
	move.b	#0x08,d1                        	| [$0156: LD      B,$08]
	jbsr	clear_area_05D8                   	| [$0158: CALL    clear_area_05D8]
	lea	unknown_43BA,a0                        	| [$015b: LD      L,$BA]
	move.b	#0x10,(a0)                      	| [$015d: LD      (HL),$10]
	lea	unknown_43BE,a0                        	| [$015f: LD      L,$BE]
	jbsr	osd_read_dipswitches                       	| [$0161: LD      A,($7800)] 78xx DSW0
	and.b	#0x0C,d0                         	| [$0164: AND     $0C] Bonus lives
	rol.b	#2,d0                            	| [$0166: RLCA] * 2
	add.b	#0x30,d0                         	| [$0168: ADD     $30]
	move.b	d0,(a0)                         	| [$016a: LD      (HL),A]
	move.b	#0x58,d5                        	| [$016b: LD      H,$58] 58xx scroll register
	clr.b	(a0)                             	| [$016d: LD      (HL),$00]
	jbsr	WaitVBlankCoin_0080               	| [$016f: CALL    WaitVBlankCoin_0080]
	rts                                    	| [$0172: RET]

l_0173:
	move.b	(a0),d0                         	| [$0173: LD      A,(HL)]
	and.b	#0x7F,d0                         	| [$0174: AND     $7F]
	move.b	#0xCE,d1                        	| [$0176: LD      B,$CE]
	cmp.b	#0x1F,d0                         	| [$0178: CP      $1F]
	bcc.b	0f                               	| [...]
	rts                                    	| [$017a: RET     C] [...]
0:
	move.b	#0xFE,d1                        	| [$017b: LD      B,$FE]
	cmp.b	#0x1F,d0
	bne.b	0f                               	| [...]
	rts                                    	| [$017d: RET     Z] [...]
0:
	move.b	#0xAE,d1                        	| [$017e: LD      B,$AE]
	cmp.b	#0x5F,d0                         	| [$0180: CP      $5F]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0182: RET     C] [...]
0:
	move.b	#0xFE,d1                        	| [$0183: LD      B,$FE]
	tst.b	d0
	bne.b	0f                               	| [...]
	rts                                    	| [$0185: RET     Z] [...]
0:
	move.b	#0xCE,d1                        	| [$0186: LD      B,$CE]
	cmp.b	#0x7F,d0                         	| [$0188: CP      $7F]
	bcc.b	0f                               	| [...]
	rts                                    	| [$018a: RET     C] [...]
0:
	move.b	#0xFE,d1                        	| [$018b: LD      B,$FE]
	subq.w	#1,a0                           	| [$018d: DEC     L]
	move.b	(a0),d0                         	| [$018e: LD      A,(HL)]
	cmp.b	#0x09,d0                         	| [$018f: CP      $09]
	beq.b	0f                               	| [...]
	rts                                    	| [$0191: RET     NZ] [...]
0:
	move.b	#0x7E,d1                        	| [$0192: LD      B,$7E]
	rts                                    	| [$0194: RET]

l_0196:
	move.b	(a0),d0                         	| [$0196: LD      A,(HL)]
	and.b	#0x1F,d0                         	| [$0197: AND     $1F]
	cmp.b	#0x06,d0                         	| [$0199: CP      $06]
	bcc.b	0f                               	| [...]
	rts                                    	| [$019b: RET     C] [...]
0:
	move.b	d0,d4                           	| [$019c: LD      E,A]
	move.b	(a0),d0                         	| [$019d: LD      A,(HL)]
	and.b	#0xE0,d0                         	| [$019e: AND     $E0]
	move.b	d0,d2                           	| [$01a0: LD      C,A]
	                           	| [$01a1: DEC     L]
	move.b	-(a0),d1                         	| [$01a2: LD      B,(HL)]
	ILLEGAL  | check A0 value
	lea	unknown_43A8,a0                        	| [$01a3: LD      L,$A8]
	move.b	d1,(a0)+                         	| [$01a5: LD      (HL),B]
	                           	| [$01a6: INC     L]
	move.b	d2,(a0)                         	| [$01a7: LD      (HL),C]
	move.w	#0x1860,d1                      	| [$01a8: LD      BC,$1860]
	jbsr	AddBCtoMem_0206                   	| [$01ab: CALL    AddBCtoMem_0206]
	move.b	(a0),d0                         	| [$01ae: LD      A,(HL)]
	                           	| [$01af: DEC     L]
	move.b	-(a0),d5                         	| [$01b0: LD      H,(HL)]
	move.b	d0,d6                           	| [$01b1: LD      L,A]
	move.b	d4,d0                           	| [$01b2: LD      A,E]
	move.b	(a0)+,d3                         	| [$01b3: LD      D,(HL)]
	                           	| [$01b4: INC     L]
	move.b	(a0),d4                         	| [$01b5: LD      E,(HL)]
	subq.w	#1,a0                           	| [$01b6: DEC     L]
	move.b	d0,d2                           	| [$01b7: LD      C,A]
	add.b	d6,d0                            	| [$01b8: ADD     A,L]
	move.b	d0,d6                           	| [$01b9: LD      L,A]
	move.b	d2,d0                           	| [$01ba: LD      A,C]
	subq.b	#0x06,d0                        	| [$01bb: SUB     $06]
	LOAD_D3_16_FROM_D3D4
	move.b	d0,d2                           	| [$01bd: LD      C,A]
	jeq	l_01c8                             	| [$01be: JP      Z,$01C8]
l_01c1:
	
	jbsr	SubtractOneRow_0217               	| [$01c1: CALL    SubtractOneRow_0217]
	subq.w	#1,d1                           	| [$01c4: DEC     C]
	jne	l_01c1                             	| [$01c5: JP      NZ,$01C1]
l_01c8:
	move.b	(a0),d0                         	| [$01c8: LD      A,(HL)]
	move.w	d3,d7
	jbsr	osd_w_videoram                         	| [$01c9: LD      (DE),A]
	jra	l_14e0                             	| [$01ca: JP      $14E0]
	                            	| [$01cd: JP      NZ,$01C0]

l_01d0:
	move.b	(a0)+,d3                         	| [$01d0: LD      D,(HL)] Get ...
											| [$01d1: INC     L] ... the ...
	move.b	(a0),d4                         	| [$01d2: LD      E,(HL)] ... screen coord
											| [$01d3: LD      A,L] Add 5 ...
	addq.w	#0x05,a0                        	| [$01d4: ADD     $05] ... go get ...
												| [$01d6: LD      L,A] ... data
	move.b	#0x1A,d1                        	| [$01d7: LD      B,$1A] 26 columns
	jbsr	DrawColumn_01ED                   	| [$01d9: CALL    DrawColumn_01ED] Draw next column
	subq.w	#1,d2                           	| [$01dc: DEC     C] All columns done?
	jne	l_01d0                             	| [$01dd: JP      NZ,$01D0] No ... draw all columns
	rts                                    	| [$01e0: RET] Done

l_01e1:
	jbsr	l_0140                            	| [$01e1: CALL    $0140]
l_01e4:
	lea	game_rom+0x1960,a0                      	| [$01e4: LD      HL,$1960]
	move.b	#0x03,d2                        	| [$01e7: LD      C,$03]
	jra	l_01d0                             	| [$01e9: JP      $01D0]


* Remember the screen is rotated.
* The draws a column in screen memory (row on the screen)
*
DrawColumn_01ED:
	move.b	(a0)+,d0                         	| [$01ed: LD      A,(HL)] Copy the data ...
	move.b	d0,(a1)                         	| [$01ee: LD      (DE),A] .. to the screen
												| [$01ef: INC     HL] Next in data
	jbsr	SubtractOneRow_0217               	| [$01f0: CALL    SubtractOneRow_0217] Move DE to next row
	subq.b	#1,d1                           	| [$01f3: DEC     B] All drawn?
	jne	DrawColumn_01ED                    	| [$01f4: JP      NZ,DrawColumn_01ED] Draw them all
	rts                                    	| [$01f7: RET] Done


* Two-byte +1 to (HL-1) : (HL).
*
AddOneToMem_0200:
	addq.b	#1,(a0)                         	| [$0200: INC     (HL)] Add one to LSB
	beq.b	0f                               	| [...]
	rts                                    	| [$0201: RET     NZ] We didn't overflow ... done [...]
0:
	                           	| [$0202: DEC     L] Back up to MSB
	addq.b	#1,(-1,a0)                         	| [$0203: INC     (HL)] Carry into the MSB
	                           	| [$0204: INC     L] Restore point to LSB
	rts                                    	| [$0205: RET] Done

* Two-byte addition. BC is added to (HL-1) : (HL).
*
AddBCtoMem_0206:
	                         	| [$0206: LD      A,(HL)] Get the lower byte
	                          	| [$0207: ADD     A,C] Add C to the lower
	add.b	d2,(a0)                         	| [$0208: LD      (HL),A] Store the new lower
	                           	| [$0209: DEC     L] Back up to upper byte
	move.b	-(a0),d0                         	| [$020a: LD      A,(HL)] Add B and carry ...
	addx.b	d1,d0                           	| [$020b: ADC     A,B] ... to upper byte
	move.b	d0,(a0)+                         	| [$020c: LD      (HL),A] Store the new upper byte
	                           	| [$020d: INC     L] Restore pointer to LSB
	rts                                    	| [$020e: RET] Done


* Add 32 (one row) to DE (two bytes)
*
AddOneRow_0210:
	                           	| [$0210: LD      A,E] Add ...
	add.w	#0x20,d3                         	| [$0211: ADD     $20] ... 32 to ...
	                           	| [$0213: LD      E,A] ... E
	                               	| [...]
	rts                                    	| [$0214: RET     NC] No carry ... we are done [...]

                       	| [$0215: INC     D] Carry into D
                      	| [$0216: RET] Done

* Subtract 32 (one rom) from DE (two bytes)
SubtractOneRow_0217:
	sub.w	#0x20,d3
	rts
	
	   	| [$0217: LD      A,E] Subtract ...
	    	| [$0218: SUB     $20] ... 32 from ...
	   	| [$021a: LD      E,A] ... E
	    	| [...]
	  	| [$021b: RET     NC] No borrow ... we are done [...]
   	| [$021c: DEC     D] Borrow from D                                   	| [$021d: RET] Done


* 3-byte (6 digit) BCD addition. Add BC*10 to (HL-2):(HL-1):(HL).
* The games keeps the lowest digit of the scores to 0.
*
AddToScore_0220:
	CLEAR_XC_FLAGS
	clr.b	d0                               	| [$0220: XOR     A] !! Pointless. We are about to change A and the flags
	move.b	(a0),d0                         	| [$0221: LD      A,(HL)] Lowest 2 digits
	abcd	d2,d0                            	| [$0222: ADD     A,C] Add C to score
												| Adjust for binary coded decimal
	move.b	d0,(a0)                         	| [$0224: LD      (HL),A] Update lowest 2 digits
	                           	| [$0225: DEC     L] Point to middle 2 digits
	move.b	-(a0),d0                         	| [$0226: LD      A,(HL)] Add B to ...
	abcd	d1,d0                           	| [$0227: ADC     A,B] ... score
                         | Adjust for BCD
	move.b	d0,(a0)                         	| [$0229: LD      (HL),A] Store the middle 2 digits
	                           	| [$022a: DEC     L] Point to the upper 2 digits
	move.b	-(a0),d0                         	| [$022b: LD      A,(HL)] Add in ...
	move.b	#0x00,d7                        	| [$022c: ADC     $00] ... any carry
	abcd	d7,d0                           	| [$022c: ADC     $00] ... any carry

                         | Adjust for binary coded decimal
	move.b	d0,(a0)                         	| [$022f: LD      (HL),A] Store the upper 2 digits
	addq.w	#2,a0                           	| [$0230: INC     L] Restore ...
	rts                                    	| [$0232: RET] Done


                                 	| [$0252: RET] Done


* Two byte compare of BC to memory at (HL-1):(HL)
*
* < A0: memory (points to word)
* < D1.W: value to compare to

CompareBCtoMem_0258:
	move.b	(-1,a0),d0
	lsl.w	#8,d0
	move.b	(a0),d0                         	| [$0258: LD      A,(HL)] Value from memory
	
	cmp.w	d1,d0                            	| [$0259: CP      C] Are the values the same?
	rts

* Subtract DE from memory if memory is greater/equal to BC.
*
* < A0 points to 16 bit data
* < D3.W
SubtractIfEnough_0260:
	jbsr	SubtractFromMemory_0270           	| [$0260: CALL    SubtractFromMemory_0270] Try subtraction. Is memory larger (or equal) to BC?
	bcc.b	0f                               	| [...]
	rts                                    	| [$0263: RET     C] No ... ignore request [...]
0:
	jbsr	SubtractToMemory_0277             	| [$0264: CALL    SubtractToMemory_0277] Yes ... subtract DE from memory
	rts                                    	| [$0267: RET] Done



* Two byte subtraction of memory from BC. BC = BC -  (HL-1):(HL)
*
SubtractFromMemory_0270:
	move.b	(a0),d0                         	| [$0270: LD      A,(HL)] Get the low byte
	sub.b	d1,d0                            	| [$0271: SUB     C] Subtract from C
	                           	| [$0272: DEC     L] Point to upper byte
	move.b	(-1,a0),d0                         	| [$0273: LD      A,(HL)] Get the upper byte
	rol.w	#8,d1
	subx.b	d1,d0                           	| [$0274: SBC     B] Subtract from B (with borrow)
	                           	| [$0275: INC     L] Restore pointer
	rol.w	#8,d1		| doesn't affect X
	SET_C_FROM_X
	rts                                    	| [$0276: RET] Done

* Two byte subtraction of DE from memory. (HL-1):(HL) = (HL-1):(HL) - DE
SubtractToMemory_0277:
	move.b	d3,d0                           	| [$0277: LD      A,E] Lower byte
	sub.b	(a0),d0                          	| [$0278: SUB     (HL)] Subtract it from memory
	                           	| [$0279: DEC     L] Point to upper byte
	rol.w	#8,d3
	move.b	d3,d0                           	| [$027a: LD      A,D] Value to A
	rol.w	#8,d3
	move.b	(-1,a0),d7                         	| [$027b: SBC     (HL)] Subtract upper byte from memory (with borrow)
	subx.b	d7,d0                         	| [$027b: SBC     (HL)] Subtract upper byte from memory (with borrow)
	                           	| [$027c: INC     L] Restore pointer
	rts                                    	| [$027d: RET] Done


l_0288:
	jbsr	l_0140                            	| [$0288: CALL    $0140]
	lea	game_rom+0x19C0,a0                      	| [$028b: LD      HL,$19C0]
	move.b	#0x02,d2                        	| [$028e: LD      C,$02]
	jbsr	l_01d0                            	| [$0290: CALL    $01D0]
	move.b	#0x02,d2                        	| [$0293: LD      C,$02]
	jbsr	l_17e0                            	| [$0295: CALL    $17E0]
	cmp.b	#0x02,d0                         	| [$0298: CP      $02]
	jcs	l_02a7                             	| [$029a: JP      C,$02A7]
	lea	game_rom+0x1BA0,a0                      	| [$029d: LD      HL,$1BA0]
	move.b	#0x01,d2                        	| [$02a0: LD      C,$01]
	jbsr	l_01d0                            	| [$02a2: CALL    $01D0]
	move.b	#0x06,d2                        	| [$02a5: LD      C,$06]
l_02a7:
	jbsr	osd_read_inputs                       	| [$02a7: LD      A,($7000)] 70xx IN0
	not.b	d0                               	| [$02aa: CPL]
	and.b	d2,d0                            	| [$02ab: AND     C]
	bne.b	0f                               	| [...]
	rts                                    	| [$02ac: RET     Z] [...]
0:
	jbsr	l_02cb                            	| [$02ad: CALL    $02CB]
	jbsr	l_02f0                            	| [$02b0: CALL    $02F0]
	jbsr	l_032e                            	| [$02b3: CALL    $032E]
	jbsr	l_0350                            	| [$02b6: CALL    $0350]
	jbsr	l_0140                            	| [$02b9: CALL    $0140]
	move.b	#0x50,d5                        	| [$02bc: LD      H,$50] 50xx video register
	move.b	#0x01,(a0)                      	| [$02be: LD      (HL),$01] set bank 1
	jbsr	l_0140                            	| [$02c0: CALL    $0140]
	move.b	#0x50,d5                        	| [$02c3: LD      H,$50] 50xx video register
	clr.b	(a0)                             	| [$02c5: LD      (HL),$00] set bank 0
	rts                                    	| [$02c7: RET]



l_02cb:
	move.b	#0x01,d2                        	| [$02cb: LD      C,$01]
	cmp.b	#0x02,d0                         	| [$02cd: CP      $02]
	jeq	l_02d4                             	| [$02cf: JP      Z,$02D4]
	move.b	#0x02,d2                        	| [$02d2: LD      C,$02]
l_02d4:
	lea	game_in_play_43A2,a0           	| [$02d4: LD      HL,game_in_play_43A2]
	move.b	d2,(a0)                         	| [$02d7: LD      (HL),C]
	jbsr	osd_read_dipswitches                       	| [$02d8: LD      A,($7800)] 78xx DSW0
	and.b	#0x10,d0                         	| [$02db: AND     $10] Coinage
	jeq	l_02e3                             	| [$02dd: JP      Z,$02E3]
	move.b	d2,d0                           	| [$02e0: LD      A,C]
	rol.b	#1,d0                            	| [$02e1: RLCA]
	move.b	d0,d2                           	| [$02e2: LD      C,A]
l_02e3:
	lea	unknown_438F,a0                        	| [$02e3: LD      L,$8F]
	move.b	(a0),d0                         	| [$02e5: LD      A,(HL)]
	sub.b	d2,d0                            	| [$02e6: SUB     C]
	move.b	d0,(a0)                         	| [$02e7: LD      (HL),A]
	add.b	#0x20,d0                         	| [$02e8: ADD     $20]
	move.b	d0,unknown_4142                 	| [$02ea: LD      (unknown_4142),A]
	rts                                    	| [$02ed: RET]


l_02f0:
	lea	unknown_4383,a1                	| [$02f0: LD      DE,unknown_4383]
	lea	unknown_438B,a0                	| [$02f3: LD      HL,unknown_438B]
	jbsr	l_0314                            	| [$02f6: CALL    $0314]
	bcs.b	0f                               	| [...]
	jbsr	copy_3_bytes_a0_a1_0320                            	| [$02f9: CALL    NC,$0320]
0:
	lea	unknown_4387,a1										| [$02fc: LD      E,$87]
	lea	unknown_438B,a0										| [$02fe: LD      L,$8B]
	jbsr	l_0314                            	| [$0300: CALL    $0314]
	bcs.b	0f                               	| [...]
	jbsr	copy_3_bytes_a0_a1_0320                            	| [$0303: CALL    NC,$0320]
0:
	lea	unknown_438B,a0                        	| [$0306: LD      L,$8B]
	lea	unknown_4141,a1                	| [$0308: LD      DE,unknown_4141]
	move.b	#0x06,d1                        	| [$030b: LD      B,$06]
	jbsr	l_00c4                            	| [$030d: CALL    $00C4]
	rts                                    	| [$0310: RET]


l_0314:
	move.b	(a1),d0                         	| [$0314: LD      A,(DE)]
	sub.b	(a0),d0                          	| [$0315: SUB     (HL)]
												| [$0316: DEC     E]
												| [$0317: DEC     L]
	move.b	-(a1),d0                         	| [$0318: LD      A,(DE)]
	move.b	-(a0),d7                         	| [$0319: SBC     (HL)]
	subx.b	d7,d0                         	| [$0319: SBC     (HL)]
	                           	| [$031a: DEC     E]
	                           	| [$031b: DEC     L]
	move.b	-(a1),d0                         	| [$031c: LD      A,(DE)]
	move.b	-(a0),d7                         	| [$031d: SBC     (HL)]
	subx.b	d7,d0                         	| [$031d: SBC     (HL)]
	rts                                    	| [$031e: RET]

copy_3_bytes_a0_a1_0320:
	move.b	(a1)+,(a0)+                         	| [$0320: LD      A,(DE)]
	                         	| [$0321: LD      (HL),A]
											| [$0322: INC     DE]
											| [$0323: INC     HL]
	move.b	(a1)+,(a0)+                         	| [$0324: LD      A,(DE)]
										| [$0325: LD      (HL),A]
											| [$0326: INC     DE]
	                           	| [$0327: INC     HL]
	move.b	(a1),d0                         	| [$0328: LD      A,(DE)]
	move.b	d0,(a0)                         	| [$0329: LD      (HL),A]
	rts                                    	| [$032a: RET]


l_032e:
	lea	unknown_4380,a0                	| [$032e: LD      HL,unknown_4380]
l_0331:
	clr.b	(a0)                             	| [$0331: LD      (HL),$00]
	addq.w	#1,a0                           	| [$0333: INC     HL]
	move.b	d6,d0                           	| [$0334: LD      A,L]
	cmp.b	#0x88,d0                         	| [$0335: CP      $88]
	jne	l_0331                             	| [$0337: JP      NZ,$0331]
	lea	unknown_4383,a0                        	| [$033a: LD      L,$83]
	lea	unknown_4261,a1                	| [$033c: LD      DE,unknown_4261]
	move.b	#0x06,d1                        	| [$033f: LD      B,$06]
	jbsr	l_00c4                            	| [$0341: CALL    $00C4]
	lea	unknown_4387,a0                        	| [$0344: LD      L,$87]
	lea	unknown_4021,a1                	| [$0346: LD      DE,unknown_4021]
	move.b	#0x06,d1                        	| [$0349: LD      B,$06]
	jbsr	l_00c4                            	| [$034b: CALL    $00C4]
	rts                                    	| [$034e: RET]


l_0350:
	jbsr	osd_read_dipswitches                       	| [$0350: LD      A,($7800)] 78xx DSW0
	and.b	#0x03,d0                         	| [$0353: AND     $03] Lives
	addq.b	#0x03,d0                        	| [$0355: ADD     $03]
	move.b	d0,d1                           	| [$0357: LD      B,A]
	lea	nb_lives_p1_4390,a0            	| [$0358: LD      HL,nb_lives_p1_4390]
	move.b	d1,(a0)                         	| [$035b: LD      (HL),B]
	lea	unknown_43A2,a0                        	| [$035c: LD      L,$A2]
	move.b	(a0),d0                         	| [$035e: LD      A,(HL)]
	cmp.b	#0x01,d0                         	| [$035f: CP      $01]
	jeq	l_0367                             	| [$0361: JP      Z,$0367]
	lea	unknown_4391,a0                        	| [$0364: LD      L,$91]
	move.b	d1,(a0)                         	| [$0366: LD      (HL),B] nb lives player 2
l_0367:
	lea	unknown_4390,a0                        	| [$0367: LD      L,$90]
	move.b	(a0)+,d0                         	| [$0369: LD      A,(HL)]
	or.b	#0x20,d0                          	| [$036a: OR      $20]
	move.b	d0,unknown_42A2                 	| [$036c: LD      (unknown_42A2),A]
	                           	| [$036f: INC     L]
	move.b	(a0),d0                         	| [$0370: LD      A,(HL)]
	or.b	#0x20,d0                          	| [$0371: OR      $20]
	move.b	d0,unknown_4062                 	| [$0373: LD      (unknown_4062),A]
	rts                                    	| [$0376: RET]

l_0377:
	lea	unknown_438C,a0                	| [$0377: LD      HL,unknown_438C]
	move.b	d0,(a0)+                         	| [$037a: LD      (HL),A]
	                           	| [$037b: INC     L]
	move.b	d0,(a0)                         	| [$037c: LD      (HL),A]
	rts                                    	| [$037d: RET]



l_0380:
	lea	unknown_433F,a0                	| [$0380: LD      HL,unknown_433F]
	move.w	#0x001F,d3                      	| [$0383: LD      DE,$001F] 31
	lea	game_rom+0x033F,a4                      	| [$0386: LD      BC,$033F]
l_0389:
	move.b	d3,(a0)                         	| [$0389: LD      (HL),D]
	subq.w	#1,a0                           	| [$038a: DEC     HL]
	move.b	d3,(a0)                         	| [$038b: LD      (HL),D]
	subq.w	#1,a0                           	| [$038c: DEC     HL]
	move.b	d6,d0                           	| [$038d: LD      A,L]
	and.b	d4,d0                            	| [$038e: AND     E]
	cmp.b	d1,d0                            	| [$038f: CP      B]
	jne	l_0389                             	| [$0390: JP      NZ,$0389]
	move.b	d3,(a0)                         	| [$0393: LD      (HL),D]
	subq.w	#4,a0                           	| [$0394: DEC     HL] * 4
	move.b	d5,d0                           	| [$0398: LD      A,H]
	cmp.b	d2,d0                            	| [$0399: CP      C]
	jne	l_0389                             	| [$039a: JP      NZ,$0389]
	rts                                    	| [$039d: RET]



l_03a0:
	lea	unknown_4B3F,a0                	| [$03a0: LD      HL,unknown_4B3F]
	move.w	#0x0047,d3                      	| [$03a3: LD      DE,$0047] 71
l_03a6:
	move.b	d3,(a0)                         	| [$03a6: LD      (HL),D]
	subq.w	#1,a0                           	| [$03a7: DEC     HL]
	move.b	d3,(a0)                         	| [$03a8: LD      (HL),D]
	subq.w	#1,a0                           	| [$03a9: DEC     HL]
	move.b	d5,d0                           	| [$03aa: LD      A,H]
	cmp.b	d4,d0                            	| [$03ab: CP      E]
	jne	l_03a6                             	| [$03ac: JP      NZ,$03A6]
	rts                                    	| [$03af: RET]
l_03b0:
	move.w	#0x07A0,d1                      	| [$03b0: LD      BC,$07A0]
	jbsr	SubtractFromMemory_0270           	| [$03b3: CALL    SubtractFromMemory_0270]
	jcs	l_03ce                             	| [$03b6: JP      C,$03CE]
	jbsr	CompareBCtoMem_0258               	| [$03b9: CALL    CompareBCtoMem_0258]
	jeq	l_03eb                             	| [$03bc: JP      Z,$03EB]
	move.w	#0x0B60,d1                      	| [$03bf: LD      BC,$0B60]
	jbsr	SubtractFromMemory_0270           	| [$03c2: CALL    SubtractFromMemory_0270]
	jcs	l_03ce                             	| [$03c5: JP      C,$03CE]
	jbsr	CompareBCtoMem_0258               	| [$03c8: CALL    CompareBCtoMem_0258]
	jeq	l_03e2                             	| [$03cb: JP      Z,$03E2]
l_03ce:
	jbsr	l_0173                            	| [$03ce: CALL    $0173]
	lea	current_input_value_43A0,a0                	| [$03d1: LD      HL,current_input_value_43A0]
	move.b	(a0),d0                         	| [$03d4: LD      A,(HL)]
	and.b	#0x01,d0                         	| [$03d5: AND     $01]
	or.b	d1,d0                             	| [$03d7: OR      B]
	move.b	d0,(a0)                         	| [$03d8: LD      (HL),A]
	jra	in_game_scheduler_0400             	| [$03d9: JP      in_game_scheduler_0400]
	jra	in_game_scheduler_0400             	| [$03dc: JP      in_game_scheduler_0400]


l_03e2:
	move.b	#1,d1
	move.b	#8,d2
	move.b	#1,d3
	move.b	#0,d4
											| [$03e2: LD      BC,$0108]
											| [$03e5: LD      DE,$1000]
	jra	l_03f1                             	| [$03e8: JP      $03F1]
l_03eb:
	move.b	#1,d1
	move.b	#4,d2
	move.b	#0,d3
	move.b	#8,d4

										| [$03eb: LD      BC,$0104]
									| [$03ee: LD      DE,$0008] 8
l_03f1:
	lea	game_state_43A4,a0             	| [$03f1: LD      HL,game_state_43A4]
	move.b	d1,(a0)                         	| [$03f4: LD      (HL),B]
	lea	current_stage_43B8,a0                       	| [$03f5: LD      L,$B8]
	move.b	d2,(a0)                         	| [$03f7: LD      (HL),C]
	lea	nb_to_kill_before_stage_completed_43BA,a0                        	| [$03f8: LD      L,$BA]
	move.b	d3,(a0)                         	| [$03fa: LD      (HL),D]
	addq.w	#1,a0                           	| [$03fb: INC     L]
	move.b	d4,(a0)                         	| [$03fc: LD      (HL),E]
	rts                                    	| [$03fd: RET]


* seems to be the main scheduling routine
* Jump to ?? function by number in 43A4
in_game_scheduler_0400:
	lea	jump_table_040E,a0             	| [$0400: LD      HL,jump_table_040E] Jump table
	moveq	#0,d0
	move.b	game_state_43A4,d0              	| [$0403: LD      A,(game_state_43A4)] ??
	                          	| [$0406: RLCA] *2
	                          	| [$0407: ADD     A,L] Offset ...
	                         	| [$0408: LD      L,A] ... into the table
	                         	| [$0409: LD      A,(HL)] MSB of destination
	                         	| [$040a: INC     L] Get the
	add.w	d0,d0
	add.w	d0,d0
	move.l	(a0,d0.w),a0                         	| [$040b: LD      L,(HL)] ... LSB of destination
	                           	| [$040c: LD      H,A] Now point to function
	jra	(a0)                               	| [$040d: JP      (HL)] Jump to function

* Notice these addresses are MSB:LSB (backwards from the processors endianness)
jump_table_040E:
	.long	init_new_play_0430
	.long	init_new_play_clear_screen_04AC
	.long	init_new_play_step_2_0515
	.long	game_playing_0800
	.long	player_hit_0AEA
	.long	game_over_0B60
	.long	boss_stage_completed_2400
	.long	end_of_level_transition_244C
* bpset 0406,(A==0)                     	|| (A==1)|| (A==2)|| (A==6)|| (A==7),{printf "%d",A;g}

* selects one of the two available palettes
set_proper_stage_palette_041E:
	move.b	unknown_43A3,d0                 	| [$041e: LD      A,(unknown_43A3)] seems to store memory bank bit with other things
	and.b	#0x01,d0                         	| [$0421: AND     $01]
	move.b	d0,d1                           	| [$0423: LD      B,A]
	move.b	current_stage_43B8,d0           	| [$0424: LD      A,(current_stage_43B8)]
	and.b	#0x02,d0                         	| [$0427: AND     $02]
	or.b	d1,d0                             	| [$0429: OR      B]
	jbsr	osd_write_5000                       	| [$042a: LD      ($5000),A] set memory bank & palette
	rts                                    	| [$042d: RET]


* initialize new play or demo
init_new_play_0430:
	lea	game_state_43A4,a0             	| [$0430: LD      HL,game_state_43A4] Next function to run ...
	move.b	#0x01,(a0)+                      	| [$0433: LD      (HL),$01] ... is 1 ??
	                           	| [$0435: INC     L]
	move.b	#0x80,(a0)                      	| [$0436: LD      (HL),$80]
	lea	unknown_43A3,a0                        	| [$0438: LD      L,$A3]
	move.b	(a0),d0                         	| [$043a: LD      A,(HL)]
	clr.b	(a0)                             	| [$043b: LD      (HL),$00] set 0 to unknown_43A3
	cmp.b	#0x02,d0                         	| [$043d: CP      $02]
	bne.b	0f                               	| [...]
	rts                                    	| [$043f: RET     Z] [...]
0:
	move.b	d0,(a0)                         	| [$0440: LD      (HL),A]
	                           	| [$0441: DEC     L]
	move.b	-(a0),d0                         	| [$0442: LD      A,(HL)]
	cmp.b	#0x01,d0                         	| [$0443: CP      $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$0445: RET     Z] [...]
0:
	addq.w	#1,a0                           	| [$0446: INC     L]
	move.b	(a0),d0                         	| [$0447: LD      A,(HL)]
	                               	| [$0448: AND     A]
	jeq	l_04a0                             	| [$0449: JP      Z,$04A0]
	lea	unknown_4390,a0                        	| [$044c: LD      L,$90]
	move.b	(a0),d0                         	| [$044e: LD      A,(HL)]
	                               	| [$044f: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$0450: RET     Z] [...]
0:
	lea	unknown_43A3,a0                        	| [$0451: LD      L,$A3]
	clr.b	(a0)                             	| [$0453: LD      (HL),$00]
	move.w	#0x0100,d1                      	| [$0455: LD      BC,$0100]
	jbsr	copy_bank_0460                    	| [$0458: CALL    copy_bank_0460]
	rts                                    	| [$045b: RET]



* Copy memory bank to bank
* B=from bank number, C=to bank number
* Starts at 4320
copy_bank_0460:
	LOAD_D1D2_FROM_D1_16
	jbsr	osd_copy_bank
	rts
	
*	lea	l_5000,a0                      	| [$0460: LD      HL,$5000] 50xx video register
*	lea	unknown_4320,a1                	| [$0463: LD      DE,unknown_4320]
*l_0466:
*	move.b	d1,(a0)                         	| [$0466: LD      (HL),B]
*	move.b	(a1),d0                         	| [$0467: LD      A,(DE)]
*	move.b	d2,(a0)                         	| [$0468: LD      (HL),C]
*	move.b	d0,(a1)                         	| [$0469: LD      (DE),A]
*	addq.w	#1,a1                           	| [$046a: INC     E]
*            ^^^^ check inc register d4 or a1
*	move.b	d4,d0                           	| [$046b: LD      A,E]
*	and.b	#0x03,d0                         	| [$046c: AND     $03]
*	jne	l_0466                             	| [$046e: JP      NZ,$0466]
**
*	move.b	d4,d0                           	| [$0471: LD      A,E]
*	and.b	#0xF0,d0                         	| [$0472: AND     $F0]
*	sub.b	#0x20,d0                         	| [$0474: SUB     $20]
*	move.b	d0,d4                           	| [$0476: LD      E,A]
*	jcc	l_0466                             	| [$0477: JP      NC,$0466]
*      
*	subq.b	#1,d3                           	| [$047a: DEC     D]
*	move.b	d3,d0                           	| [$047b: LD      A,D]
*	cmp.b	#0x3F,d0                         	| [$047c: CP      $3F]
*	jne	l_0466                             	| [$047e: JP      NZ,$0466]
*	lea	unknown_4380,a1                	| [$0481: LD      DE,unknown_4380]
*l_0484:
*	move.b	d1,(a0)                         	| [$0484: LD      (HL),B]
*	move.b	(a1),d0                         	| [$0485: LD      A,(DE)]
*	move.b	d2,(a0)                         	| [$0486: LD      (HL),C]
*	move.b	d0,(a1)                         	| [$0487: LD      (DE),A]
*	addq.w	#1,a1                           	| [$0488: INC     E]
*           
*	move.b	d4,d0                           	| [$0489: LD      A,E]
*	cmp.b	#0xB8,d0                         	| [$048a: CP      $B8]
*	jne	l_0484                             	| [$048c: JP      NZ,$0484]
**
*	lea	unknown_4BC0,a1                	| [$048f: LD      DE,unknown_4BC0]
*l_0492:
*	move.b	d1,(a0)                         	| [$0492: LD      (HL),B]
*	move.b	(a1),d0                         	| [$0493: LD      A,(DE)]
*	move.b	d2,(a0)                         	| [$0494: LD      (HL),C]
*	move.b	d0,(a1)                         	| [$0495: LD      (DE),A]
*	addq.w	#1,a1                           	| [$0496: INC     E]
*            
*	move.b	d4,d0                           	| [$0497: LD      A,E]
*	                               	| [$0498: CP      $00]
*	jne	l_0492                             	| [$049a: JP      NZ,$0492]
*	rts                                    	| [$049d: RET]



l_04a0:
											| [$04a0: LD      L,$A3]
	move.b	#0x01,unknown_43A3                      	| [$04a2: LD      (HL),$01]
	move.w	#0x0001,d1                      	| [$04a4: LD      BC,$0001] 1
	jbsr	copy_bank_0460                    	| [$04a7: CALL    copy_bank_0460]
	rts                                    	| [$04aa: RET]



* ?? Function 1
init_new_play_clear_screen_04AC:
	lea	timer_43A5,a0                  	| [$04ac: LD      HL,timer_43A5]
	subq.b	#1,(a0)                         	| [$04af: DEC     (HL)]
	move.b	(a0),d0                         	| [$04b0: LD      A,(HL)]
	                          	| [$04b1: DEC     L]
	move.b	#0x02,-(a0)                      	| [$04b2: LD      (HL),$02]
	tst.b	d0                               	| [$04b4: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$04b5: RET     Z] [...]
0:
	move.b	#0x01,(a0)                      	| [$04b6: LD      (HL),$01]
	cmp.b	#0x7F,d0                         	| [$04b8: CP      $7F]
	jeq	l_07f0                             	| [$04ba: JP      Z,$07F0]
	lea	unknown_439A,a0                        	| [$04bd: LD      L,$9A]
	clr.b	(a0)                             	| [$04bf: LD      (HL),$00]
	                           	| [$04c1: INC     L]
 	clr.b	-(a0)                             	| [$04c2: LD      (HL),$00]
	and.b	#0x08,d0                         	| [$04c4: AND     $08]
	jne	l_04e6                             	| [$04c6: JP      NZ,$04E6]
	jbsr	l_06e8                            	| [$04c9: CALL    $06E8]
	nop                                    	| [$04cc: NOP]
	lea	unknown_43A3,a0                	| [$04cd: LD      HL,unknown_43A3]
	move.b	(a0),d0                         	| [$04d0: LD      A,(HL)]
	                               	| [$04d1: AND     A]
	lea	unknown_4383,a0                        	| [$04d2: LD      L,$83]
	lea	unknown_4261,a1                	| [$04d4: LD      DE,unknown_4261]
	jeq	l_04df                             	| [$04d7: JP      Z,$04DF]
	lea	unknown_4387,a0                        	| [$04da: LD      L,$87]
	lea	unknown_4021,a1                	| [$04dc: LD      DE,unknown_4021]
l_04df:
	move.b	#0x06,d1                        	| [$04df: LD      B,$06]
	jbsr	l_00c4                            	| [$04e1: CALL    $00C4]
	rts                                    	| [$04e4: RET]

l_04e6:
	lea	unknown_43A3,a0                	| [$04e6: LD      HL,unknown_43A3]
	move.b	(a0),d0                         	| [$04e9: LD      A,(HL)]
	                               	| [$04ea: AND     A]
	move.w	#0x4261,d7                	| [$04eb: LD      DE,unknown_4261]
	jeq	l_04f4                             	| [$04ee: JP      Z,$04F4]
	move.w	#0x4021,d7                	| [$04f1: LD      DE,unknown_4021]
l_04f4:
	move.b	#0x06,d1                        	| [$04f4: LD      B,$06]
	jbsr	l_04fb                            	| [$04f6: CALL    $04FB]
	rts                                    	| [$04f9: RET]
l_04fb:
	clr.b	d0                               	| [$04fb: LD      A,$00]
	jbsr	osd_w_videoram                         	| [$04fd: LD      (DE),A]
	jbsr	AddOneRow_0210                    	| [$04fe: CALL    AddOneRow_0210]
	subq.b	#1,d1                           	| [$0501: DEC     B]
	jne	l_04fb                             	| [$0502: JP      NZ,$04FB]
	rts                                    	| [$0505: RET]
l_0506:
	lea	unknown_4392,a0                	| [$0506: LD      HL,unknown_4392]
	move.b	#0x06,d1                        	| [$0509: LD      B,$06]
	jbsr	clear_area_05D8                   	| [$050b: CALL    clear_area_05D8]
	move.b	unknown_4B50,d0                 	| [$050e: LD      A,(unknown_4B50)]
	move.b	d0,unknown_4394                 	| [$0511: LD      (unknown_4394),A]
	rts                                    	| [$0514: RET]

* ?? Function 2
init_new_play_step_2_0515:
	jbsr	set_proper_stage_palette_041E     	| [$0515: CALL    set_proper_stage_palette_041E]
	lea	game_state_43A4,a0             	| [$0518: LD      HL,game_state_43A4]
	move.b	#0x03,(a0)                      	| [$051b: LD      (HL),$03] advance state machine to "playing"
	jbsr	l_0580                            	| [$051d: CALL    $0580]
	jbsr	l_0547                            	| [$0520: CALL    $0547]
	jbsr	l_09a0                            	| [$0523: CALL    $09A0]
l_0526:
	jbsr	l_0532                            	| [$0526: CALL    $0532]
	jbsr	l_0a6c                            	| [$0529: CALL    $0A6C]
	jbsr	l_0506                            	| [$052c: CALL    $0506]
	jra	l_32b0                             	| [$052f: JP      $32B0]
*
l_0532:
	lea	unknown_4B50,a0                	| [$0532: LD      HL,unknown_4B50]
	move.b	#0xA0,d1                        	| [$0535: LD      B,$A0]
	jbsr	clear_area_05D8                   	| [$0537: CALL    clear_area_05D8]
	jbsr	l_05ec                            	| [$053a: CALL    $05EC]
	jbsr	l_0650                            	| [$053d: CALL    $0650]
	jbsr	l_0610                            	| [$0540: CALL    $0610]
	rts                                    	| [$0543: RET]



l_0547:
	lea	game_rom+0x0560,a0                      	| [$0547: LD      HL,$0560]
	lea	unknown_43C0,a1                	| [$054a: LD      DE,unknown_43C0]
	move.b	#0x20,d1                        	| [$054d: LD      B,$20]
	jbsr	l_05e0                            	| [$054f: CALL    $05E0]
	lea	unknown_43E0,a0                	| [$0552: LD      HL,unknown_43E0]
	move.b	#0x20,d1                        	| [$0555: LD      B,$20]
	jbsr	clear_area_05D8                   	| [$0557: CALL    clear_area_05D8]
	rts                                    	| [$055a: RET]

l_0580:
	lea		game_rom+0x598,a0
	subq.b	#1,d1                           	| [$0582: DEC     B]
	move.b	current_stage_43B8,d0           	| [$0583: LD      A,(current_stage_43B8)]
	and.w	#0x0F,d0                         	| [$0586: AND     $0F]
	add.w	d0,a0                            	| [$0588: ADD     A,L]
	                           	| [$0589: LD      L,A]
	move.b	(a0),d6                         	| [$058a: LD      L,(HL)]
	move.b	#0x05,d5                        	| [$058b: LD      H,$05]
	jbsr	load_rom_in_a0_from_d5d6
	lea	unknown_43AB,a1                	| [$058d: LD      DE,unknown_43AB]
	move.b	#0x0C,d1                        	| [$0590: LD      B,$0C]
	jbsr	l_05e0                            	| [$0592: CALL    $05E0]
	rts                                    	| [$0595: RET]




* < HL: start address
* < B: number of bytes to clear
clear_area_05D8:
	clr.b	d0                               	| [$05d8: XOR     A]
l_05d9:
	move.b	d0,(a0)                         	| [$05d9: LD      (HL),A]
	addq.w	#1,a0                           	| [$05da: INC     HL]
	subq.b	#1,d1                           	| [$05db: DEC     B]
	jne	l_05d9                             	| [$05dc: JP      NZ,$05D9]

	rts                                    	| [$05df: RET]
l_05e0:
	move.b	(a0)+,d0                         	| [$05e0: LD      A,(HL)]
	move.b	d0,(a1)+                         	| [$05e1: LD      (DE),A]
	                           	| [$05e2: INC     HL]
	                           	| [$05e3: INC     DE]
	subq.b	#1,d1                           	| [$05e4: DEC     B]
	jne	l_05e0                             	| [$05e5: JP      NZ,$05E0]
	rts                                    	| [$05e8: RET]

l_05ec:
	lea	game_rom+0x1500,a0                      	| [$05ec: LD      HL,$1500]
	move.b	current_stage_43B8,d0           	| [$05ef: LD      A,(current_stage_43B8)]
	and.w	#0x0F,d0                         	| [$05f2: AND     $0F]
	rol.b	#1,d0                            	| [$05f4: RLCA]
	add.w	d0,a0                            	| [$05f5: ADD     A,L]
	                           	| [$05f6: LD      L,A]
	move.b	(a0)+,d3                         	| [$05f7: LD      D,(HL)]
	                           	| [$05f8: INC     HL]
	move.b	(a0),d4                         	| [$05f9: LD      E,(HL)]
l_05fa:
	lea	unknown_4B70,a0                	| [$05fa: LD      HL,unknown_4B70]
	move.b	nb_to_kill_before_stage_completed_43BA,d0	| [$05fd: LD      A,(nb_to_kill_before_stage_completed_43BA)]
	move.b	d0,d1                           	| [$0600: LD      B,A]
	tst.b	d0                               	| [$0601: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$0602: RET     Z] [...]
0:
l_0603:
	move.b	d3,(a0)+                         	| [$0603: LD      (HL),D]
	                           	| [$0604: INC     L]
	move.b	d4,(a0)                         	| [$0605: LD      (HL),E]
	addq.w	#3,a0                           	| [$0606: INC     L]
	subq.b	#1,d1                           	| [$0609: DEC     B]
	jne	l_0603                             	| [$060a: JP      NZ,$0603]
	rts                                    	| [$060d: RET]

l_0610:
	lea	game_rom+0x063A,a0                      	| [$0610: LD      HL,$063A]
	move.b	current_stage_43B8,d0           	| [$0613: LD      A,(current_stage_43B8)]
	ror.b	#1,d0                            	| [$0616: RRCA]
	and.w	#0x0F,d0                         	| [$0617: AND     $0F]
	add.w	d0,a0                            	| [$0619: ADD     A,L]
	                           	| [$061a: LD      L,A]
	                                    	| [$061b: NOP]
	                                    	| [$061c: NOP]
	                                    	| [$061d: NOP]
	move.b	(a0),d6                         	| [$061e: LD      L,(HL)]
	move.b	#0x15,d5                        	| [$061f: LD      H,$15] rom $15xx
	bsr		load_rom_in_a0_from_d5d6
	lea	unknown_4B72,a1                	| [$0621: LD      DE,unknown_4B72]
	move.b	nb_to_kill_before_stage_completed_43BA,d0	| [$0624: LD      A,(nb_to_kill_before_stage_completed_43BA)]
	move.b	d0,d1                           	| [$0627: LD      B,A]
												| [$0628: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$0629: RET     Z] [...]
0:
l_062a:
	move.b	(a0)+,d0                         	| [$062a: LD      A,(HL)]
	move.b	d0,(a1)+                         	| [$062b: LD      (DE),A]
	                           	| [$062c: INC     HL]
	                           	| [$062d: INC     DE]
	move.b	(a0)+,d0                         	| [$062e: LD      A,(HL)]
	move.b	d0,(a1)                         	| [$062f: LD      (DE),A]
	                           	| [$0630: INC     HL]
	addq.w	#3,a1                           	| [$0631: INC     DE] * 3
	subq.b	#1,d1                           	| [$0634: DEC     B]
	jne	l_062a                             	| [$0635: JP      NZ,$062A]
	rts                                    	| [$0638: RET]

l_0650:
	lea	game_rom+0x1520,a0                      	| [$0650: LD      HL,$1520]
	move.b	current_stage_43B8,d0           	| [$0653: LD      A,(current_stage_43B8)]
	and.w	#0x0F,d0                         	| [$0656: AND     $0F]
	rol.b	#1,d0                            	| [$0658: RLCA]
	add.w	d0,a0                            	| [$0659: ADD     A,L]
	                           	| [$065a: LD      L,A]
	move.b	(a0)+,d3                         	| [$065b: LD      D,(HL)]
											| [$065c: INC     HL]
	move.b	(a0),d4                         	| [$065d: LD      E,(HL)]
	lea	unknown_4B50,a0                	| [$065e: LD      HL,unknown_4B50]
	move.b	nb_to_kill_before_stage_completed_43BA,d0	| [$0661: LD      A,(nb_to_kill_before_stage_completed_43BA)]
	move.b	d0,d1                           	| [$0664: LD      B,A]
												| [$0665: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$0666: RET     Z] [...]
0:
l_0667:
	move.b	d3,(a0)+                         	| [$0667: LD      (HL),D]
	                           	| [$0668: INC     L]
	move.b	d4,(a0)+                         	| [$0669: LD      (HL),E]
	                           	| [$066a: INC     L]
	subq.b	#1,d1                           	| [$066b: DEC     B]
	jne	l_0667                             	| [$066c: JP      NZ,$0667]
	rts                                    	| [$066f: RET]

* seems never referenced or called
	lea	unknown_43B1,a0                	| [$0670: LD      HL,unknown_43B1]
	move.b	(a0),d1                         	| [$0673: LD      B,(HL)]
	lea	unknown_43B9,a0                        	| [$0674: LD      L,$B9]
	move.b	(a0),d2                         	| [$0676: LD      C,(HL)]
	move.b	d2,d0                           	| [$0677: LD      A,C]
	sub.b	d1,d0                            	| [$0678: SUB     B]
	move.b	d0,(a0)                         	| [$0679: LD      (HL),A]

update_scrolling_067A:
	lea	current_scroll_value_43B9,a0   	| [$067a: LD      HL,current_scroll_value_43B9]
	move.b	(a0),d0                         	| [$067d: LD      A,(HL)]
	subq.b	#1,(a0)                         	| [$067e: DEC     (HL)] decrease scroll value
	jbsr	osd_set_scroll_value                       	| [$067f: LD      ($5800),A] 58xx scroll register, change scroll value
	and.b	#0x07,d0                         	| [$0682: AND     $07]
	beq.b	0f                               	| [...]
	rts                                    	| [$0684: RET     NZ] [...]
0:
* if 8 pixels were scrolled, then feed scroll
* by updating a character row
	move.w	#0x20,d1
	move.b	#0x47,d2                      	| [$0685: LD      BC,$2047] 0x20 in B for next char, 0x47 in C for 0x4700 limit
	move.w	#0x4B21,d7                	| [$0688: LD      DE,unknown_4B21] screen address (background tiles)
	move.b	(a0),d0                         	| [$068b: LD      A,(HL)] scroll value
	ror.b	#3,d0                            	| [$068c: RRCA] * 3
	and.b	#0x1F,d0                         	| [$068f: AND     $1F] masked (useless as 256/8 = 32...)
	add.b	d4,d0                            	| [$0691: ADD     A,E]
	move.b	d0,d4                           	| [$0692: LD      E,A]
	lea	unknown_43B2,a0                        	| [$0693: LD      L,$B2]
	move.b	(a0)+,d0                         	| [$0695: LD      A,(HL)]
                           	| [$0696: INC     L]
	move.b	(a0),d6                         	| [$0697: LD      L,(HL)]
	move.b	d0,d5                           	| [$0698: LD      H,A]
l_0699:
	move.b	(a0)+,d0                         	| [$0699: LD      A,(HL)]
	jbsr	osd_w_videoram                         	| [$069a: LD      (DE),A]
	                           	| [$069b: INC     L]
	                           	| [$069c: LD      A,E]
	sub.b	d1,d7                            	| [$069d: SUB     B]
	                           	| [$069e: LD      E,A]
	jcc	l_0699                             	| [$069f: JP      NC,$0699]
	sub.w	#0x100,d7                           	| [$06a2: DEC     D]
	move.w	d7,d0                           	| [$06a3: LD      A,D]
	lsr.w	#8,d0
	cmp.b	d2,d0                            	| [$06a4: CP      C]
	jne	l_0699                             	| [$06a5: JP      NZ,$0699]
	move.b	d6,d0                           	| [$06a8: LD      A,L]
	move.b	d0,unknown_43B3                 	| [$06a9: LD      (unknown_43B3),A]
	rts                                    	| [$06ac: RET]


l_06b0:
	lea	unknown_43AB,a0                	| [$06b0: LD      HL,unknown_43AB]
	move.b	current_scroll_value_43B9,d0    	| [$06b3: LD      A,(current_scroll_value_43B9)]
	move.b	d0,d2                           	| [$06b6: LD      C,A]
	cmp.b	(a0),d0                          	| [$06b7: CP      (HL)]
	beq.b	0f                               	| [...]
	rts                                    	| [$06b8: RET     NZ] [...]
0:
	move.b	(a0)+,d0                         	| [$06b9: LD      A,(HL)]
	                           	| [$06ba: INC     L]
	add.b	(a0),d0                          	| [$06bb: ADD     A,(HL)]
	                           	| [$06bc: DEC     L]
	move.b	d0,-(a0)                         	| [$06bd: LD      (HL),A]
	addq.w	#2,a0                           	| [$06be: INC     L]
 	addq.b	#1,(a0)                         	| [$06c0: INC     (HL)]
	move.b	(a0)+,d1                         	| [$06c1: LD      B,(HL)]
	                           	| [$06c2: INC     L]
 	addq.b	#1,(a0)                         	| [$06c3: INC     (HL)]
	move.b	(a0),d0                         	| [$06c4: LD      A,(HL)]
	lea	game_rom+0x1E20,a0                      	| [$06c5: LD      HL,$1E20]
	and.w	#0x1F,d0                         	| [$06c8: AND     $1F]
	add.w	d0,a0                            	| [$06ca: ADD     A,L]
											| [$06cb: LD      L,A]
	move.b	(a0),d3                         	| [$06cc: LD      D,(HL)]
	add.w	#0x20,a0                         	| [$06cd: ADD     $20]
	                           	| [$06cf: LD      L,A]
	move.b	(a0),d4                         	| [$06d0: LD      E,(HL)]
	move.b	d2,d0                           	| [$06d1: LD      A,C]
	ror.b	#3,d0                            	| [$06d2: RRCA] * 3
	and.b	#0x1E,d0                         	| [$06d5: AND     $1E]
	add.b	d4,d0                            	| [$06d7: ADD     A,E]
	addq.b	#0x02,d0                        	| [$06d8: ADD     $02]
	move.b	d0,d4                           	| [$06da: LD      E,A]
	lea	game_rom+0x1E60,a0                      	| [$06db: LD      HL,$1E60]
	move.b	d1,d0                           	| [$06de: LD      A,B]
	and.b	#0x1F,d0                         	| [$06df: AND     $1F]
	add.w	d0,a0                            	| [$06e1: ADD     A,L]
	                           	| [$06e2: LD      L,A]
	moveq	#0,d6
	move.b	(a0),d6                         	| [$06e3: LD      L,(HL)]
	lea	game_rom+0x1E00,a0
	add.w	d6,a0
	jbsr	l_07dc                            	| [$06e4: CALL    $07DC]
	rts                                    	| [$06e7: RET]
l_06e8:
	lea	game_rom+0x1800,a0                      	| [$06e8: LD      HL,$1800]
	move.b	#0x01,d2                        	| [$06eb: LD      C,$01]
	jra	l_01d0                             	| [$06ed: JP      $01D0]

l_06f0:
	jbsr	update_scrolling_067A             	| [$06f0: CALL    update_scrolling_067A]
	jbsr	l_2040                            	| [$06f3: CALL    $2040]
	jra	l_06b0                             	| [$06f6: JP      $06B0]


l_0700:
	lea	unknown_43C0,a4                	| [$0700: LD      BC,unknown_43C0]
	lea	unknown_43E0,a1                	| [$0703: LD      DE,unknown_43E0]
l_0706:
	jbsr	l_0718                            	| [$0706: CALL    $0718]
	move.b	d2,d0                           	| [$0709: LD      A,C]
	addq.b	#0x04,d0                        	| [$070a: ADD     $04]
	move.b	d0,d2                           	| [$070c: LD      C,A]
	add.b	#0x20,d0                         	| [$070d: ADD     $20]
	move.b	d0,d4                           	| [$070f: LD      E,A]
	move.b	d1,d3                           	| [$0710: LD      D,B]
	cmp.b	#0xEC,d0                         	| [$0711: CP      $EC]
	jne	l_0706                             	| [$0713: JP      NZ,$0706]
	rts                                    	| [$0716: RET]
	rts                                    	| [$0717: RET]
l_0718:
	jbsr	l_0720                            	| [$0718: CALL    $0720]
	jra	l_0740                             	| [$071b: JP      $0740]


l_0720:
	move.b	(a4),d0                         	| [$0720: LD      A,(BC)]
	move.b	d0,d5                           	| [$0721: LD      H,A]
	and.b	#0x10,d0                         	| [$0722: AND     $10]
	bne.b	0f                               	| [...]
	rts                                    	| [$0724: RET     Z] [...]
0:
	move.b	d5,d0                           	| [$0725: LD      A,H]
	and.b	#0xEF,d0                         	| [$0726: AND     $EF]
	move.b	d0,(a4)                         	| [$0728: LD      (BC),A]
	rol.b	#3,d0                            	| [$0729: RLCA] A rotated 3 times * 3
* select one address out of 8 in table from $738
* some slots are illegal and aren't reached (else game reboots)
* allowed states are 0,1,3,4 only
	and.w	#0x07,d0                         	| [$072c: AND     $07]
	                         	| [$072e: ADD     $38] table from $738
	                        	| [$0730: LD      L,A]
	                        	| [$0731: LD      H,$07]
	                        	| [$0733: LD      L,(HL)]
	add.w	d0,d0
	add.w	d0,d0
	lea		table_0738(pc),a0
	move.l	(a0,d0.w),d0
	.ifndef		RELEASE
	bpl.b	0f
	ILLEGAL
0:
	.endif
	move.l	d0,a0
* jump from jump table to $07xx
	jra	(a0)                               	| [$0734: JP      (HL)]


table_0738:
	.long	l_0763       | $763
	.long	l_0779       | $779
	.long	-1          |
	.long	l_079E       | $79E
	.long	l_07BE       | $7BE
	.long	-1       
	.long	-1       
	.long	-1       

* looks like random? not sure
l_0740:
	move.b	(a4),d0                         	| [$0740: LD      A,(BC)]
	move.b	d0,d5                           	| [$0741: LD      H,A]
	and.b	#0x08,d0                         	| [$0742: AND     $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$0744: RET     Z] [...]
0:
	move.b	d5,d0                           	| [$0745: LD      A,H]
	and.b	#0x07,d0                         	| [$0746: AND     $07]
	move.b	d0,d5                           	| [$0748: LD      H,A]
	ror.b	#3,d0                            	| [$0749: RRCA] * 3
	or.b	d5,d0                             	| [$074c: OR      H]
	or.b	#0x18,d0                          	| [$074d: OR      $18]
	move.b	d0,(a4)+                         	| [$074f: LD      (BC),A]
	                           	| [$0750: INC     BC]
	move.b	d5,d0                           	| [$0751: LD      A,H]
	                         	| [$0752: ADD     $5B] table from $75B
* some slots are illegal and aren't reached (else game reboots)
* allowed states are 0,1,3,4 only
	and.w	#0xFF,d0
	add.w	d0,d0
	add.w	d0,d0
	
	                       	| [$0754: LD      L,A]
	                       	| [$0755: LD      H,$07]
	move.w	(a0,d0.w),a0                         	| [$0757: LD      L,(HL)]
* jump from jump table to $07xx
	jra	(a0)                               	| [$0758: JP      (HL)]

table_075B:
	.long	l_076D      | $76D
	.long	l_0788      | $788
	.long	0xFF        |
	.long	l_07AA      | $7AA
	.long	l_07D2      | $7D2
	.long	0XFF      
	.long	0XFF      
	.long	0XFF      

l_0763:
	exg	d3,a0                              	| [$0763: EX      DE,HL]
	move.b	(a0),d3                         	| [$0764: LD      D,(HL)]
	                           	| [$0765: INC     HL]
	move.b	(1,a0),d4                         	| [$0766: LD      E,(HL)]
	                           	| [$0767: DEC     HL]
	LOAD_D3D4_FROM_D3_16
	move.w	d3,d7
	clr.b	d0                               	| [$0768: XOR     A]
	jbsr	osd_w_videoram                         	| [$0769: LD      (DE),A]
	exg	d3,a0                              	| [$076a: EX      DE,HL]
	rts                                    	| [$076b: RET]

l_076D:
	exg	a1,a0                              	| [$076d: EX      DE,HL]
	addq.w	#2,a0                           	| [$076e: INC     HL] * 2
	move.b	(a0),d3                         	| [$0770: LD      D,(HL)]
	addq.w	#1,a0                           	| [$0771: INC     HL]
	move.b	(a0),d4                         	| [$0772: LD      E,(HL)]
	move.b	(a4),d0                         	| [$0773: LD      A,(BC)]
	move.b	d0,(a1)                         	| [$0774: LD      (DE),A]
	subq.w	#1,a4                           	| [$0775: DEC     BC]
	rts                                    	| [$0776: RET]
	

	move.b	d0,(a1)                         	| [$0777: LD      (DE),A]
	addq.w	#1,a0                           	| [$0778: INC     HL]
l_0779:
	exg	d3,a0                              	| [$0779: EX      DE,HL]
	move.b	(a0),d3                         	| [$077a: LD      D,(HL)]
	                           	| [$077b: INC     HL]
	move.b	(1,a0),d4                         	| [$077c: LD      E,(HL)]
	                           	| [$077d: DEC     HL]
	LOAD_D3_16_FROM_D3D4
	clr.b	d0                               	| [$077e: XOR     A]
	exg		d3,d7                         	| [$077f: LD      (DE),A]
	jbsr	osd_w_videoram
	jbsr	SubtractOneRow_0217               	| [$0780: CALL    SubtractOneRow_0217]
	clr.b	d0                               	| [$0783: XOR     A]
	move.b	d0,(a1)                         	| [$0784: LD      (DE),A]
	exg	d3,a0                              	| [$0785: EX      DE,HL]
	rts                                    	| [$0786: RET]
	

	addq.w	#1,a0                           	| [$0787: INC     HL]
l_0788:
	exg	d3,a0                              	| [$0788: EX      DE,HL]
	addq.w	#2,a0                           	| [$0789: INC     HL] * 2
	move.b	(a0),d3                         	| [$078b: LD      D,(HL)]
	addq.w	#1,a0                           	| [$078c: INC     HL]
	move.b	(a0),d4                         	| [$078d: LD      E,(HL)]
	move.b	(a4),d0                         	| [$078e: LD      A,(BC)]
	move.b	d0,d6                           	| [$078f: LD      L,A]
	move.b	#0x14,d5                        	| [$0790: LD      H,$14]
	move.b	(a0),d0                         	| [$0792: LD      A,(HL)]
	move.b	d0,(a1)                         	| [$0793: LD      (DE),A]
	addq.w	#1,a0                           	| [$0794: INC     HL]
	jbsr	SubtractOneRow_0217               	| [$0795: CALL    SubtractOneRow_0217]
	move.b	(a0),d0                         	| [$0798: LD      A,(HL)]
	move.b	d0,(a1)                         	| [$0799: LD      (DE),A]
	subq.w	#1,a4                           	| [$079a: DEC     BC]
	rts                                    	| [$079b: RET]

	exg	a1,a0                              	| [$079d: EX      DE,HL]
l_079E:
	exg	d3,a0                              	| [$079e: EX      DE,HL]
	move.b	(a0),d3                         	| [$079f: LD      D,(HL)]
	                           	| [$07a0: INC     HL]
	move.b	(1,a0),d4                         	| [$07a1: LD      E,(HL)]
	LOAD_D3D4_FROM_D3_16
	                           	| [$07a2: DEC     HL]
	clr.b	d0                               	| [$07a3: XOR     A]
	move.w	d3,d7
	jbsr	osd_w_videoram                         	| [$07a4: LD      (DE),A]
	addq.w	#1,d7                           	| [$07a5: INC     DE]
	move.b	d0,(a1)                         	| [$07a6: LD      (DE),A]
	exg	d3,a0                              	| [$07a7: EX      DE,HL]
	rts                                    	| [$07a8: RET]

l_07AA:
	exg	d3,a0                              	| [$07aa: EX      DE,HL]
	addq.w	#2,a0                           	| [$07ab: INC     HL] * 2
	move.b	(a0)+,d3                         	| [$07ad: LD      D,(HL)]
	                           	| [$07ae: INC     HL]
	move.b	(a0),d4                         	| [$07af: LD      E,(HL)]
	LOAD_D3D4_FROM_D3_16
	move.b	(a4),d0                         	| [$07b0: LD      A,(BC)]
	move.b	d0,d6                           	| [$07b1: LD      L,A]
	move.b	#0x14,d5                        	| [$07b2: LD      H,$14]
	move.b	(a0),d0                         	| [$07b4: LD      A,(HL)]
	jbsr	osd_w_videoram                         	| [$07b5: LD      (DE),A]
	addq.w	#1,a0                           	| [$07b6: INC     HL]
	addq.w	#1,d7                           	| [$07b7: INC     DE]
	move.b	(a0),d0                         	| [$07b8: LD      A,(HL)]
	jbsr	osd_w_videoram                         	| [$07b9: LD      (DE),A]
	subq.w	#1,a4                           	| [$07ba: DEC     BC]
	rts                                    	| [$07bb: RET]
	
	
	addq.w	#1,a0                           	| [$07bc: INC     HL]
	addq.w	#1,a1                           	| [$07bd: INC     DE]
	exg	a1,a0                              	| [$07be: EX      DE,HL]
	move.b	(a0),d3                         	| [$07bf: LD      D,(HL)]
	addq.w	#1,a0                           	| [$07c0: INC     HL]
	move.b	(a0),d4                         	| [$07c1: LD      E,(HL)]
	subq.w	#1,a0                           	| [$07c2: DEC     HL]
	clr.b	d0                               	| [$07c3: XOR     A]
	move.b	d0,(a1)                         	| [$07c4: LD      (DE),A]
	addq.w	#1,a1                           	| [$07c5: INC     DE]
	move.b	d0,(a1)                         	| [$07c6: LD      (DE),A]
	jbsr	SubtractOneRow_0217               	| [$07c7: CALL    SubtractOneRow_0217]
	clr.b	d0                               	| [$07ca: XOR     A]
	move.b	d0,(a1)                         	| [$07cb: LD      (DE),A]
	subq.w	#1,a1                           	| [$07cc: DEC     DE]
	move.b	d0,(a1)                         	| [$07cd: LD      (DE),A]
	exg	a1,a0                              	| [$07ce: EX      DE,HL]
	rts                                    	| [$07cf: RET]


l_07D2: 
	exg	d3,a0
	addq.w	#2,a0                           	| [$07d3: INC     HL] * 2
	move.b	(a0),d3                         	| [$07d5: LD      D,(HL)]
	addq.w	#1,a0                           	| [$07d6: INC     HL]
	move.b	(a0),d4                         	| [$07d7: LD      E,(HL)]
	move.b	(a4),d0                         	| [$07d8: LD      A,(BC)]
	move.b	d0,d6                           	| [$07d9: LD      L,A]
	move.b	#0x14,d5                        	| [$07da: LD      H,$14]
l_07dc:
	move.b	(a0),d0                         	| [$07dc: LD      A,(HL)]
	move.b	d0,(a1)                         	| [$07dd: LD      (DE),A]
	addq.w	#1,a0                           	| [$07de: INC     HL]
	addq.w	#1,a1                           	| [$07df: INC     DE]
	move.b	(a0),d0                         	| [$07e0: LD      A,(HL)]
	move.b	d0,(a1)                         	| [$07e1: LD      (DE),A]
	addq.w	#1,a0                           	| [$07e2: INC     HL]
	subq.w	#1,a1                           	| [$07e3: DEC     DE]
	jbsr	SubtractOneRow_0217               	| [$07e4: CALL    SubtractOneRow_0217]
	move.b	(a0),d0                         	| [$07e7: LD      A,(HL)]
	move.b	d0,(a1)                         	| [$07e8: LD      (DE),A]
	addq.w	#1,a0                           	| [$07e9: INC     HL]
	addq.w	#1,a1                           	| [$07ea: INC     DE]
	move.b	(a0),d0                         	| [$07eb: LD      A,(HL)]
	move.b	d0,(a1)                         	| [$07ec: LD      (DE),A]
	subq.w	#1,a4                           	| [$07ed: DEC     BC]
	rts                                    	| [$07ee: RET]


l_07f0:
	move.b	current_scroll_value_43B9,d0    	| [$07f0: LD      A,(current_scroll_value_43B9)]
	jbsr	osd_set_scroll_value                       	| [$07f3: LD      ($5800),A] 58xx scroll register
	jbsr	l_0380                            	| [$07f6: CALL    $0380]
	jra	set_proper_stage_palette_041E      	| [$07f9: JP      set_proper_stage_palette_041E]



game_playing_0800:
	lea	jump_table_0814,a0             	| [$0800: LD      HL,jump_table_0814]
	move.b	current_stage_43B8,d0           	| [$0803: LD      A,(current_stage_43B8)]
	rol.b	#1,d0                            	| [$0806: RLCA]
	and.w	#0x1E,d0                         	| [$0807: AND     $1E]
	
	add.w	d0,d0
	move.l	(a0,d0.w),a0
	                 	| [$0809: ADD     A,L]
	                	| [$080a: LD      L,A]
	                	| [$080b: LD      A,(HL)]
	                	| [$080c: INC     L]
   
	                       	| [$080d: LD      L,(HL)]
	                       	| [$080e: LD      H,A]
	jra	(a0)                               	| [$080f: JP      (HL)]

jump_table_0814:
	.long	transition_to_birds_level_0834
	.long	birds_level_2000
	.long	transition_to_birds_level_0834
	.long	birds_level_2000
	.long	transition_to_vultures_and_last_level_2230
	.long	vultures_level_3400
	.long	transition_to_vultures_and_last_level_2230
	.long	vultures_level_3400
	.long	transition_to_vultures_and_last_level_2230
	.long	mothership_arrives_22B4
	.long	mothership_level_22CA
	.long	birds_level_2000
	* seems difficult to reach!
	.long	l_224c
	.long	l_224c
	.long	l_224c
	.long	l_224c

* scrolls & shows next birds level
transition_to_birds_level_0834:
	jbsr	l_06f0                            	| [$0834: CALL    $06F0]
	lea	unknown_43B4,a0                	| [$0837: LD      HL,unknown_43B4]
	subq.b	#1,(a0)                         	| [$083a: DEC     (HL)]
	move.b	(a0),d0                         	| [$083b: LD      A,(HL)]
	cmp.b	#0x15,d0                         	| [$083c: CP      $15]
	bcs.b	0f                               	| [...]
	rts                                    	| [$083e: RET     NC] [...]
0:
	jbsr	l_085a                            	| [$083f: CALL    $085A]
	jbsr	l_05fa                            	| [$0842: CALL    $05FA]
	jbsr	l_0a50                            	| [$0845: CALL    $0A50]
l_0848:
	lea	unknown_43B4,a0                	| [$0848: LD      HL,unknown_43B4]
	move.b	(a0),d0                         	| [$084b: LD      A,(HL)]
	                               	| [$084c: AND     A]
	beq.b	0f                               	| [...]
	rts                                    	| [$084d: RET     NZ] [...]
0:
	lea	unknown_43B8,a0                        	| [$084e: LD      L,$B8]
	addq.b	#1,(a0)                         	| [$0850: INC     (HL)] next stage
	lea	unknown_43A4,a0                        	| [$0851: LD      L,$A4]
	move.b	#0x02,(a0)                      	| [$0853: LD      (HL),$02]
	rts                                    	| [$0855: RET]

l_085a:
	lea	game_rom+0x086C,a1                      	| [$085a: LD      DE,$086C]
	cmp.b	#0x11,d0                         	| [$085d: CP      $11]
	bcs.b	0f                               	| [...]
	rts                                    	| [$085f: RET     NC] [...]
0:
	move.b	#0x6D,d4                        	| [$0860: LD      E,$6D]
	cmp.b	#0x0D,d0                         	| [$0862: CP      $0D]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0864: RET     NC] [...]
0:
	move.b	#0x6E,d4                        	| [$0865: LD      E,$6E]
	cmp.b	#0x09,d0                         	| [$0867: CP      $09]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0869: RET     NC] [...]
0:
	move.b	#0x6F,d4                        	| [$086a: LD      E,$6F]
	cmp.b	#0x05,d0                         	| [$086c: CP      $05]
	bcs.b	0f                               	| [...]
	rts                                    	| [$086e: RET     NC] [...]
0:
	move.b	#0x68,d4                        	| [$086f: LD      E,$68]
	rts                                    	| [$0871: RET]


l_0876:
	jbsr	l_0700                            	| [$0876: CALL    $0700]
	jbsr	l_0886                            	| [$0879: CALL    $0886]
	jbsr	l_08a0                            	| [$087c: CALL    $08A0]
	jbsr	l_09a0                            	| [$087f: CALL    $09A0]
	jbsr	l_097a                            	| [$0882: CALL    $097A]
	rts                                    	| [$0885: RET]

* copies byte pairs 2 bytes below
l_0886:
	lea	unknown_43EB,a0                	| [$0886: LD      HL,unknown_43EB]
	move.b	#0x03,d1                        	| [$0889: LD      B,$03]
l_088b:
	move.b	(a0),d3                         	| [$088b: LD      D,(HL)]
	subq.w	#1,a0                           	| [$088c: DEC     HL]
	move.b	(a0),d4                         	| [$088d: LD      E,(HL)]
	subq.w	#1,a0                           	| [$088e: DEC     HL]
	move.b	d3,(a0)                         	| [$088f: LD      (HL),D]
	subq.w	#1,a0                           	| [$0890: DEC     HL]
	move.b	d4,(a0)                         	| [$0891: LD      (HL),E]
	subq.w	#1,a0                           	| [$0892: DEC     HL]
	subq.b	#1,d1                           	| [$0893: DEC     B]
	jne	l_088b                             	| [$0894: JP      NZ,$088B]
	rts                                    	| [$0897: RET]
l_08a0:
	jbsr	l_08c4                            	| [$08a0: CALL    $08C4]
	lea	player_shot_1_structure_43C4,a0	| [$08a3: LD      HL,player_shot_1_structure_43C4]
	jbsr	l_0930                            	| [$08a6: CALL    $0930]
	move.b	current_stage_43B8,d0           	| [$08a9: LD      A,(current_stage_43B8)]
	and.b	#0x0F,d0                         	| [$08ac: AND     $0F]
	cmp.b	#0x03,d0                         	| [$08ae: CP      $03]
	beq.b	0f                               	| [...]
	rts                                    	| [$08b0: RET     NZ] nop to get 2 bullets all the time [...]
0:
	lea	player_shot_2_structure_43C8,a0	| [$08b1: LD      HL,player_shot_2_structure_43C8]
	jbsr	l_0930                            	| [$08b4: CALL    $0930]
	rts                                    	| [$08b7: RET]

l_08c4:
	lea	unknown_43C0,a0                	| [$08c4: LD      HL,unknown_43C0]
	move.b	(a0),d0                         	| [$08c7: LD      A,(HL)]
	and.b	#0x08,d0                         	| [$08c8: AND     $08]
	jeq	l_0aa0                             	| [$08ca: JP      Z,$0AA0]
	lea	unknown_43A6,a0                        	| [$08cd: LD      L,$A6]
	move.b	(a0),d0                         	| [$08cf: LD      A,(HL)]
	                               	| [$08d0: AND     A]
	jne	l_08ea                             	| [$08d1: JP      NZ,$08EA]
	move.b	#0x80,d1                        	| [$08d4: LD      B,$80]
	jbsr	CheckInputBits                    	| [$08d6: CALL    CheckInputBits]
	jeq	l_08eb                             	| [$08d9: JP      Z,$08EB]
	lea	unknown_4362,a0                        	| [$08dc: LD      L,$62]
	move.b	#0x40,(a0)                      	| [$08de: LD      (HL),$40]
	lea	unknown_43C0,a0                        	| [$08e0: LD      L,$C0]
	move.b	(a0),d0                         	| [$08e2: LD      A,(HL)]
	and.b	#0xF7,d0                         	| [$08e3: AND     $F7]
	move.b	d0,(a0)                         	| [$08e5: LD      (HL),A]
	lea	unknown_43A6,a0                        	| [$08e6: LD      L,$A6]
	move.b	#0xFF,(a0)                      	| [$08e8: LD      (HL),$FF]
l_08ea:
	subq.b	#1,(a0)                         	| [$08ea: DEC     (HL)]
l_08eb:
	lea	unknown_43C2,a0                        	| [$08eb: LD      L,$C2]
	jbsr	read_controls_to_move_ship_0900   	| [$08ed: CALL    read_controls_to_move_ship_0900]
	lea	game_rom+0x1600,a4                      	| [$08f0: LD      BC,$1600]
	jra	l_0926                             	| [$08f3: JP      $0926]

read_controls_to_move_ship_0900:
	move.b	IN0Current,d0                   	| [$0900: LD      A,(IN0Current)]
	not.b	d0                               	| [$0903: CPL]
	and.b	#0x60,d0                         	| [$0904: AND     $60]
	bne.b	0f                               	| [...]
	rts                                    	| [$0906: RET     Z] [...]
0:
	and.b	#0x40,d0                         	| [$0907: AND     $40]
	jeq	l_0917                             	| [$0909: JP      Z,$0917]
	move.b	(a0),d0                         	| [$090c: LD      A,(HL)]
	cmp.b	#0x0D,d0                         	| [$090d: CP      $0D]
	bcc.b	0f                               	| [...]
	rts                                    	| [$090f: RET     C] [...]
0:
	subq.b	#1,(a0)                         	| [$0910: DEC     (HL)]
	st.b	d0                                	| [$0911: LD      A,$FF]
	move.b	d0,unknown_4360                 	| [$0913: LD      (unknown_4360),A]
	rts                                    	| [$0916: RET]
l_0917:
	move.b	(a0),d0                         	| [$0917: LD      A,(HL)]
	cmp.b	#0xC0,d0                         	| [$0918: CP      $C0]
	bcs.b	0f                               	| [...]
	rts                                    	| [$091a: RET     NC] [...]
0:
	addq.b	#1,(a0)                         	| [$091b: INC     (HL)]
	st.b	d0                                	| [$091c: LD      A,$FF]
	move.b	d0,unknown_4360                 	| [$091e: LD      (unknown_4360),A]
	rts                                    	| [$0921: RET]

l_0926:
	move.b	(a0),d0                         	| [$0926: LD      A,(HL)]
	and.b	#0x07,d0                         	| [$0927: AND     $07]
	add.b	d2,d0                            	| [$0929: ADD     A,C]
	move.b	d0,d2                           	| [$092a: LD      C,A]
	move.b	(a4),d0                         	| [$092b: LD      A,(BC)]
	subq.w	#1,a0                           	| [$092c: DEC     L]
	move.b	d0,(a0)                         	| [$092d: LD      (HL),A]
	rts                                    	| [$092e: RET]
l_0930:
	move.b	(a0),d0                         	| [$0930: LD      A,(HL)]
	and.b	#0x08,d0                         	| [$0931: AND     $08]
	jne	l_0964                             	| [$0933: JP      NZ,$0964]
	exg	a1,a0                              	| [$0936: EX      DE,HL]
	move.b	#0x10,d1                        	| [$0937: LD      B,$10]
	jbsr	CheckInputBits                    	| [$0939: CALL    CheckInputBits]
	bne.b	0f                               	| [...]
	rts                                    	| [$093c: RET     Z] [...]
0:
	move.b	(a0),d0                         	| [$093d: LD      A,(HL)]
	and.b	#0xEF,d0                         	| [$093e: AND     $EF]
	move.b	d0,(a0)                         	| [$0940: LD      (HL),A]
	move.b	(a1),d0                         	| [$0941: LD      A,(DE)]
	or.b	#0x08,d0                          	| [$0942: OR      $08]
	move.b	d0,(a1)                         	| [$0944: LD      (DE),A]
	addq.w	#2,a1                           	| [$0945: INC     DE] * 2
	move.b	player_ship_x_43C2,d0           	| [$0947: LD      A,(player_ship_x_43C2)]
	addq.b	#0x04,d0                        	| [$094a: ADD     $04]
	move.b	d0,(a1)                         	| [$094c: LD      (DE),A]
	addq.w	#1,a1                           	| [$094d: INC     DE]
	move.b	player_ship_y_43C3,d0           	| [$094e: LD      A,(player_ship_y_43C3)]
	sub.b	#0x08,d0                         	| [$0951: SUB     $08]
	move.b	d0,(a1)                         	| [$0953: LD      (DE),A]
	subq.w	#1,a1                           	| [$0954: DEC     DE]
	exg	a1,a0                              	| [$0955: EX      DE,HL]
	lea	game_rom+0x1620,a4                      	| [$0956: LD      BC,$1620]
	jbsr	l_0926                            	| [$0959: CALL    $0926]
	move.b	#0x30,d0                        	| [$095c: LD      A,$30]
	move.b	d0,unknown_4361                 	| [$095e: LD      (unknown_4361),A]
	rts                                    	| [$0961: RET]

l_0964:
	addq.w	#3,a0                           	| [$0964: INC     L]
	move.b	(a0),d0                         	| [$0967: LD      A,(HL)]
	sub.b	#0x08,d0                         	| [$0968: SUB     $08]
	move.b	d0,(a0)                         	| [$096a: LD      (HL),A]
	cmp.b	#0x1F,d0                         	| [$096b: CP      $1F]
	bcs.b	0f                               	| [...]
	rts                                    	| [$096d: RET     NC] [...]
0:
l_096e:
	subq.w	#3,a0                           	| [$096e: DEC     L]
 	move.b	(a0),d0                         	| [$0971: LD      A,(HL)]
	and.b	#0xF7,d0                         	| [$0972: AND     $F7]
	move.b	d0,(a0)                         	| [$0974: LD      (HL),A]
	rts                                    	| [$0975: RET]

	move.b	(a0),d0                         	| [$0978: LD      A,(HL)]
	and.b	#0x3A,d0                         	| [$0979: AND     $3A]
	jne	unknown_4743                       	| [$097b: JP      NZ,unknown_4743]
	and.b	#0x07,d0                         	| [$097e: AND     $07]
	rol.b	#1,d0                            	| [$0980: RLCA]
	lea	game_rom+0x0B38,a0                      	| [$0981: LD      HL,$0B38]
	add.b	d6,d0                            	| [$0984: ADD     A,L]
	move.b	d0,d6                           	| [$0985: LD      L,A]
	move.b	d1,d0                           	| [$0986: LD      A,B]
	sub.b	(a0),d0                          	| [$0987: SUB     (HL)]
	move.b	d0,unknown_439E                 	| [$0988: LD      (unknown_439E),A]
	addq.w	#1,a0                           	| [$098b: INC     HL]
	move.b	d1,d0                           	| [$098c: LD      A,B]
	add.b	(a0),d0                          	| [$098d: ADD     A,(HL)]
	move.b	d0,unknown_439F                 	| [$098e: LD      (unknown_439F),A]
	rts                                    	| [$0991: RET]
	move.b	d0,unknown_439F                 	| [$0992: LD      (unknown_439F),A]
	rts                                    	| [$0995: RET]

l_09a0:
	lea	player_ship_x_43C2,a4          	| [$09a0: LD      BC,player_ship_x_43C2]
	lea	screen_address_43E2,a1                	| [$09a3: LD      DE,screen_address_43E2]
l_09a6:
	jbsr	l_09ba                            	| [$09a6: CALL    $09BA]
	addq.w	#3,a4                           	| [$09a9: INC     BC] * 3
	addq.w	#3,a1                           	| [$09ac: INC     DE] * 3
	move.b	d2,d0                           	| [$09af: LD      A,C]
	cmp.b	#0xCE,d0                         	| [$09b0: CP      $CE]
	jne	l_09a6                             	| [$09b2: JP      NZ,$09A6]
	rts                                    	| [$09b5: RET]

l_09ba:
	lea	game_rom+0x0A00,a0                      	| [$09ba: LD      HL,$0A00]
	moveq	#0,d0
	move.b	(a4),d0                         	| [$09bd: LD      A,(BC)]
	and.b	#0xF8,d0                         	| [$09be: AND     $F8]
	ror.b	#2,d0                            	| [$09c0: RRCA] * 2
	add.w	d0,a0		| okay as HL is 0xA00
	                            	| [$09c2: ADD     A,L]
	                           	| [$09c3: LD      L,A]
	move.b	(a0),d0                         	| [$09c4: LD      A,(HL)]
	move.b	d0,(a1)                         	| [$09c5: LD      (DE),A]
	addq.w	#1,a4                           	| [$09c6: INC     BC]
	addq.w	#1,a1                           	| [$09c7: INC     DE]
	addq.w	#1,a0                           	| [$09c8: INC     HL]
	move.b	(a4),d0                         	| [$09c9: LD      A,(BC)]
	and.b	#0xF8,d0                         	| [$09ca: AND     $F8]
	ror.b	#3,d0                            	| [$09cc: RRCA] * 3
	add.b	(a0),d0                          	| [$09cf: ADD     A,(HL)]
	move.b	d0,(a1)                         	| [$09d0: LD      (DE),A]
	rts                                    	| [$09d1: RET]

l_0a50:
	lea	unknown_4B70,a4                	| [$0a50: LD      BC,unknown_4B70]
	lea	unknown_4BB0,a1                	| [$0a53: LD      DE,unknown_4BB0]
l_0a56:
	movem.w	d1/d2,-(sp)                    	| [$0a56: PUSH    BC]
	move.l	a4,-(sp)                        	| [$0a56: PUSH    BC]
	jbsr	l_0718                            	| [$0a57: CALL    $0718]
	move.l	(sp)+,a4                        	| [$0a5a: POP     BC]
	movem.w	(sp)+,d1/d2                    	| [$0a5a: POP     BC]
	move.b	d2,d0                           	| [$0a5b: LD      A,C]
	addq.b	#0x04,d0                        	| [$0a5c: ADD     $04]
	move.b	d0,d2                           	| [$0a5e: LD      C,A]
	add.b	#0x40,d0                         	| [$0a5f: ADD     $40]
	move.b	d0,d4                           	| [$0a61: LD      E,A]
	move.b	d1,d3                           	| [$0a62: LD      D,B]
	tst.b	d0                               	| [$0a63: AND     A]
	jne	l_0a56                             	| [$0a64: JP      NZ,$0A56]
	rts                                    	| [$0a67: RET]

l_0a6c:
	lea	unknown_4B70,a4                	| [$0a6c: LD      BC,unknown_4B70]
	lea	unknown_4BB3,a1                	| [$0a6f: LD      DE,unknown_4BB3]
l_0a72:
	movem.w	d1/d2,-(sp)                    	| [$0a72: PUSH    BC]
	move.l	a4,-(sp)                        	| [$0a72: PUSH    BC]
	movem.w	d3/d4,-(sp)                    	| [$0a73: PUSH    DE]
	move.l	a1,-(sp)                        	| [$0a73: PUSH    DE]
	move.b	(a4),d0                         	| [$0a74: LD      A,(BC)]
	and.b	#0x18,d0                         	| [$0a75: AND     $18]
	jeq	l_0a8a                             	| [$0a77: JP      Z,$0A8A]
	exg	a1,a0                              	| [$0a7a: EX      DE,HL]
	move.b	(a0),d3                         	| [$0a7b: LD      D,(HL)]
	subq.w	#1,a0                           	| [$0a7c: DEC     HL]
	move.b	(a0),d4                         	| [$0a7d: LD      E,(HL)]
	subq.w	#1,a0                           	| [$0a7e: DEC     HL]
	move.b	d3,(a0)                         	| [$0a7f: LD      (HL),D]
	subq.w	#1,a0                           	| [$0a80: DEC     HL]
	move.b	d4,(a0)                         	| [$0a81: LD      (HL),E]
	exg	a1,a0                              	| [$0a82: EX      DE,HL]
	addq.w	#2,a1                           	| [$0a83: INC     DE] * 2
	addq.w	#2,a4                           	| [$0a85: INC     BC] * 2
	jbsr	l_09ba                            	| [$0a87: CALL    $09BA]
l_0a8a:
	move.l	(sp)+,a1                        	| [$0a8a: POP     DE]
	movem.w	(sp)+,d3/d4                    	| [$0a8a: POP     DE]
	move.l	(sp)+,a4                        	| [$0a8b: POP     BC]
	movem.w	(sp)+,d1/d2                    	| [$0a8b: POP     BC]
	move.b	d2,d0                           	| [$0a8c: LD      A,C]
	addq.b	#0x04,d0                        	| [$0a8d: ADD     $04]
	move.b	d0,d2                           	| [$0a8f: LD      C,A]
	move.b	d4,d0                           	| [$0a90: LD      A,E]
	addq.b	#0x04,d0                        	| [$0a91: ADD     $04]
	move.b	d0,d4                           	| [$0a93: LD      E,A]
	cmp.b	#0x03,d0                         	| [$0a94: CP      $03]
	jne	l_0a72                             	| [$0a96: JP      NZ,$0A72]
	rts                                    	| [$0a99: RET]

l_0aa0:
	lea		screen_address_43E2,a0                        	| [$0aa0: LD      L,$E2]
	move.b	(a0)+,d3                         	| [$0aa2: LD      D,(HL)]
	                           	| [$0aa3: INC     HL]
	move.b	(a0),d4                         	| [$0aa4: LD      E,(HL)]
	LOAD_D3D4_FROM_D3_16
	jbsr	AddOneRow_0210                    	| [$0aa5: CALL    AddOneRow_0210]
	subq.w	#1,d3                           	| [$0aa8: DEC     DE]
	move.b	#0x04,d1
	move.b	#0x04,d2                      	| [$0aa9: LD      BC,$0404]
	lea		unknown_43A6,a0                        	| [$0aac: LD      L,$A6]
	subq.b	#1,(a0)                         	| [$0aae: DEC     (HL)]
	move.b	(a0),d0                         	| [$0aaf: LD      A,(HL)]
	lea	game_rom+0x17F0,a0                      	| [$0ab0: LD      HL,$17F0]
	cmp.b	#0xC0,d0                         	| [$0ab3: CP      $C0]
	jeq	l_0b48                             	| [$0ab5: JP      Z,$0B48]
	lea	game_rom+0x1770,a0                      	| [$0ab8: LD      HL,$1770]
	and.w	#0x0C,d0                         	| [$0abb: AND     $0C]
	rol.b	#2,d0                            	| [$0abd: RLCA] * 2
	add.w	d0,a0                            	| [$0abf: ADD     A,L]
												| [$0ac0: LD      L,A]
										| [$0ac1: JP      $0AD6]
* < A0: block data (from ROM)
* < d1: number of columns
* < d2: number of rows
* < D3: start address

copy_block_to_screen_0ad6:
	movem.w	d3/d4,-(sp)                    	| [$0ad6: PUSH    DE]
	movem.w	d1/d2,-(sp)                    	| [$0ad7: PUSH    BC]
l_0ad8:
	move.b	(a0),d0                         	| [$0ad8: LD      A,(HL)]
	move.w	d3,d7
	jbsr	osd_w_videoram                         	| [$0ad9: LD      (DE),A]
	addq.w	#1,a0                           	| [$0ada: INC     HL]
	addq.w	#1,d3                           	| [$0adb: INC     DE]
	subq.b	#1,d1                           	| [$0adc: DEC     B]
	jne	l_0ad8                             	| [$0add: JP      NZ,$0AD8]
	movem.w	(sp)+,d1/d2                    	| [$0ae0: POP     BC]
	movem.w	(sp)+,d3/d4                    	| [$0ae1: POP     DE]
	jbsr	SubtractOneRow_0217               	| [$0ae2: CALL    SubtractOneRow_0217]
	subq.w	#1,d2                           	| [$0ae5: DEC     C]
 	jne	copy_block_to_screen_0ad6                             	| [$0ae6: JP      NZ,$0AD6]
	rts                                    	| [$0ae9: RET]

* called all the time player is exploding
player_hit_0AEA:
	lea	current_scroll_value_43B9,a0   	| [$0aea: LD      HL,current_scroll_value_43B9]
	move.b	(a0),d0                         	| [$0aed: LD      A,(HL)]
	and.b	#0xF8,d0                         	| [$0aee: AND     $F8]
	move.b	d0,(a0)                         	| [$0af0: LD      (HL),A]
	jbsr	osd_set_scroll_value                       	| [$0af1: LD      ($5800),A] 58xx scroll register
	lea		screen_address_43E2,a0                        	| [$0af4: LD      L,$E2]
	move.b	(a0),d3                         	| [$0af6: LD      D,(HL)]
	addq.w	#1,a0                           	| [$0af7: INC     L]
	move.b	(a0),d4                         	| [$0af8: LD      E,(HL)]
	LOAD_D3_16_FROM_D3D4
	jbsr	AddOneRow_0210                    	| [$0af9: CALL    AddOneRow_0210]
	subq.w	#1,d3                           	| [$0afc: DEC     DE]
	                                    	| [$0afd: NOP]
	lea		unknown_43A5,a0                        	| [$0afe: LD      L,$A5]
	subq.b	#1,(a0)                         	| [$0b00: DEC     (HL)]
	move.b	(a0),d0                         	| [$0b01: LD      A,(HL)]
	jeq	l_0b15                             	| [$0b02: JP      Z,$0B15]
	cmp.b	#0x20,d0                         	| [$0b05: CP      $20]
	jcs	l_0ba0                             	| [$0b07: JP      C,$0BA0]
	jeq	l_0380                             	| [$0b0a: JP      Z,$0380]
	jra	l_0bba                             	| [$0b0d: JP      $0BBA]
	
l_0b15:
	move.b	#0x05,-(a0)                      	| [$0b16: LD      (HL),$05] (b15: dec l)
	subq.w	#1,a0                           	| [$0b18: DEC     L]
	add.b	#0x90,d0                         	| [$0b1a: ADD     $90]
	lea		unknown_43A5-0xA5,a0
	and.w	#0xFF,d0
	add.w	d0,a0		                   	| [$0b1c: LD      L,A]  changes A0 lower nibble
	move.b	(a0),d0                         	| [$0b1d: LD      A,(HL)]
	                               	| [$0b1e: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$0b1f: RET     Z] [...]
0:
	subq.b	#1,(a0)                         	| [$0b20: DEC     (HL)]

	move.l	a0,-(sp)                        	| [$0b21: PUSH    HL]
	jbsr	l_0367                            	| [$0b22: CALL    $0367]
	move.l	(sp)+,a0                        	| [$0b25: POP     HL]
	move.b	(a0),d0                         	| [$0b26: LD      A,(HL)]
	                               	| [$0b27: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$0b28: RET     Z] [...]
0:
	lea		unknown_43A4,a0			| [$0b29: LD      L,$A4]
	clr.b	(a0)                             	| [$0b2b: LD      (HL),$00]
	rts                                    	| [$0b2d: RET]


l_0b48:
	jbsr	copy_block_to_screen_0ad6                            	| [$0b48: CALL    $0AD6]
	lea	unknown_43C0,a0                	| [$0b4b: LD      HL,unknown_43C0]
	move.b	#0x0C,(a0)+                      	| [$0b4e: LD      (HL),$0C]
                           	| [$0b50: INC     L]
	move.b	#0x0C,(a0)+                      	| [$0b51: LD      (HL),$0C]
                          	| [$0b53: INC     L]
	move.b	(a0),d0                         	| [$0b54: LD      A,(HL)]
	and.b	#0xF8,d0                         	| [$0b55: AND     $F8]
	or.b	#0x03,d0                          	| [$0b57: OR      $03]
	move.b	d0,(a0)                         	| [$0b59: LD      (HL),A]
	rts                                    	| [$0b5a: RET]

* called during "game over" screen
game_over_0B60:
	lea	timer_43A5,a0                  	| [$0b60: LD      HL,timer_43A5]
	addq.b	#1,(a0)                         	| [$0b63: INC     (HL)]
	move.b	(a0),d0                         	| [$0b64: LD      A,(HL)]
	cmp.b	#0x40,d0                         	| [$0b65: CP      $40]
	jeq	l_03a0                             	| [$0b67: JP      Z,$03A0]
	lea	game_rom+0x1A00,a0                      	| [$0b6a: LD      HL,$1A00]
	move.b	#0x01,d2                        	| [$0b6d: LD      C,$01]
	cmp.b	#0x80,d0                         	| [$0b6f: CP      $80]
	jne	l_0b95                             	| [$0b71: JP      NZ,$0B95]
	lea	game_state_43A4,a0             	| [$0b74: LD      HL,game_state_43A4]
	clr.b	(a0)                             	| [$0b77: LD      (HL),$00]
	lea	unknown_4390,a0                        	| [$0b79: LD      L,$90]
	move.b	(a0)+,d0                         	| [$0b7b: LD      A,(HL)]
	                           	| [$0b7c: INC     L]
	or.b	(a0),d0                           	| [$0b7d: OR      (HL)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0b7e: RET     NZ] [...]
0:
	clr.b	d0                               	| [$0b7f: XOR     A]
	lea	unknown_4398,a0                        	| [$0b80: LD      L,$98]
	move.b	d0,(a0)+                         	| [$0b82: LD      (HL),A]
	                           	| [$0b83: INC     L]
	move.b	d0,(a0)                         	| [$0b84: LD      (HL),A]
	lea	unknown_43A2,a0                        	| [$0b85: LD      L,$A2]
	move.b	d0,(a0)+                         	| [$0b87: LD      (HL),A]
	                           	| [$0b88: INC     L]
	move.b	(a0),d0                         	| [$0b89: LD      A,(HL)]
	                               	| [$0b8a: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$0b8b: RET     Z] [...]
0:
	clr.b	(a0)                             	| [$0b8c: LD      (HL),$00]
	move.w	#0x100,d1                      	| [$0b8e: LD      BC,$0100]
	jbsr	copy_bank_0460                    	| [$0b91: CALL    copy_bank_0460]
	rts                                    	| [$0b94: RET]
l_0b95:
	jbsr	l_01d0                            	| [$0b95: CALL    $01D0]
	jbsr	l_01e4                            	| [$0b98: CALL    $01E4]
	jra	l_1df0                             	| [$0b9b: JP      $1DF0]

l_0ba0:
	lea	current_stage_43B8,a0          	| [$0ba0: LD      HL,current_stage_43B8]
	move.b	(a0),d0                         	| [$0ba3: LD      A,(HL)]
	and.b	#0x0F,d0                         	| [$0ba4: AND     $0F]
	cmp.b	#0x04,d0                         	| [$0ba6: CP      $04]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0ba8: RET     C] [...]
0:
	cmp.b	#0x09,d0                         	| [$0ba9: CP      $09]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0bab: RET     NC] [...]
0:
	addq.w	#1,a0                           	| [$0bac: INC     L]
	clr.b	d0                               	| [$0bad: XOR     A]
	move.b	d0,(a0)                         	| [$0bae: LD      (HL),A]
	jbsr	osd_set_scroll_value                       	| [$0baf: LD      ($5800),A] 58xx scroll register
	jra	l_03a0                             	| [$0bb2: JP      $03A0]

l_0bba:
	move.b	d0,d1                           	| [$0bba: LD      B,A]
	ror.b	#1,d0                            	| [$0bbb: RRCA]
	jcc	l_0fc0                             	| [$0bbc: JP      NC,$0FC0]
	ror.b	#1,d0                            	| [$0bbf: RRCA]
	jcs	l_2070                             	| [$0bc1: JP      C,$2070]
	move.b	d1,d0                           	| [$0bc0: LD      A,B]
	jra	l_20e8                             	| [$0bc4: JP      $20E8]

l_0bca:
	lea	unknown_42D0,a0                	| [$0bca: LD      HL,unknown_42D0]
	move.w	#0xFFDF,d1                      	| [$0bcd: LD      BC,$FFDF]
	move.b	#0x64,(a0)                      	| [$0bd0: LD      (HL),$64]
	add.w	d1,a0                            	| [$0bd2: ADD     HL,BC]
	addq.w	#1,a0                           	| [$0bd3: INC     HL]
	move.b	#0x65,(a0)                      	| [$0bd4: LD      (HL),$65]
	lea	unknown_42F2,a0                	| [$0bd6: LD      HL,unknown_42F2]
	lea	game_rom+0x0A40,a1                      	| [$0bd9: LD      DE,$0A40]
	jbsr	l_3538                            	| [$0bdc: CALL    $3538]
	lea	unknown_4B15,a0                	| [$0bdf: LD      HL,unknown_4B15]
	lea	game_rom+0x3C00,a1                      	| [$0be2: LD      DE,$3C00]
	jbsr	l_3528                            	| [$0be5: CALL    $3528]
	lea	unknown_4AD8,a0                	| [$0be8: LD      HL,unknown_4AD8]
	lea	game_rom+0x0A48,a1                      	| [$0beb: LD      DE,$0A48]
	jbsr	l_3548                            	| [$0bee: CALL    $3548]
	rts                                    	| [$0bf1: RET]

moving_bird_shot_0C00:
	* here A0 points on ram at 0x4Bxx
	move.l	a0,-(sp)                        	| [$0c00: PUSH    HL]
	* compute A0 lsb
	move.l	a0,d6
	sub.l	#unknown_4B00,d6
	                           	| [$0c01: LD      A,L]
	sub.b	#0x72,d6                         	| [$0c02: SUB     $72]
	ror.b	#1,d6                            	| [$0c04: RRCA]
	add.b	#0x50,d6                         	| [$0c05: ADD     $50]
	                           	| [$0c07: LD      L,A]  recompute a0
	lea		unknown_4B00,a0
	add.w	d6,a0
	move.b	(a0)+,d0                         	| [$0c08: LD      A,(HL)]
												| [$0c09: INC     L]


	move.b	(a0),d6                         	| [$0c0a: LD      L,(HL)]
	move.b	d0,d5                           	| [$0c0b: LD      H,A]
	bsr		load_rom_in_a0_from_d5d6
	
	move.b	#0x0C,d3
	move.b	#0x04,d4                      	| [$0c0c: LD      DE,$0C04]
	move.b	(a0),d0                         	| [$0c0f: LD      A,(HL)]
	move.l	(sp)+,a0                        	| [$0c10: POP     HL]
	cmp.b	#0x07,d0                         	| [$0c11: CP      $07]
	jcs	bird_shot_0EA4                     	| [$0c13: JP      C,bird_shot_0EA4]
	cmp.b	#0x09,d0                         	| [$0c16: CP      $09]
	jcc	bird_shot_0EA4                     	| [$0c18: JP      NC,bird_shot_0EA4]
	move.b	#0x10,d3
	move.b	#0x20,d4                      	| [$0c1b: LD      DE,$1020]
	st.b	d0                                	| [$0c1e: LD      A,$FF]
	move.b	d0,unknown_4369                 	| [$0c20: LD      (unknown_4369),A]
	jra	bird_shot_0EA4                     	| [$0c23: JP      bird_shot_0EA4]

l_0c40:
	lea	unknown_43FF,a0                	| [$0c40: LD      HL,unknown_43FF]
	move.b	#0x05,d1                        	| [$0c43: LD      B,$05]
	jbsr	l_088b                            	| [$0c45: CALL    $088B]
	jbsr	l_0c56                            	| [$0c48: CALL    $0C56]
	jbsr	l_0c6b                            	| [$0c4b: CALL    $0C6B]
	jbsr	l_0cd8                            	| [$0c4e: CALL    $0CD8]
	rts                                    	| [$0c51: RET]

l_0c56:
	lea	player_shot_3_structure_43CC,a0	| [$0c56: LD      HL,player_shot_3_structure_43CC]
l_0c59:
	move.l	a0,-(sp)                        	| [$0c59: PUSH    HL]
	jbsr	l_0c84                            	| [$0c5a: CALL    $0C84]
	move.l	(sp)+,a0                        	| [$0c5d: POP     HL]
	                           	| [$0c5e: LD      A,L]
	addq.w	#0x04,a0                        	| [$0c5f: ADD     $04]
	                           	| [$0c61: LD      L,A]
	cmp.l	#unknown_43E0,a0                         	| [$0c62: CP      $E0]
	jne	l_0c59                             	| [$0c64: JP      NZ,$0C59]
	rts                                    	| [$0c67: RET]

l_0c6b:
	lea	unknown_43CE,a4                	| [$0c6b: LD      BC,unknown_43CE]
	lea	unknown_43EE,a1                	| [$0c6e: LD      DE,unknown_43EE]
l_0c71:
	jbsr	l_09ba                            	| [$0c71: CALL    $09BA]
	addq.w	#3,a4                           	| [$0c74: INC     BC] * 3
	addq.w	#3,a1                           	| [$0c77: INC     DE] * 3
	move.b	d2,d0                           	| [$0c7a: LD      A,C]
	cmp.b	#0xE2,d0                         	| [$0c7b: CP      $E2]
	jne	l_0c71                             	| [$0c7d: JP      NZ,$0C71]
	rts                                    	| [$0c80: RET]

l_0c84:
	move.b	(a0),d0                         	| [$0c84: LD      A,(HL)]
	and.b	#0x08,d0                         	| [$0c85: AND     $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$0c87: RET     Z] [...]
0:
													| [$0c88: NOP]
													| [$0c89: NOP]
	addq.w	#1,a0                           	| [$0c8a: INC     L]
	move.b	(a0),d0                         	| [$0c8b: LD      A,(HL)]
	eor.b	#0x04,d0                         	| [$0c8c: XOR     $04]
	move.b	d0,(a0)                         	| [$0c8e: LD      (HL),A]
	addq.w	#2,a0                           	| [$0c8f: INC     L]
	move.b	(a0),d0                         	| [$0c91: LD      A,(HL)]
	addq.b	#0x04,d0                        	| [$0c92: ADD     $04]
	move.b	d0,(a0)                         	| [$0c94: LD      (HL),A]
	cmp.b	#0xF9,d0                         	| [$0c95: CP      $F9]
	jcc	l_096e                             	| [$0c97: JP      NC,$096E]
	subq.w	#1,a0                           	| [$0c9a: DEC     L]
	jbsr	l_0cb4                            	| [$0c9b: CALL    $0CB4]
	illegal   | reg shit going on here
	move.b	d5,d3                           	| [$0c9e: LD      D,H]
	move.b	d6,d0                           	| [$0c9f: LD      A,L]
	add.b	#0x20,d0                         	| [$0ca0: ADD     $20]
	move.b	d0,d4                           	| [$0ca2: LD      E,A]
	exg	a1,a0                              	| [$0ca3: EX      DE,HL]
	move.b	(a0),d1                         	| [$0ca4: LD      B,(HL)]
	addq.w	#1,a0                           	| [$0ca5: INC     HL]
	move.b	(a0),d2                         	| [$0ca6: LD      C,(HL)]
	move.b	(a4),d0                         	| [$0ca7: LD      A,(BC)]
	exg	a1,a0                              	| [$0ca8: EX      DE,HL]
	addq.w	#1,a0                           	| [$0ca9: INC     L]
	cmp.b	#0xE8,d0                         	| [$0caa: CP      $E8]
	jcc	l_096e                             	| [$0cac: JP      NC,$096E]
	rts                                    	| [$0caf: RET]

l_0cb4:
	cmp.b	#0xDC,d0                         	| [$0cb4: CP      $DC]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0cb6: RET     C] [...]
0:
	cmp.b	#0xE9,d0                         	| [$0cb7: CP      $E9]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0cb9: RET     NC] [...]
0:
	move.b	unknown_439F,d0                 	| [$0cba: LD      A,(unknown_439F)]
	cmp.b	(a0),d0                          	| [$0cbd: CP      (HL)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0cbe: RET     C] [...]
0:
	move.b	unknown_439E,d0                 	| [$0cbf: LD      A,(unknown_439E)]
	cmp.b	(a0),d0                          	| [$0cc2: CP      (HL)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0cc3: RET     NC] [...]
0:
l_0cc4:
	move.b	#0x04,d0                        	| [$0cc4: LD      A,$04]
	move.b	d0,game_state_43A4              	| [$0cc6: LD      (game_state_43A4),A]
	move.b	#0x60,d0                        	| [$0cc9: LD      A,$60]
	move.b	d0,timer_43A5                   	| [$0ccb: LD      (timer_43A5),A]
	move.b	#0x10,d0                        	| [$0cce: LD      A,$10]
	move.b	d0,unknown_4363                 	| [$0cd0: LD      (unknown_4363),A]
	rts                                    	| [$0cd3: RET]

l_0cd8:
	lea	player_shot_3_structure_43CC,a4	| [$0cd8: LD      BC,player_shot_3_structure_43CC]
	lea	unknown_43EC,a1                	| [$0cdb: LD      DE,unknown_43EC]
l_0cde:
	movem.w	d1/d2,-(sp)                    	| [$0cde: PUSH    BC]
	move.l	a4,-(sp)                        	| [$0cde: PUSH    BC]
	jbsr	l_0718                            	| [$0cdf: CALL    $0718]
	move.l	(sp)+,a4                        	| [$0ce2: POP     BC]
	movem.w	(sp)+,d1/d2                    	| [$0ce2: POP     BC]
	move.b	d2,d0                           	| [$0ce3: LD      A,C]
	addq.b	#0x04,d0                        	| [$0ce4: ADD     $04]
	move.b	d0,d2                           	| [$0ce6: LD      C,A]
	add.b	#0x20,d0                         	| [$0ce7: ADD     $20]
	move.b	d0,d4                           	| [$0ce9: LD      E,A]
	move.b	d1,d3                           	| [$0cea: LD      D,B]
	tst.b	d0                               	| [$0ceb: AND     A]
	jne	l_0cde                             	| [$0cec: JP      NZ,$0CDE]
	rts                                    	| [$0cef: RET]

l_0cf4:
	move.l	(sp)+,a1                        	| [$0cf4: POP     DE]
	movem.w	(sp)+,d3/d4                    	| [$0cf4: POP     DE]
	move.l	(sp)+,a4                        	| [$0cf5: POP     BC]
	movem.w	(sp)+,d1/d2                    	| [$0cf5: POP     BC]
	rts                                    	| [$0cf6: RET]

	lea	unknown_4393,a0                	| [$0d08: LD      HL,unknown_4393]
	addq.b	#1,(a0)                         	| [$0d0b: INC     (HL)]
	move.b	(a0),d0                         	| [$0d0c: LD      A,(HL)]
	and.b	#0x07,d0                         	| [$0d0d: AND     $07]
	beq.b	0f                               	| [...]
	rts                                    	| [$0d0f: RET     NZ] [...]
0:
	addq.w	#2,a0                           	| [$0d10: INC     L]
	move.b	(a0),d0                         	| [$0d12: LD      A,(HL)]
	addq.b	#1,d0                           	| [$0d13: INC     A]
	and.b	#0x0F,d0                         	| [$0d14: AND     $0F]
	move.b	d0,(a0)                         	| [$0d16: LD      (HL),A]
	rts                                    	| [$0d17: RET]

l_0d1c:
	lea	unknown_4B70,a4                	| [$0d1c: LD      BC,unknown_4B70]
	lea	unknown_4B50,a0                	| [$0d1f: LD      HL,unknown_4B50]
l_0d22:
	jbsr	l_0d30                            	| [$0d22: CALL    $0D30]
	addq.w	#2,a4                           	| [$0d25: INC     C]
	addq.w	#1,a0                           	| [$0d27: INC     L]
	move.b	#0xB0,d0                        	| [$0d28: LD      A,$B0]
	cmp.b	d2,d0                            	| [$0d2a: CP      C]
	jne	l_0d22                             	| [$0d2b: JP      NZ,$0D22]
	rts                                    	| [$0d2e: RET]

l_0d30:
	move.b	(a0)+,d3                         	| [$0d30: LD      D,(HL)]
											| [$0d31: INC     HL]
	move.b	(a4),d0                         	| [$0d32: LD      A,(BC)]
	addq.w	#2,a4                           	| [$0d33: INC     BC] * 2
	and.b	#0x08,d0                         	| [$0d35: AND     $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$0d37: RET     Z] [...]
0:
	move.b	(a0),d4                         	| [$0d38: LD      E,(HL)]
	exg	a1,a0                              	| [$0d39: EX      DE,HL]
	move.b	(a0),d0                         	| [$0d3a: LD      A,(HL)]
	rol.b	#1,d0                            	| [$0d3b: RLCA]
	                        	| [$0d3c: ADD     $00]
	and.w	#0xFF,d0
	lea		game_rom+0x1700,a0
	add.w	d0,a0                           	| [$0d3e: LD      L,A]
												| [$0d3f: LD      H,$17]
	clr.b	d0                               	| [$0d41: XOR     A]
	cmp.b	(a0),d0                          	| [$0d42: CP      (HL)]
	jeq	l_0d4f                             	| [$0d43: JP      Z,$0D4F]
	addq.w	#1,a0                           	| [$0d46: INC     HL]
	cmp.b	(a0),d0                          	| [$0d47: CP      (HL)]
	jeq	l_0d5e                             	| [$0d48: JP      Z,$0D5E]
	subq.w	#1,a0                           	| [$0d4b: DEC     HL]
	move.b	(a4),d0                         	| [$0d4c: LD      A,(BC)]
	add.b	(a0),d0                          	| [$0d4d: ADD     A,(HL)]
	move.b	d0,(a4)                         	| [$0d4e: LD      (BC),A]
l_0d4f:
	addq.w	#1,a4                           	| [$0d4f: INC     BC]
	addq.w	#1,a0                           	| [$0d50: INC     HL]
	move.b	(a4),d0                         	| [$0d51: LD      A,(BC)]
	add.b	(a0),d0                          	| [$0d52: ADD     A,(HL)]
	move.b	d0,(a4)                         	| [$0d53: LD      (BC),A]
	subq.w	#1,a4                           	| [$0d54: DEC     BC]
	and.b	#0x07,d0                         	| [$0d55: AND     $07]
	exg	a1,a0                              	| [$0d57: EX      DE,HL]
	beq.b	0f                               	| [...]
	rts                                    	| [$0d58: RET     NZ] [...]
0:
	addq.b	#1,(a0)                         	| [$0d59: INC     (HL)]
	rts                                    	| [$0d5a: RET]

l_0d5e:
	subq.w	#1,a0                           	| [$0d5e: DEC     HL]
	move.b	(a4),d0                         	| [$0d5f: LD      A,(BC)]
	add.b	(a0),d0                          	| [$0d60: ADD     A,(HL)]
	move.b	d0,(a4)                         	| [$0d61: LD      (BC),A]
	and.b	#0x07,d0                         	| [$0d62: AND     $07]
	exg	a1,a0                              	| [$0d64: EX      DE,HL]
	beq.b	0f                               	| [...]
	rts                                    	| [$0d65: RET     NZ] [...]
0:
	addq.b	#1,(a0)                         	| [$0d66: INC     (HL)]
	rts                                    	| [$0d67: RET]

l_0d70:
	lea	unknown_4B70,a4                	| [$0d70: LD      BC,unknown_4B70]
	lea	unknown_4B50,a0                	| [$0d73: LD      HL,unknown_4B50]
	* loops
l_0d76:
	jbsr	l_0d86                            	| [$0d76: CALL    $0D86]
	move.b	d2,d0                           	| [$0d79: LD      A,C]
	addq.b	#0x04,d0                        	| [$0d7a: ADD     $04]
	move.b	d0,d2                           	| [$0d7c: LD      C,A]
	move.b	#0xB0,d0                        	| [$0d7d: LD      A,$B0]
	cmp.b	d2,d0                            	| [$0d7f: CP      C]
	jne	l_0d76                             	| [$0d80: JP      NZ,$0D76]
	rts                                    	| [$0d83: RET]

* < A0:
* < A4:
l_0d86:
	move.b	(a0)+,d3                         	| [$0d86: LD      D,(HL)]
	                           	| [$0d87: INC     HL]
	move.b	(a0)+,d4                         	| [$0d88: LD      E,(HL)]
	                           	| [$0d89: INC     HL]
	move.b	(a4),d0                         	| [$0d8a: LD      A,(BC)]
	and.b	#0x08,d0                         	| [$0d8b: AND     $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$0d8d: RET     Z] [...]
0:
	LOAD_D3_16_FROM_D3D4
	* put value of d3 in a0, save a0 in d3 (for outer caller)
	exg	d3,a0                              	| [$0d8e: EX      DE,HL]
	bsr		load_rom_in_a0_from_d3w
	move.b	(a0),d0                         	| [$0d8f: LD      A,(HL)]
	                               	| [$0d90: AND     A]
	bne.b	0f                               	| [...]
	jbsr	l_0dde                            	| [$0d91: CALL    Z,$0DDE]
0:
	move.b	d0,d6                           	| [$0d94: LD      L,A]
	rol.b	#1,d0                            	| [$0d95: RLCA]
	add.b	d6,d0                            	| [$0d96: ADD     A,L]
	add.b	#0xA0,d0                         	| [$0d97: ADD     $A0]
	move.b	d0,d6                           	| [$0d99: LD      L,A]
	move.b	#0x16,d5                        	| [$0d9a: LD      H,$16] lsb 16xx of rom
	move.b	(a4),d0                         	| [$0d9c: LD      A,(BC)]
	and.b	#0xF8,d0                         	| [$0d9d: AND     $F8]
	bsr		load_rom_in_a0_from_d5d6
	or.b	(a0)+,d0                           	| [$0d9f: OR      (HL)]
	move.b	d0,(a4)                         	| [$0da0: LD      (BC),A]
	addq.w	#3,a4                           	| [$0da1: INC     BC] * 3
	                           	| [$0da4: INC     HL]
	move.b	(a0)+,d0                         	| [$0da5: LD      A,(HL)]
	                           	| [$0da6: INC     HL]
	ror.b	#1,d0                            	| [$0da7: RRCA]
	jcs	l_0dbb                             	| [$0da8: JP      C,$0DBB]
	ror.b	#1,d0                            	| [$0dab: RRCA]
	jcs	l_0dcc                             	| [$0dac: JP      C,$0DCC]
	move.b	(a4),d0                         	| [$0daf: LD      A,(BC)]
	ror.b	#1,d0                            	| [$0db0: RRCA]
	and.b	#0x03,d0                         	| [$0db1: AND     $03]
	add.b	(a0),d0                          	| [$0db3: ADD     A,(HL)]
	subq.w	#1,a4                           	| [$0db4: DEC     BC]
	jra	l_0dd2                             	| [$0db5: JP      $0DD2]

l_0dbb:
	move.b	(a4),d0                         	| [$0dbb: LD      A,(BC)]
	ror.b	#1,d0                            	| [$0dbc: RRCA]
	and.b	#0x03,d0                         	| [$0dbd: AND     $03]
	add.b	(a0),d0                          	| [$0dbf: ADD     A,(HL)]
	move.b	d0,d5                           	| [$0dc0: LD      H,A]
	subq.w	#1,a4                           	| [$0dc1: DEC     BC]
	move.b	(a4),d0                         	| [$0dc2: LD      A,(BC)]
	and.b	#0x04,d0                         	| [$0dc3: AND     $04]
	add.b	d5,d0                            	| [$0dc5: ADD     A,H]
	jra	l_0dd2                             	| [$0dc6: JP      $0DD2]

l_0dcc:
	subq.w	#1,a4                           	| [$0dcc: DEC     BC]
	move.b	(a4),d0                         	| [$0dcd: LD      A,(BC)]
	ror.b	#1,d0                            	| [$0dce: RRCA]
	and.b	#0x03,d0                         	| [$0dcf: AND     $03]
	add.b	(a0),d0                          	| [$0dd1: ADD     A,(HL)]
l_0dd2:
	move.b	d0,d6                           	| [$0dd2: LD      L,A]
	move.b	#0x16,d5                        	| [$0dd3: LD      H,$16]
	bsr		load_rom_in_a0_from_d5d6
	move.b	(a0),d0                         	| [$0dd5: LD      A,(HL)]
	                           	| [$0dd6: DEC     BC]
	move.b	d0,-(a4)                         	| [$0dd7: LD      (BC),A]
	subq.w	#1,a4                           	| [$0dd8: DEC     BC]
	* restore value of a0 saved from d3
	exg	d3,a0                           	| [$0dd9: EX      DE,HL]
	rts                                    	| [$0dda: RET]

* change value of HL (D5/D6)
l_0dde:
	subq.w	#2,a1                           	| [$0dde: DEC     DE]
	                           	| [$0ddf: DEC     DE]
	move.b	unknown_4394,d0                 	| [$0de0: LD      A,(unknown_4394)]
	move.b	d0,(a1)                         	| [$0de3: LD      (DE),A]
	move.b	d0,d5                           	| [$0de4: LD      H,A]
	addq.w	#1,a1                           	| [$0de5: INC     DE]
	move.b	unknown_4395,d0                 	| [$0de6: LD      A,(unknown_4395)]
	move.b	d0,(a1)                         	| [$0de9: LD      (DE),A]
	move.b	d0,d6                           	| [$0dea: LD      L,A]
	addq.w	#1,a1                           	| [$0deb: INC     DE]
	bsr		load_rom_in_a0_from_d5d6
	move.b	(a0),d0                         	| [$0dec: LD      A,(HL)]
	rts                                    	| [$0ded: RET]

player_shots_vs_birds_collision_0DF0:
	lea	player_shot_1_structure_43C4,a4	| [$0df0: LD      BC,player_shot_1_structure_43C4]
	lea	ram_pointer_on_flying_enemies_table_43E6,a0	| [$0df3: LD      HL,ram_pointer_on_flying_enemies_table_43E6] contains pointer on birds table
	jbsr	player_shot_vs_bird_collision_0E10	| [$0df6: CALL    player_shot_vs_bird_collision_0E10]
	lea	player_shot_2_structure_43C8,a4	| [$0df9: LD      BC,player_shot_2_structure_43C8]
	lea	ram_pointer_on_birds_table_43EA,a0	| [$0dfc: LD      HL,ram_pointer_on_birds_table_43EA] contains pointer on birds table (same one!)
	 	| [$0dff: JP      player_shot_vs_bird_collision_0E10]


player_shot_vs_bird_collision_0E10:
	move.b	(a4),d0                         	| [$0e10: LD      A,(BC)]
	and.b	#0x08,d0                         	| [$0e11: AND     $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$0e13: RET     Z] shot not active: return [...]
0:
* this shot is active
	move.b	(a0)+,d3                         	| [$0e14: LD      D,(HL)]
									| [$0e15: INC     L]
 	move.b	(a0),d4                         	| [$0e16: LD      E,(HL)] DE points to contents of HL (433A)
	bsr		load_ram_in_a1_from_d3d4
	move.b	(a1),d0                         	| [$0e17: LD      A,(DE)]
	cmp.b	#0xC0,d0                         	| [$0e18: CP      $C0]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0e1a: RET     NC] [...]
0:
	cmp.b	#0x60,d0                         	| [$0e1b: CP      $60]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0e1d: RET     C] [...]
0:
	cmp.b	#0x68,d0                         	| [$0e1e: CP      $68]
	jcc	l_0e39                             	| [$0e20: JP      NC,$0E39]
	and.b	#0x07,d0                         	| [$0e23: AND     $07]
	rol.b	#2,d0                            	| [$0e25: RLCA] * 2
* set HL to A*4+$1740 (table in ROM), offset table or something
	add.b	#0x40,d0                         	| [$0e27: ADD     $40]
	move.b	d0,d6                           	| [$0e29: LD      L,A]
	move.b	#0x17,d5                        	| [$0e2a: LD      H,$17]
	addq.w	#2,a4                           	| [$0e2c: INC     BC] * 2
	move.b	(a4),d0                         	| [$0e2e: LD      A,(BC)]
	and.b	#0x07,d0                         	| [$0e2f: AND     $07]
	bsr		load_rom_in_a0_from_d5d6
	cmp.b	(a0),d0                          	| [$0e31: CP      (HL)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0e32: RET     NC] [...]
0:
	addq.w	#1,a0                           	| [$0e33: INC     HL]
	cmp.b	(a0),d0                          	| [$0e34: CP      (HL)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0e35: RET     C] [...]
0:
	jra	l_0e70                             	| [$0e36: JP      $0E70]

l_0e39:
	addq.w	#2,a4                           	| [$0e39: INC     BC]
	                           	| [$0e3a: INC     BC]
	move.b	(a4)+,d0                         	| [$0e3b: LD      A,(BC)]
	move.b	d0,d3                           	| [$0e3c: LD      D,A]
	                           	| [$0e3d: INC     BC]
	move.b	(a4),d0                         	| [$0e3e: LD      A,(BC)]
	and.b	#0xF8,d0                         	| [$0e3f: AND     $F8]
	move.b	d0,d4                           	| [$0e41: LD      E,A]
* shot close to a bird in motion (not in swarm)
	lea	unknown_4B70,a0                	| [$0e42: LD      HL,unknown_4B70]
l_0e45:
	move.b	(a0),d0                         	| [$0e45: LD      A,(HL)]
	addq.w	#2,a0                           	| [$0e46: INC     HL] * 2
	and.b	#0x08,d0                         	| [$0e48: AND     $08]
	beq.b	0f                               	| [...]
	jbsr	moving_bird_close_to_shot_0E58    	| [$0e4a: CALL    NZ,moving_bird_close_to_shot_0E58]
0:
	addq.w	#2,a0                           	| [$0e4d: INC     HL] * 2
	move.b	#0xB0,d0                        	| [$0e4f: LD      A,$B0]
	cmp.b	d6,d0                            	| [$0e51: CP      L]
	jne	l_0e45                             	| [$0e52: JP      NZ,$0E45]
	rts                                    	| [$0e55: RET]

moving_bird_close_to_shot_0E58:
	move.b	d3,d0                           	| [$0e58: LD      A,D]
	cmp.b	(a0),d0                          	| [$0e59: CP      (HL)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0e5a: RET     C] [...]
0:
	move.b	(a0),d0                         	| [$0e5b: LD      A,(HL)]
	add.b	#0x08,d0                         	| [$0e5c: ADD     $08]
	cmp.b	d3,d0                            	| [$0e5e: CP      D]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0e5f: RET     C] [...]
0:
	                           	| [$0e60: INC     HL]
	move.b	(1,a0),d0                         	| [$0e61: LD      A,(HL)]
	                           	| [$0e62: DEC     HL]
	addq.b	#0x04,d0                        	| [$0e63: ADD     $04]
	cmp.b	d4,d0                            	| [$0e65: CP      E]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0e66: RET     C] [...]
0:
	sub.b	#0x0C,d0                         	| [$0e67: SUB     $0C]
	cmp.b	d4,d0                            	| [$0e69: CP      E]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0e6a: RET     NC] [...]
0:
	jra	moving_bird_shot_0C00              	| [$0e6b: JP      moving_bird_shot_0C00]


l_0e70:
	addq.w	#1,a0                           	| [$0e70: INC     HL]
	move.b	(a4),d0                         	| [$0e71: LD      A,(BC)]
	and.b	#0xF8,d0                         	| [$0e72: AND     $F8]
	add.b	(a0),d0                          	| [$0e74: ADD     A,(HL)]
	move.b	d0,d3                           	| [$0e75: LD      D,A]
	addq.w	#1,a4                           	| [$0e76: INC     BC]
	move.b	(a4),d0                         	| [$0e77: LD      A,(BC)]
	and.b	#0xF8,d0                         	| [$0e78: AND     $F8]
	move.b	d0,d4                           	| [$0e7a: LD      E,A]
	lea	unknown_4B70,a0                	| [$0e7b: LD      HL,unknown_4B70]
l_0e7e:
	move.b	(a0),d0                         	| [$0e7e: LD      A,(HL)]
	addq.w	#2,a0                           	| [$0e7f: INC     HL] * 2
	and.b	#0x08,d0                         	| [$0e81: AND     $08]
	beq.b	0f                               	| [...]
	jbsr	swarm_bird_close_to_shot_0E90     	| [$0e83: CALL    NZ,swarm_bird_close_to_shot_0E90]
0:
	addq.w	#2,a0                           	| [$0e86: INC     HL] * 2
	move.b	#0xB0,d0                        	| [$0e88: LD      A,$B0]
	cmp.b	d6,d0                            	| [$0e8a: CP      L]
	jne	l_0e7e                             	| [$0e8b: JP      NZ,$0E7E]
	rts                                    	| [$0e8e: RET]


swarm_bird_close_to_shot_0E90:
	move.b	(a0),d0                         	| [$0e90: LD      A,(HL)]
	addq.b	#0x02,d0                        	| [$0e91: ADD     $02]
	cmp.b	d3,d0                            	| [$0e93: CP      D]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0e94: RET     C] [...]
0:
	subq.b	#0x05,d0                        	| [$0e95: SUB     $05]
	cmp.b	d3,d0                            	| [$0e97: CP      D]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0e98: RET     NC] [...]
0:
	                           	| [$0e99: INC     HL]
	move.b	(1,a0),d0                         	| [$0e9a: LD      A,(HL)]
	                           	| [$0e9b: DEC     HL]
	and.b	#0xF8,d0                         	| [$0e9c: AND     $F8]
	cmp.b	d4,d0                            	| [$0e9e: CP      E]
	beq.b	0f                               	| [...]
	rts                                    	| [$0e9f: RET     NZ] [...]
0:
	lea	game_rom+0x0C02,a1                      	| [$0ea0: LD      DE,$0C02]
	nop                                    	| [$0ea3: NOP]

* swarm or moving, when shot, ends up here
* deactivates bird, player shot and counts one less enemy
* < HL: pointer on current enemy
* < BC: pointer on current player shot
bird_shot_0EA4:
* position ourselves on the previous enemy/shot, those are the
* ones we need to deactivate
	subq.w	#2,a0                           	| [$0ea4: DEC     HL] * 2
	subq.w	#3,a4                           	| [$0ea6: DEC     BC] * 3
	move.b	(a4),d0                         	| [$0ea9: LD      A,(BC)]
	and.b	#0xF7,d0                         	| [$0eaa: AND     $F7]
	move.b	d0,(a4)                         	| [$0eac: LD      (BC),A] disable shot ($18 => $10)
l_0ead:
	move.b	(a0),d0                         	| [$0ead: LD      A,(HL)]
	and.b	#0xF7,d0                         	| [$0eae: AND     $F7]
	move.b	d0,(a0)                         	| [$0eb0: LD      (HL),A] disable enemy
	                           	| [$0eb1: LD      A,L]
	add.w	#0x42,a0                         	| [$0eb2: ADD     $42]
	                           	| [$0eb4: LD      L,A]
	move.b	(a0)+,d1                         	| [$0eb5: LD      B,(HL)]
	                           	| [$0eb6: INC     HL]
	move.b	(a0),d2                         	| [$0eb7: LD      C,(HL)] load into BC (ram pointer)
	lea	unknown_4378,a0                	| [$0eb8: LD      HL,unknown_4378]
	move.b	d3,d0                           	| [$0ebb: LD      A,D]
	cmp.b	#0x10,d0                         	| [$0ebc: CP      $10]
	jeq	l_0ec3                             	| [$0ebe: JP      Z,$0EC3]
	lea	unknown_4370,a0                        	| [$0ec1: LD      L,$70]
l_0ec3:
	move.b	(a0),d0                         	| [$0ec3: LD      A,(HL)]
	                               	| [$0ec4: AND     A]
	jeq	l_0ed5                             	| [$0ec5: JP      Z,$0ED5]
	addq.w	#4,a0                           	| [$0ec8: INC     L]
	move.b	(a0),d0                         	| [$0ecc: LD      A,(HL)]
	                               	| [$0ecd: AND     A]
	jeq	l_0ed5                             	| [$0ece: JP      Z,$0ED5]
	addq.w	#4,a0                           	| [$0ed1: INC     L]
l_0ed5:
	move.b	d3,(a0)+                         	| [$0ed5: LD      (HL),D]
	                           	| [$0ed6: INC     L]
 	move.b	d4,(a0)+                         	| [$0ed7: LD      (HL),E]
	                          	| [$0ed8: INC     L]
	move.b	d1,(a0)+                         	| [$0ed9: LD      (HL),B]
	                           	| [$0eda: INC     L]
 	move.b	d2,(a0)                         	| [$0edb: LD      (HL),C]
	lea	unknown_4364,a0                        	| [$0edc: LD      L,$64]
	move.b	#0xFF,(a0)                      	| [$0ede: LD      (HL),$FF] sets 4364 to $FF: triggers "killed" sfx
	lea	unknown_43BA,a0                        	| [$0ee0: LD      L,$BA]
	subq.b	#1,(a0)                         	| [$0ee2: DEC     (HL)] one less enemy to kill (43BA)
* pops stack and jumps
* occurs when bird enemy is shot
	move.l	(sp)+,a0                        	| [$0ee3: POP     HL] skips immediate caller
	move.l	(sp)+,a0                        	| [$0ee4: POP     HL]
	jra	(a0)                               	| [$0ee5: JP      (HL)] what's wrong with using RET??

l_0f00:
	lea	unknown_43A6,a0                	| [$0f00: LD      HL,unknown_43A6]
	move.b	(a0),d0                         	| [$0f03: LD      A,(HL)]
	cmp.b	#0xC0,d0                         	| [$0f04: CP      $C0]
	jcc	l_0f74                             	| [$0f06: JP      NC,$0F74]
	lea	screen_address_43E2,a0                        	| [$0f09: LD      L,$E2]
	move.b	(a0)+,d3                         	| [$0f0b: LD      D,(HL)]
                           	| [$0f0c: INC     L]
	move.b	(a0),d4                         	| [$0f0d: LD      E,(HL)]
	move.b	#2,d1                      	| [$0f0e: LD      BC,$0202]
	move.b	#2,d2                      	| [$0f0e: LD      BC,$0202]
	jbsr	l_0f56                            	| [$0f11: CALL    $0F56]
	bne.b	0f                               	| [...]
	rts                                    	| [$0f14: RET     Z] [...]
0:
	nop                                    	| [$0f15: NOP]
	nop                                    	| [$0f16: NOP]
	lea	unknown_439E,a0                	| [$0f17: LD      HL,unknown_439E]
	move.b	(a0),d0                         	| [$0f1a: LD      A,(HL)]
	subq.b	#0x06,d0                        	| [$0f1b: SUB     $06]
	move.b	d0,d1                           	| [$0f1d: LD      B,A]
	addq.w	#1,a0                           	| [$0f1e: INC     L]
	move.b	(a0),d2                         	| [$0f1f: LD      C,(HL)]
	lea	unknown_4B70,a0                	| [$0f20: LD      HL,unknown_4B70]
l_0f23:
	move.b	(a0),d0                         	| [$0f23: LD      A,(HL)]
	addq.w	#2,a0                           	| [$0f24: INC     L]
	and.b	#0x08,d0                         	| [$0f26: AND     $08]
	beq.b	0f                               	| [...]
	jbsr	l_0f38                            	| [$0f28: CALL    NZ,$0F38]
0:
	addq.w	#2,a0                           	| [$0f2b: INC     L]
	move.b	#0xB0,d0                        	| [$0f2d: LD      A,$B0]
	illegal | d6 limit
	cmp.b	d6,d0                            	| [$0f2f: CP      L]
	jne	l_0f23                             	| [$0f30: JP      NZ,$0F23]
	rts                                    	| [$0f33: RET]
l_0f38:
	                           	| [$0f38: INC     L]
 	move.b	(1,a0),d0                         	| [$0f39: LD      A,(HL)]
												| [$0f3a: DEC     L]
	cmp.b	#0xD2,d0                         	| [$0f3b: CP      $D2]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0f3d: RET     C] [...]
0:
	cmp.b	#0xE7,d0                         	| [$0f3e: CP      $E7]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0f40: RET     NC] [...]
0:
	move.b	(a0),d0                         	| [$0f41: LD      A,(HL)]
	cmp.b	d2,d0                            	| [$0f42: CP      C]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0f43: RET     NC] [...]
0:
	cmp.b	d1,d0                            	| [$0f44: CP      B]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0f45: RET     C] [...]
0:
	jbsr	l_0cc4                            	| [$0f46: CALL    $0CC4]
	lea	game_rom+0x0D04,a1                      	| [$0f49: LD      DE,$0D04]
	subq.w	#2,a0                           	| [$0f4c: DEC     HL] * 2
	jra	l_0ead                             	| [$0f4e: JP      $0EAD]

l_0f56:
	movem.w	d1/d2,-(sp)                    	| [$0f56: PUSH    BC]
	movem.w	d3/d4,-(sp)                    	| [$0f57: PUSH    DE]
l_0f58:
	move.w	d3,d7                         	| [$0f58: LD      A,(DE)]
	jbsr	osd_r_videoram
	cmp.b	#0x60,d0                         	| [$0f59: CP      $60]
	jcs	l_0f63                             	| [$0f5b: JP      C,$0F63]
	cmp.b	#0xC0,d0                         	| [$0f5e: CP      $C0]
	jcs	l_0cf4                             	| [$0f60: JP      C,$0CF4]
l_0f63:
	addq.w	#1,d3                           	| [$0f63: INC     DE]
	subq.b	#1,d1                           	| [$0f64: DEC     B]
	jne	l_0f58                             	| [$0f65: JP      NZ,$0F58]
	movem.w	(sp)+,d3/d4                    	| [$0f68: POP     DE]
	movem.w	(sp)+,d1/d2                    	| [$0f69: POP     BC]
	jbsr	SubtractOneRow_0217               	| [$0f6a: CALL    SubtractOneRow_0217]
	subq.w	#1,d2                           	| [$0f6d: DEC     C]
	jne	l_0f56                             	| [$0f6e: JP      NZ,$0F56]
	rts                                    	| [$0f71: RET]
l_0f74:
	lea	screen_address_43E2,a0                        	| [$0f74: LD      L,$E2]
	move.b	(a0)+,d3                         	| [$0f76: LD      D,(HL)]
												| [$0f77: INC     L]
	move.b	(a0),d4                         	| [$0f78: LD      E,(HL)]
	LOAD_D3_16_FROM_D3D4
	jbsr	SubtractOneRow_0217               	| [$0f79: CALL    SubtractOneRow_0217]
	subq.w	#1,d3                           	| [$0f7c: DEC     DE]
	move.b	#0x04,d1
	move.b	#0x04,d2                      	| [$0f7d: LD      BC,$0404]
	jbsr	l_0f56                            	| [$0f80: CALL    $0F56]
	bne.b	0f                               	| [...]
	rts                                    	| [$0f83: RET     Z] [...]
0:
	move.b	player_ship_x_43C2,d0           	| [$0f86: LD      A,(player_ship_x_43C2)]
	sub.b	#0x0E,d0                         	| [$0f89: SUB     $0E]
	move.b	d0,d1                           	| [$0f8b: LD      B,A]
	add.b	#0x2D,d0                         	| [$0f8c: ADD     $2D]
	move.b	d0,d2                           	| [$0f8e: LD      C,A]
	lea	unknown_4B70,a0                	| [$0f8f: LD      HL,unknown_4B70]
l_0f92:
	move.b	(a0),d0                         	| [$0f92: LD      A,(HL)]
	addq.w	#2,a0                           	| [$0f93: INC     L]
	and.b	#0x08,d0                         	| [$0f95: AND     $08]
	beq.b	0f                               	| [...]
	jbsr	l_0fa6                            	| [$0f97: CALL    NZ,$0FA6]
0:
	addq.w	#2,a0                           	| [$0f9a: INC     L]
										| [$0f9c: LD      A,$B0]
	cmp.l	#unknown_4BB0,a0                            	| [$0f9e: CP      L]
	jne	l_0f92                             	| [$0f9f: JP      NZ,$0F92]
	rts                                    	| [$0fa2: RET]
l_0fa6:
	addq.w	#1,a0                           	| [$0fa6: INC     L]
	move.b	(a0),d0                         	| [$0fa7: LD      A,(HL)]
	subq.w	#1,a0                           	| [$0fa8: DEC     L]
	cmp.b	#0xCA,d0                         	| [$0fa9: CP      $CA]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0fab: RET     C] [...]
0:
	cmp.b	#0xEF,d0                         	| [$0fac: CP      $EF]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0fae: RET     NC] [...]
0:
	move.b	(a0),d0                         	| [$0faf: LD      A,(HL)]
	cmp.b	d2,d0                            	| [$0fb0: CP      C]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0fb1: RET     NC] [...]
0:
	cmp.b	d1,d0                            	| [$0fb2: CP      B]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0fb3: RET     C] [...]
0:
	lea	game_rom+0x0D02,a1                      	| [$0fb4: LD      DE,$0D02]
	subq.w	#2,a0                           	| [$0fb7: DEC     HL] * 2
	jra	l_0ead                             	| [$0fb9: JP      $0EAD]

l_0fc0:
	lea	unknown_4370,a0                	| [$0fc0: LD      HL,unknown_4370]
	jbsr	l_0fd8                            	| [$0fc3: CALL    $0FD8]
	lea	unknown_4374,a0                	| [$0fc6: LD      HL,unknown_4374]
	jbsr	l_0fd8                            	| [$0fc9: CALL    $0FD8]
	lea	unknown_4378,a0                	| [$0fcc: LD      HL,unknown_4378]
	jbsr	l_3758                            	| [$0fcf: CALL    $3758]
	lea	unknown_437C,a0                	| [$0fd2: LD      HL,unknown_437C]
	jra	l_3758                             	| [$0fd5: JP      $3758]
l_0fd8:
	move.b	(a0),d0                         	| [$0fd8: LD      A,(HL)]
	                               	| [$0fd9: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$0fda: RET     Z] [...]
0:
	move.b	(a0),d1                         	| [$0fdb: LD      B,(HL)]
	subq.b	#1,(a0)                         	| [$0fdc: DEC     (HL)]
	addq.w	#2,a0                           	| [$0fdd: INC     L]
	move.b	(a0),d3                         	| [$0fdf: LD      D,(HL)]
	addq.w	#1,a0                           	| [$0fe0: INC     L]
	move.b	(a0),d4                         	| [$0fe1: LD      E,(HL)]
                                    	| [$0fe2: NOP]
	LOAD_D3_16_FROM_D3D4
	jbsr	AddOneRow_0210                    	| [$0fe3: CALL    AddOneRow_0210]
	move.b	d1,d0                           	| [$0fe6: LD      A,B]
	and.b	#0x0E,d0                         	| [$0fe7: AND     $0E]
	ror.b	#1,d0                            	| [$0fe9: RRCA]
	add.b	#0xB0,d0                         	| [$0fea: ADD     $B0]
	moveq	#0,d6
	move.b	d0,d6                           	| [$0fec: LD      L,A]
	lea		game_rom+0x1700,a0
	add.w	d6,a0
	                        	| [$0fed: LD      H,$17]
	move.b	(a0),d6                         	| [$0fef: LD      L,(HL)]
	* re-apply offset we just read
	lea		game_rom+0x1700,a0
	add.w	d6,a0

	exg	a1,a0                              	| [$0ff0: EX      DE,HL]
	                      	| [$0ff1: LD      BC,$FFDF]
	move.b	#0xFF,d1
	move.b	#0xdF,d2
	
	jra	l_3540                             	| [$0ff4: JP      $3540]

l_14e0:
	move.b	d0,d1                           	| [$14e0: LD      B,A]
	jbsr	osd_read_dipswitches                       	| [$14e1: LD      A,($7800)] 78xx DSW0
	and.b	#0x10,d0                         	| [$14e4: AND     $10] Coinage
	bne.b	0f                               	| [...]
	rts                                    	| [$14e6: RET     Z] [...]
0:
	illegal  | mix a1,d3
	exg	a1,a0                              	| [$14e7: EX      DE,HL]
	move.b	d3,d0                           	| [$14e8: LD      A,D]
	cmp.b	#0x18,d0                         	| [$14e9: CP      $18]
	beq.b	0f                               	| [...]
	rts                                    	| [$14eb: RET     NZ] [...]
0:
	move.b	d4,d0                           	| [$14ec: LD      A,E]
	move.b	#0x22,(a0)                      	| [$14ef: LD      (HL),$22]
	cmp.b	#0x95,d0                         	| [$14ed: CP      $95]
	bne.b	0f                               	| [...]
	rts                                    	| [$14f1: RET     Z] [...]
0:
	move.b	#0x13,(a0)                      	| [$14f4: LD      (HL),$13]
	cmp.b	#0x9A,d0                         	| [$14f2: CP      $9A]
	bne.b	0f                               	| [...]
	rts                                    	| [$14f6: RET     Z] [...]
0:
	move.b	#0x24,(a0)                      	| [$14f9: LD      (HL),$24]
	cmp.b	#0xB5,d0                         	| [$14f7: CP      $B5]
	bne.b	0f                               	| [...]
	rts                                    	| [$14fb: RET     Z] [...]
0:
	move.b	d1,(a0)                         	| [$14fc: LD      (HL),B]
	rts                                    	| [$14fd: RET]

l_17e0:
	jbsr	osd_read_dipswitches                       	| [$17e0: LD      A,($7800)] 78xx DSW0
	and.b	#0x10,d0                         	| [$17e3: AND     $10] Coinage
	bne.b	0f                               	| [...]
	move.b	CoinCount,d0                    	| [$17e5: LD      A,(CoinCount)]
	rts                                    	| [$17e8: RET     Z] [...]
0:
	move.b	CoinCount,d0                    	| [$17e5: LD      A,(CoinCount)]
	ror.b	#1,d0                            	| [$17e9: RRCA]
	and.b	#0x0F,d0                         	| [$17ea: AND     $0F]
	rts                                    	| [$17ec: RET]




l_1df0:
	move.b	unknown_431D,d0                 	| [$1df0: LD      A,(unknown_431D)]
	subq.b	#0x01,d0                        	| [$1df3: SUB     $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$1df5: RET     Z] [...]
0:
	illegal

l_1ee0:
	move.w	#0x433D,d3                	| [$1ee0: LD      DE,unknown_433D]
	move.w	#0x001A,d1                      	| [$1ee3: LD      BC,$001A] 26
l_1ee6:
	move.w	d3,d7
	jbsr	osd_r_videoram                         	| [$1ee6: LD      A,(DE)]
	add.b	d1,d0                            	| [$1ee7: ADD     A,B]
	move.b	d0,d1                           	| [$1ee8: LD      B,A]
	jbsr	SubtractOneRow_0217               	| [$1ee9: CALL    SubtractOneRow_0217]
	subq.w	#1,d2                           	| [$1eec: DEC     C]
	jne	l_1ee6                             	| [$1eed: JP      NZ,$1EE6]
	move.w	d3,d7
	jbsr	osd_r_videoram                         	| [$1ef0: LD      A,(DE)]
	add.b	d1,d0                            	| [$1ef1: ADD     A,B]
	add.b	#0x27,d0                         	| [$1ef2: ADD     $27]
	lea	unknown_4389,a0                	| [$1ef4: LD      HL,unknown_4389]
	add.b	(a0),d0                          	| [$1ef7: ADD     A,(HL)]
	move.b	d0,(a0)                         	| [$1ef8: LD      (HL),A]
	nop                                    	| [$1ef9: NOP]
	rts                                    	| [$1efa: RET]

birds_level_2000:
	jbsr	l_0876                            	| [$2000: CALL    $0876]
	jbsr	player_shots_vs_birds_collision_0DF0	| [$2003: CALL    player_shots_vs_birds_collision_0DF0]
	jbsr	l_24a0                            	| [$2006: CALL    $24A0]
	lea	unknown_435F,a0                	| [$2009: LD      HL,unknown_435F]
	move.b	(a0),d0                         	| [$200c: LD      A,(HL)]
	and.b	#0x03,d0                         	| [$200d: AND     $03]
	move.b	d0,d1                           	| [$200f: LD      B,A]
	addq.b	#1,(a0)                         	| [$2010: INC     (HL)]
	move.b	nb_to_kill_before_stage_completed_43BA,d0	| [$2011: LD      A,(nb_to_kill_before_stage_completed_43BA)]
	                               	| [$2014: AND     A]
	jeq	l_21ba                             	| [$2015: JP      Z,$21BA]
	cmp.b	#0x05,d0                         	| [$2018: CP      $05]
	jcc	l_2130                             	| [$201a: JP      NC,$2130]
	subq.w	#1,a0                           	| [$201d: DEC     L]
	move.b	d1,d0                           	| [$201e: LD      A,B]
	                               	| [$201f: AND     A]
	jne	l_2025                             	| [$2020: JP      NZ,$2025]
	move.b	#0xFF,(a0)                      	| [$2023: LD      (HL),$FF]
l_2025:
	move.b	(a0),d0                         	| [$2025: LD      A,(HL)]
	                               	| [$2026: AND     A]
	jeq	l_2130                             	| [$2027: JP      Z,$2130]
	jra	l_2146                             	| [$202a: JP      $2146]


l_2030:
	move.b	d1,d0                           	| [$23a1: LD      A,B]
	and.b	#0x03,d0                         	| [$2030: AND     $03]
	cmp.b	#0x01,d0                         	| [$2032: CP      $01]
	lea	game_rom+0x1B50,a1                      	| [$2034: LD      DE,$1B50]
	jra	l_23ac                             	| [$2037: JP      $23AC]

l_2040:
	lea	unknown_43AF,a0                	| [$2040: LD      HL,unknown_43AF]
	move.b	current_scroll_value_43B9,d0    	| [$2043: LD      A,(current_scroll_value_43B9)]
	move.b	d0,d2                           	| [$2046: LD      C,A]
	cmp.b	(a0),d0                          	| [$2047: CP      (HL)]
	beq.b	0f                               	| [...]
	rts                                    	| [$2048: RET     NZ] [...]
0:
	move.b	(a0)+,d0                         	| [$2049: LD      A,(HL)]
	                           	| [$204a: INC     L]
	sub.b	(a0),d0                          	| [$204b: SUB     (HL)]
	                           	| [$204c: DEC     L]
	move.b	d0,-(a0)                         	| [$204d: LD      (HL),A]
	addq.w	#2,a0                           	| [$204e: INC     L]
 	addq.b	#1,(a0)                         	| [$2050: INC     (HL)]
	move.b	(a0),d0                         	| [$2051: LD      A,(HL)]
	lea	game_rom+0x1E80,a0                      	| [$2052: LD      HL,$1E80]
	and.w	#0x1F,d0                         	| [$2055: AND     $1F]
	add.w	d0,a0                            	| [$2057: ADD     A,L]
										| [$2058: LD      L,A]
	move.b	(a0),d1                         	| [$2059: LD      B,(HL)]
	add.b	#0x20,d0                         	| [$205a: ADD     $20]
	add.w	d0,a0                           	| [$205c: LD      L,A]
	move.b	(a0),d3                         	| [$205d: LD      D,(HL)]
	add.w	#0x20,a0                         	| [$205e: ADD     $20]
	move.b	d0,d6                           	| [$2060: LD      L,A]
	move.b	(a0),d4                         	| [$2061: LD      E,(HL)]
	move.b	d2,d0                           	| [$2062: LD      A,C]
	ror.b	#3,d0                            	| [$2063: RRCA] * 3
	and.b	#0x1F,d0                         	| [$2066: AND     $1F]
	add.b	d4,d0                            	| [$2068: ADD     A,E]
	addq.b	#1,d0                           	| [$2069: INC     A]
	move.b	d0,d4                           	| [$206a: LD      E,A]
	move.b	d1,d0                           	| [$206b: LD      A,B]
	bsr		load_ram_in_a1_from_d3d4
	move.b	d0,(a1)                         	| [$206c: LD      (DE),A]
	rts                                    	| [$206d: RET]
	                                    	| [$206e: RET]
l_2070:
	move.b	d4,d0                           	| [$2070: LD      A,E]
	sub.b	#0x0A,d0                         	| [$2071: SUB     $0A]
	add.b	#0xC0,d0                         	| [$2073: ADD     $C0]
	move.b	d0,d2                           	| [$2075: LD      C,A]
	move.b	d3,d0                           	| [$2076: LD      A,D]
	move.b	#0x00,d7                        	| [$2077: ADC     $00]
	addx.b	d7,d0                           	| [$2077: ADC     $00]
 	move.b	d0,d1                           	| [$2079: LD      B,A]
	move.b	(a0),d0                         	| [$207a: LD      A,(HL)]
	* those are rom addresses, aligned to 0x100 boundary
	* game does some computations with lsb, better leave them as virtual addresses
	* until data is actually read!
	move.w	#0x2800,d3                      	| [$207b: LD      DE,$2800]
	move.w	#0x2900,d6                      	| [$207e: LD      HL,$2900]
	                             	| [$2081: JP      $2085]
l_2085:
	sub.b	#0x20,d0                         	| [$2085: SUB     $20]
	rol.b	#2,d0                            	| [$2087: RLCA] * 2
	                                    	| [$2089: NOP]
	and.b	#0xE0,d0                         	| [$208a: AND     $E0]
	move.b	d0,d6                           	| [$208c: LD      L,A]
	move.b	#0xE0,d0                        	| [$208d: LD      A,$E0]
	sub.b	d6,d0                            	| [$208f: SUB     L]
	move.b	d0,d6                           	| [$2090: LD      L,A]
l_2091:
	move.b	#0x3F,d0                        	| [$2091: LD      A,$3F]
	sub.b	d2,d0                            	| [$2093: SUB     C]
	move.b	#0x43,d0                        	| [$2094: LD      A,$43]
	subx.b	d1,d0                           	| [$2096: SBC     B]
	jcc	l_20b0                             	| [$2097: JP      NC,$20B0]
	addq.w	#2,d6                           	| [$209a: INC     HL] * 2
	move.b	d3,d0                           	| [$209c: LD      A,E]
	add.b	#0x10,d0                         	| [$209d: ADD     $10]
	move.b	d0,d3                           	| [$209f: LD      E,A]
	move.b	d2,d0                           	| [$20a0: LD      A,C]
	sub.b	#0x20,d0                         	| [$20a1: SUB     $20]
	move.b	d0,d2                           	| [$20a3: LD      C,A]
	move.b	d1,d0                           	| [$20a4: LD      A,B]
	clr		d7
	subx.b	d7,d0                        	| [$20a5: SBC     $00]
	move.b	d0,d1                           	| [$20a7: LD      B,A]
	jra	l_2091                             	| [$20a8: JP      $2091]

l_20b0:
	* disable "register save" as the routine swaps registers with the stack
	* contents. It's meant to update d1/d2 (BC) on exit
	**movem.w	d1/d2,-(sp)                    	| [$20b0: PUSH    BC]
	* D1/D2 holds a ROM address. We're going to copy it in D7
	LOAD_D1_16_FROM_D1D2
	move.w	d1,d7		| d7 is d1+d2 now
l_20b1:
	move.b	(a0),d0                         	| [$20b1: LD      A,(HL)]
	exg	a6,a0                            	| [$20b2: EX      (SP),HL]
	move.b	#0x08,d1                        	| [$20b3: LD      B,$08]
l_20b5:
	clr.b	(a0)                             	| [$20b5: LD      (HL),$00]
	ror.b	#1,d0                            	| [$20b7: RRCA]
	jcc	l_20bf                             	| [$20b8: JP      NC,$20BF]
	exg	d3,d6                              	| [$20bb: EX      DE,HL]
	bsr		load_rom_in_a0_from_d6w
	move.b	(a0),d2                         	| [$20bc: LD      C,(HL)]
	exg	d3,d6                              	| [$20bd: EX      DE,HL]
	bsr		load_ram_in_a0_from_d6w
	move.b	d2,(a0)                         	| [$20be: LD      (HL),C]
l_20bf:
	addq.w	#1,d6                           	| [$20bf: INC     HL]
	addq.w	#1,d3                           	| [$20c0: INC     DE]
	subq.b	#1,d1                           	| [$20c1: DEC     B]
	jne	l_20b5                             	| [$20c2: JP      NZ,$20B5]
	exg	d7,d6                            	| [$20c5: EX      (SP),HL] we can't use stack, swap with a copy
	addq.w	#1,d6                           	| [$20c6: INC     HL]
	move.b	d6,d0                           	| [$20c7: LD      A,L]
	ror.b	#1,d0                            	| [$20c8: RRCA]
	jcs	l_20b1                             	| [$20c9: JP      C,$20B1]
	move.b	d6,d0                           	| [$20cc: LD      A,L]
	and.b	#0x1F,d0                         	| [$20cd: AND     $1F]
	jeq	l_20e1                             	| [$20cf: JP      Z,$20E1] aligned
	exg	d7,d6                            	| [$20d2: EX      (SP),HL]
	                           	| [$20d3: LD      A,L]
	sub.w	#0x30,d6                         	| [$20d4: SUB     $30]
											| [$20d6: LD      L,A]
											| [$20d7: LD      A,H]
											| [$20d8: SBC     $00]
											| [$20da: LD      H,A]
	exg	d7,d6                            	| [$20db: EX      (SP),HL]
	cmp.b	#0x3F,d0                         	| [$20dc: CP      $3F]
	jne	l_20b1                             	| [$20de: JP      NZ,$20B1]
l_20e1:
	* sync D7 with D1/D2 again
	move.w	d7,d1
	LOAD_D1D2_FROM_D1_16
	**movem.w	(sp)+,d1/d2                    	| [$20e1: POP     BC]
	rts                                    	| [$20e2: RET]

l_20e8_2:
	move.b	d1,d0                           	| [$2411: LD      A,B]

l_20e8:
	move.b	d0,d1                           	| [$20e8: LD      B,A]
	move.b	d3,d0                           	| [$20e9: LD      A,D]
	add.b	#0x08,d0                         	| [$20ea: ADD     $08]
	move.b	d0,d3                           	| [$20ec: LD      D,A]
	jbsr	wrap_scroll_value_211C                            	| [$20ed: CALL    $211C]
	ror.b	#3,d0                            	| [$20f0: RRCA] * 3
	add.b	d4,d0                            	| [$20f3: ADD     A,E]
	and.b	#0x1F,d0                         	| [$20f4: AND     $1F]
	move.b	d0,d2                           	| [$20f6: LD      C,A]
	move.b	d4,d0                           	| [$20f7: LD      A,E]
	and.b	#0xE0,d0                         	| [$20f8: AND     $E0]
	or.b	d2,d0                             	| [$20fa: OR      C]
	move.b	d0,d4                           	| [$20fb: LD      E,A]
	move.b	d1,d0                           	| [$20fc: LD      A,B]
	ror.b	#2,d0                            	| [$20fd: RRCA] * 2
	and.b	#0x0E,d0                         	| [$20ff: AND     $0E]
	add.b	#0x90,d0                         	| [$2101: ADD     $90]
	move.b	d0,d6                           	| [$2103: LD      L,A]
	move.b	#0x1B,d5                        	| [$2104: LD      H,$1B]
	move.b	(a0)+,d0                         	| [$2106: LD      A,(HL)]
	                           	| [$2107: INC     L]
 	move.b	(a0),d6                         	| [$2108: LD      L,(HL)]
	move.b	d0,d5                           	| [$2109: LD      H,A]
	LOAD_D3_16_FROM_D3D4
	bsr		load_rom_in_a0_from_d5d6
	move.w	#0x04,d1
	move.w	#0x04,d2                      	| [$210a: LD      BC,$0404]
	jra	copy_block_to_screen_0ad6                             	| [$210d: JP      $0AD6]

wrap_scroll_value_211C:
	lea	current_scroll_value_43B9,a0   	| [$211c: LD      HL,current_scroll_value_43B9]
	move.b	(a0),d0                         	| [$211f: LD      A,(HL)]
	cmp.b	#0x10,d0                         	| [$2120: CP      $10]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2122: RET     C] [...]
0:
	cmp.b	#0x30,d0                         	| [$2123: CP      $30]
	bcs.b	0f                               	| [...]
	rts                                    	| [$2125: RET     NC] [...]
0:
	move.b	#0x10,d0                        	| [$2126: LD      A,$10]
	move.b	d0,(a0)                         	| [$2128: LD      (HL),A]
	jbsr	osd_set_scroll_value                       	| [$2129: LD      ($5800),A] 58xx scroll register
 	rts                                    	| [$212c: RET]

l_2130:
	move.b	d1,d0                           	| [$2130: LD      A,B]
	                               	| [$2131: AND     A]
	jeq	l_2150                             	| [$2132: JP      Z,$2150]
	cmp.b	#0x01,d0                         	| [$2135: CP      $01]
	jeq	l_2160                             	| [$2137: JP      Z,$2160]
	cmp.b	#0x02,d0                         	| [$213a: CP      $02]
	jeq	l_2170                             	| [$213c: JP      Z,$2170]
	jra	l_2180                             	| [$213f: JP      $2180]
	sub.b	d1,d0                            	| [$2142: SUB     B]
	and.b	d6,d0                            	| [$2143: AND     L]
	move.b	d1,d3                           	| [$2144: LD      D,B]
	move.b	d1,d5                           	| [$2145: LD      H,B]
l_2146:
	move.b	d1,d0                           	| [$2146: LD      A,B]
	ror.b	#1,d0                            	| [$2147: RRCA]
	jcc	l_2190                             	| [$2148: JP      NC,$2190]
	jra	l_21a5                             	| [$214b: JP      $21A5]
	bmi.b	0f                               	| [...]
	rts                                    	| [$214e: RET     P] [...]
0:
	illegal		| doesn't seem reached

l_2150:
	jbsr	l_0a50                            	| [$2150: CALL    $0A50]
	jbsr	l_3000                            	| [$2153: CALL    $3000]
	jra	l_0f00                             	| [$2156: JP      $0F00]

l_2160:
	jbsr	l_24c4                            	| [$2160: CALL    $24C4]
	jbsr	l_0c40                            	| [$2163: CALL    $0C40]
	jbsr	l_0d1c                            	| [$2166: CALL    $0D1C]
	jra	l_0fc0                             	| [$2169: JP      $0FC0]

l_2170:
	jbsr	l_0d70                            	| [$2170: CALL    $0D70]
	jra	l_2560                             	| [$2173: JP      $2560]

l_2180:
	jbsr	l_24c4                            	| [$2180: CALL    $24C4]
	jbsr	l_0c40                            	| [$2183: CALL    $0C40]
	jbsr	l_0a6c                            	| [$2186: CALL    $0A6C]
	jra	l_0fc0                             	| [$2189: JP      $0FC0]

l_2190:
	jbsr	l_0a50                            	| [$2190: CALL    $0A50]
	jbsr	l_3000                            	| [$2193: CALL    $3000]
	jbsr	l_0f00                            	| [$2196: CALL    $0F00]
	jbsr	l_2560                            	| [$2199: CALL    $2560]
	jra	l_0c40                             	| [$219c: JP      $0C40]

l_21a5:
	jbsr	l_0d1c                            	| [$21a5: CALL    $0D1C]
	jbsr	l_0d70                            	| [$21a8: CALL    $0D70]
	jbsr	l_0a6c                            	| [$21ab: CALL    $0A6C]
	jbsr	l_0fc0                            	| [$21ae: CALL    $0FC0]
	jra	l_24c4                             	| [$21b1: JP      $24C4]

l_21ba:
	move.b	d1,d0                           	| [$21ba: LD      A,B]
	ror.b	#1,d0                            	| [$21bb: RRCA]
	jcc	l_2204                             	| [$21bc: JP      NC,$2204]
	jbsr	l_0c40                            	| [$21bf: CALL    $0C40]
	jbsr	l_0fc0                            	| [$21c2: CALL    $0FC0]
	jbsr	l_24c4                            	| [$21c5: CALL    $24C4]
	move.b	current_stage_43B8,d0           	| [$21c8: LD      A,(current_stage_43B8)]
	and.b	#0x0F,d0                         	| [$21cb: AND     $0F]
	cmp.b	#0x0B,d0                         	| [$21cd: CP      $0B]
	jcs	l_2204                             	| [$21cf: JP      C,$2204]
	move.b	#0x10,d0                        	| [$21d2: LD      A,$10]
	move.b	d0,nb_to_kill_before_stage_completed_43BA	| [$21d4: LD      (nb_to_kill_before_stage_completed_43BA),A]
	jra	l_0526                             	| [$21d7: JP      $0526]
l_21dc:
	move.b	(a0),d0                         	| [$21dc: LD      A,(HL)]
	nop                                    	| [$21dd: NOP]
	move.b	d0,d1                           	| [$21de: LD      B,A]
	lea	unknown_4B73,a0                	| [$21df: LD      HL,unknown_4B73]
	and.b	#0x07,d0                         	| [$21e2: AND     $07]
	move.b	d0,(a0)                         	| [$21e4: LD      (HL),A]
	subq.w	#1,a0                           	| [$21e5: DEC     L]
	move.b	#0xEF,(a0)                      	| [$21e6: LD      (HL),$EF]
	subq.w	#1,a0                           	| [$21e8: DEC     L]
	move.b	#0x49,(a0)                      	| [$21e9: LD      (HL),$49]
	subq.w	#1,a0                           	| [$21eb: DEC     L]
 	move.b	d1,d0                           	| [$21ec: LD      A,B]
	and.b	#0xF8,d0                         	| [$21ed: AND     $F8]
	ror.b	#3,d0                            	| [$21ef: RRCA] * 3
	add.b	#0x3A,d0                         	| [$21f2: ADD     $3A]
	move.b	d0,d4                           	| [$21f4: LD      E,A]
	move.b	#0x23,d3                        	| [$21f5: LD      D,$23]
	move.b	(a1),d0                         	| [$21f7: LD      A,(DE)]
	move.b	d0,(a0)                         	| [$21f8: LD      (HL),A]
	jbsr	l_34c0                            	| [$21f9: CALL    $34C0]
	jra	l_1ee0                             	| [$21fc: JP      $1EE0]

l_2204:
	lea	unknown_43B6,a0                	| [$2204: LD      HL,unknown_43B6]
	subq.b	#1,(a0)                         	| [$2207: DEC     (HL)]
	move.b	(a0),d0                         	| [$2208: LD      A,(HL)]
	cmp.b	#0xA0,d0                         	| [$2209: CP      $A0]
	bcs.b	0f                               	| [...]
	rts                                    	| [$220b: RET     NC] [...]
0:
	lea	unknown_43A4,a0                        	| [$220c: LD      L,$A4]
	move.b	#0x02,(a0)                      	| [$220e: LD      (HL),$02]
	lea	unknown_43A6,a0                        	| [$2210: LD      L,$A6]
	clr.b	(a0)                             	| [$2212: LD      (HL),$00]
	lea	unknown_43B8,a0                        	| [$2214: LD      L,$B8]
	addq.b	#1,(a0)                         	| [$2216: INC     (HL)]
	move.b	(a0),d0                         	| [$2217: LD      A,(HL)]
	and.b	#0x0E,d0                         	| [$2218: AND     $0E]
	ror.b	#1,d0                            	| [$221a: RRCA]
	add.b	#0x60,d0                         	| [$221b: ADD     $60]
	move.b	d0,d4                           	| [$221d: LD      E,A]
	move.b	#0x17,d3                        	| [$221e: LD      D,$17]
	addq.w	#2,a0                           	| [$2220: INC     L]
	move.b	(a1),d0                         	| [$2222: LD      A,(DE)]
	                               	| [$2223: AND     A]
	jpl	l_222a                             	| [$2224: JP      P,$222A]
	addq.w	#1,a0                           	| [$2227: INC     L]
	and.b	#0x7F,d0                         	| [$2228: AND     $7F]
l_222a:
	move.b	d0,(a0)                         	| [$222a: LD      (HL),A]
	jra	l_0380                             	| [$222b: JP      $0380]

* screen fills with stars to announce vultures
transition_to_vultures_and_last_level_2230:
	lea	unknown_439C,a0                	| [$2230: LD      HL,unknown_439C]
	move.b	(a0),d0                         	| [$2233: LD      A,(HL)]
	addq.b	#1,(a0)                         	| [$2234: INC     (HL)]
	                                    	| [$2235: NOP]
	ror.b	#1,d0                            	| [$2236: RRCA]
	and.b	#0x3F,d0                         	| [$2237: AND     $3F]
	cmp.b	#0x0D,d0                         	| [$2239: CP      $0D]
	jeq	l_2292                             	| [$223b: JP      Z,$2292]
	jcs	l_2260_1                             	| [$2240: JP      C,$2260]
	clr.b	d1                               	| [$2243: LD      B,$00]
	sub.b	#0x0E,d0                         	| [$2245: SUB     $0E]
	cmp.b	#0x0D,d0                         	| [$2247: CP      $0D]
	jne	l_2260                             	| [$2249: JP      NZ,$2260]

l_224c:
	lea	current_stage_43B8,a0          	| [$224c: LD      HL,current_stage_43B8]
	addq.b	#1,(a0)                         	| [$224f: INC     (HL)]
	lea	unknown_43A4,a0                        	| [$2250: LD      L,$A4]
	move.b	#0x02,(a0)                      	| [$2252: LD      (HL),$02]
	rts                                    	| [$2254: RET]
	move.b	d1,d4                           	| [$2255: LD      E,B]
	lea	unknown_43A4,a0                        	| [$2256: LD      L,$A4]
	move.b	#0x02,(a0)                      	| [$2258: LD      (HL),$02]
	rts                                    	| [$225a: RET]

l_2260_1:
	move.b	#0x1F,d1                        	| [$223e: LD      B,$1F]

l_2260:
	move.b	d0,d2                           	| [$2260: LD      C,A]
	ror.b	#3,d0                            	| [$2261: RRCA] * 3
	move.b	d0,d3                           	| [$2264: LD      D,A]
	and.b	#0x1F,d0                         	| [$2265: AND     $1F]
	move.b	d0,d4                           	| [$2267: LD      E,A]
	move.b	d3,d0                           	| [$2268: LD      A,D]
	and.b	#0xE0,d0                         	| [$2269: AND     $E0]
	add.b	#0xB0,d0                         	| [$226b: ADD     $B0]
	move.b	d0,d6                           	| [$226d: LD      L,A]
	move.b	d4,d0                           	| [$226e: LD      A,E]
	move.b	#0x41,d7                        	| [$226f: ADC     $41]
	addx.b	d7,d0                           	| [$226f: ADC     $41]
	move.b	d0,d5                           	| [$2271: LD      H,A]
	move.b	d6,d0                           	| [$2272: LD      A,L]
	sub.b	d2,d0                            	| [$2273: SUB     C]
	move.b	d0,d6                           	| [$2274: LD      L,A]
	move.b	d2,d0                           	| [$2275: LD      A,C]
	addq.b	#1,d0                           	| [$2276: INC     A]
	move.b	d0,d2                           	| [$2277: LD      C,A]
	rol.b	#1,d0                            	| [$2278: RLCA]
	move.b	d0,d4                           	| [$2279: LD      E,A]
l_227a:
	move.b	d2,d3                           	| [$227a: LD      D,C]
	moveq	#0,d7
l_227b:
	bsr		load_ram_in_a0_from_d5d6
	move.b	d1,(a0)                         	| [$227b: LD      (HL),B]
	addq.w	#1,a0                           	| [$227c: INC     HL]
	move.b	d1,(a0)                         	| [$227d: LD      (HL),B]
	addq.w	#1,a0                           	| [$227e: INC     HL]
	subq.b	#1,d3                           	| [$227f: DEC     D]
	jne	l_227b                             	| [$2280: JP      NZ,$227B]
	move.b	d6,d0                           	| [$2283: LD      A,L]
	sub.b	d2,d0                            	| [$2284: SUB     C]
	sub.b	d2,d0                            	| [$2285: SUB     C]
	sub.b	#0x20,d0                         	| [$2286: SUB     $20]
	move.b	d0,d6                           	| [$2288: LD      L,A]
	move.b	d5,d0                           	| [$2289: LD      A,H]
	subx.b	d7,d0                        	| [$228a: SBC     $00]
 	move.b	d0,d5                           	| [$228c: LD      H,A]
	subq.b	#1,f4                           	| [$228d: DEC     E]
 	jne	l_227a                             	| [$228e: JP      NZ,$227A]
	rts                                    	| [$2291: RET]
l_2292:
	lea	current_stage_43B8,a0          	| [$2292: LD      HL,current_stage_43B8]
	move.b	(a0),d0                         	| [$2295: LD      A,(HL)]
	and.b	#0x08,d0                         	| [$2296: AND     $08]
	jeq	l_22f0                             	| [$2298: JP      Z,$22F0]
	lea	game_rom+0x1C00,a0                      	| [$229b: LD      HL,$1C00]
	lea	unknown_4B3F,a1                	| [$229e: LD      DE,unknown_4B3F]
	move.b	#0x47,d1                        	| [$22a1: LD      B,$47]
l_22a3:
	move.b	(a0)+,d0                         	| [$22a3: LD      A,(HL)]
	move.b	d0,(a1)                         	| [$22a4: LD      (DE),A]
	                           	| [$22a5: INC     L]
 	subq.w	#1,a1                           	| [$22a6: DEC     DE]
	move.b	(a0)+,d0                         	| [$22a7: LD      A,(HL)]
	move.b	d0,(a1)                         	| [$22a8: LD      (DE),A]
	                           	| [$22a9: INC     L]
 	subq.w	#1,a1                           	| [$22aa: DEC     DE]
	move.b	d1,d0                           	| [$22ab: LD      A,B]
	cmp.b	d3,d0                            	| [$22ac: CP      D]
	jne	l_22a3                             	| [$22ad: JP      NZ,$22A3]
	jra	l_22e0                             	| [$22b0: JP      $22E0]


mothership_arrives_22B4:
	jbsr	update_scrolling_067A             	| [$22b4: CALL    update_scrolling_067A]
	lea	unknown_43B4,a0                	| [$22b7: LD      HL,unknown_43B4]
	subq.b	#1,(a0)                         	| [$22ba: DEC     (HL)]
	move.b	(a0),d0                         	| [$22bb: LD      A,(HL)]
	cmp.b	#0x28,d0                         	| [$22bc: CP      $28]
	jne	l_0848                             	| [$22be: JP      NZ,$0848]
	lea	unknown_4367,a0                        	| [$22c1: LD      L,$67]
	move.b	#0xFF,(a0)                      	| [$22c3: LD      (HL),$FF]
	rts                                    	| [$22c5: RET]

mothership_level_22CA:
	lea	unknown_43B4,a0                	| [$22ca: LD      HL,unknown_43B4]
	move.b	(a0),d0                         	| [$22cd: LD      A,(HL)]
	cmp.b	#0xC0,d0                         	| [$22ce: CP      $C0]
	jne	transition_to_birds_level_0834     	| [$22d0: JP      NZ,transition_to_birds_level_0834]
	move.b	#0x30,(a0)                      	| [$22d3: LD      (HL),$30]
	lea	unknown_4367,a0                        	| [$22d5: LD      L,$67]
	move.b	#0xFF,(a0)                      	| [$22d7: LD      (HL),$FF]
	lea	unknown_43a4,a0                        	| [$22d9: LD      L,$BC]
	move.b	#0x3F,(a0)                      	| [$22db: LD      (HL),$3F]
	rts                                    	| [$22dd: RET]

l_22e0:
	move.b	#0x71,d0                        	| [$22e0: LD      A,$71]
l_22e2:
	move.b	d0,current_scroll_value_43B9    	| [$22e2: LD      (current_scroll_value_43B9),A]
	jbsr	osd_set_scroll_value                       	| [$22e5: LD      ($5800),A] 58xx scroll register
 	rts                                    	| [$22e8: RET]

l_22f0:
	jbsr	l_03a0                            	| [$22f0: CALL    $03A0]
	clr.b	d0                               	| [$22f3: XOR     A]
	jra	l_22e2                             	| [$22f4: JP      $22E2]

l_22fa:
	lea	unknown_4AAA,a0                	| [$22fa: LD      HL,unknown_4AAA]
	move.b	#0x12,d1                        	| [$22fd: LD      B,$12]
	move.b	unknown_488A,d0                 	| [$22ff: LD      A,(unknown_488A)]
	move.b	d0,d2                           	| [$2302: LD      C,A]
l_2303:
	move.b	d2,d0                           	| [$2303: LD      A,C]
	and.b	#0x03,d0                         	| [$2304: AND     $03]
	rol.b	#2,d0                            	| [$2306: RLCA] * 2
	move.b	d0,d3                           	| [$2308: LD      D,A]
	move.b	(a0),d2                         	| [$2309: LD      C,(HL)]
	move.b	d2,d0                           	| [$230a: LD      A,C]
	and.b	#0x0C,d0                         	| [$230b: AND     $0C]
	ror.b	#2,d0                            	| [$230d: RRCA] * 2
	or.b	d3,d0                             	| [$230f: OR      D]
	or.b	#0x60,d0                          	| [$2310: OR      $60]
	move.b	d0,(a0)                         	| [$2312: LD      (HL),A]
	                           	| [$2313: LD      A,L]
	sub.w	#0x20,a0                         	| [$2314: SUB     $20]
	                           	| [$2316: LD      L,A]
										| [$2317: JP      NC,$231B]
										| [$231a: DEC     H]
l_231b:
	subq.b	#1,d1                           	| [$231b: DEC     B]
	jne	l_2303                             	| [$231c: JP      NZ,$2303]
	rts                                    	| [$231f: RET]

l_2322:
	lea	unknown_43A7,a0                	| [$2322: LD      HL,unknown_43A7]
	addq.b	#1,(a0)                         	| [$2325: INC     (HL)]
	move.b	(a0),d0                         	| [$2326: LD      A,(HL)]
	and.b	#0x07,d0                         	| [$2327: AND     $07]
	rol.b	#3,d0                            	| [$2329: RLCA] * 3
	add.b	#0xC0,d0                         	| [$232c: ADD     $C0]
	move.b	d0,d6                           	| [$232e: LD      L,A]
	move.b	#0x1B,d5                        	| [$232f: LD      H,$1B]
	bsr		load_rom_in_a0_from_d5d6
	move.w	#0x49A6,d3                	| [$2331: LD      DE,unknown_49A6]
	move.w	#0x04,d1
	move.w	#0x02,d2                      	| [$2334: LD      BC,$0402]
	jra	copy_block_to_screen_0ad6                             	| [$2337: JP      $0AD6]
	                      	| [$233a: LD      BC,$0302]
	                           	| [$233d: INC     B]
	                           	| [$233e: DEC     B]
	illegal
	* something going on with D1/D2/A4 here
	move.b	#0x07,d1                        	| [$233f: LD      B,$07]
	move.b	(a4),d0                         	| [$2341: LD      A,(BC)]
	rol.b	#1,d0                            	| [$2342: RLCA]
	move.b	(a4),d0                         	| [$2343: LD      A,(BC)]
	rol.b	#1,d0                            	| [$2344: RLCA]
	move.b	(a4),d0                         	| [$2345: LD      A,(BC)]
	rol.b	#1,d0                            	| [$2346: RLCA]
	move.b	(a4),d0                         	| [$2347: LD      A,(BC)]
	rol.b	#1,d0                            	| [$2348: RLCA]
	move.b	(a4),d0                         	| [$2349: LD      A,(BC)]
	add.w	d1,a0                            	| [$234a: ADD     HL,BC] woooot!!!
	ILLEGAL
	* that's the ONLY time EX      AF,AF' is used! so AF' isn't changed
	* anywhere else!!!
	exg	d0,d7                              	| [$234b: EX      AF,AF']
										| [$234c: INC     B]
	add.w	#0x101,a4                           	| [$234d: INC     BC]
	move.b	d0,(a4)                         	| [$234e: LD      (BC),A]
	lea	game_rom+0x1AFF,a4                      	| [$234f: LD      BC,$1AFF]
	and.b	#0x08,d0                         	| [$2352: AND     $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$2354: RET     Z] [...]
0:
	move.b	(a0)+,d0                         	| [$2355: LD      A,(HL)]
	                           	| [$2356: INC     L]
	move.b	(a0),d6                         	| [$2357: LD      L,(HL)]
	add.b	#0x08,d0                         	| [$2358: ADD     $08]
	move.b	d0,d5                           	| [$235a: LD      H,A]
	* HL is completely replaced by D5/D6 from now
	move.b	current_scroll_value_43B9,d0    	| [$235b: LD      A,(current_scroll_value_43B9)]
	ror.b	#3,d0                            	| [$235e: RRCA] * 3
	add.b	d6,d0                            	| [$2361: ADD     A,L]
	and.b	#0x1F,d0                         	| [$2362: AND     $1F]
	move.b	d0,d1                           	| [$2364: LD      B,A]
	move.b	d6,d0                           	| [$2365: LD      A,L]
	and.b	#0xE0,d0                         	| [$2366: AND     $E0]
	or.b	d1,d0                             	| [$2368: OR      B]
	move.b	d0,d6                           	| [$2369: LD      L,A]
	* reconvert to a0
	bsr		load_ram_in_a0_from_d5d6
	move.b	(a0),d0                         	| [$236a: LD      A,(HL)]
	move.b	d0,d1                           	| [$236b: LD      B,A]
	and.b	#0xFC,d0                         	| [$236c: AND     $FC]
	cmp.b	#0x4C,d0                         	| [$236e: CP      $4C]
	jeq	l_237b                             	| [$2370: JP      Z,$237B]
	and.b	#0xF0,d0                         	| [$2373: AND     $F0]
	cmp.b	#0x60,d0                         	| [$2375: CP      $60]
	jeq	l_2398                             	| [$2377: JP      Z,$2398]
	rts                                    	| [$237a: RET]
l_237b:
	move.b	(a1),d0                         	| [$237b: LD      A,(DE)]
	and.b	#0xF7,d0                         	| [$237c: AND     $F7]
	move.b	d0,(a1)                         	| [$237e: LD      (DE),A]
	st.b	d0                                	| [$237f: LD      A,$FF]
	move.b	d0,unknown_4366                 	| [$2381: LD      (unknown_4366),A]
	move.b	d1,d0                           	| [$2384: LD      A,B]
	subq.b	#1,d0                           	| [$2385: DEC     A]
	move.b	d0,(a0)                         	| [$2386: LD      (HL),A]
	cmp.b	#0x4B,d0                         	| [$2387: CP      $4B]
	beq.b	0f                               	| [...]
	rts                                    	| [$2389: RET     NZ] [...]
0:
	clr.b	(a0)                             	| [$238a: LD      (HL),$00]
	subq.w	#1,a0                           	| [$238c: DEC     L]
	move.b	(a0),d0                         	| [$238d: LD      A,(HL)]
	cmp.b	#0x5E,d0                         	| [$238e: CP      $5E]
	beq.b	0f                               	| [...]
	rts                                    	| [$2390: RET     NZ] [...]
0:
	move.b	#0x4F,(a0)                      	| [$2391: LD      (HL),$4F]
	rts                                    	| [$2393: RET]

l_2398:
	move.b	(a1),d0                         	| [$2398: LD      A,(DE)]
	and.b	#0xF7,d0                         	| [$2399: AND     $F7]
	move.b	d0,(a1)                         	| [$239b: LD      (DE),A]
	addq.w	#2,a1                           	| [$239c: INC     E]
	move.b	(a1),d0                         	| [$239e: LD      A,(DE)]
	and.b	#0x04,d0                         	| [$239f: AND     $04]
	jne	l_2030                             	| [$23a2: JP      NZ,$2030]
	move.b	d1,d0                           	| [$23a1: LD      A,B]
	and.b	#0x0C,d0                         	| [$23a5: AND     $0C]
	cmp.b	#0x04,d0                         	| [$23a7: CP      $04]
	lea	game_rom+0x1B40,a1                      	| [$23a9: LD      DE,$1B40]
l_23ac:
	jeq	l_23c0                             	| [$23ac: JP      Z,$23C0]
	move.b	d1,d0                           	| [$23af: LD      A,B]
	and.b	#0x0F,d0                         	| [$23b0: AND     $0F]
	add.b	d4,d0                            	| [$23b2: ADD     A,E]
	move.b	d0,d4                           	| [$23b3: LD      E,A]
	move.b	(a1),d0                         	| [$23b4: LD      A,(DE)]
	move.b	d0,(a0)                         	| [$23b5: LD      (HL),A]
	st.b	d0                                	| [$23b6: LD      A,$FF]
	move.b	d0,unknown_4366                 	| [$23b8: LD      (unknown_4366),A]
	rts                                    	| [$23bb: RET]

l_23c0:
	subq.w	#1,a0                           	| [$23c0: DEC     L]
 	move.b	(a0),d0                         	| [$23c1: LD      A,(HL)]
	and.b	#0xF0,d0                         	| [$23c2: AND     $F0]
	cmp.b	#0x70,d0                         	| [$23c4: CP      $70]
	beq.b	0f                               	| [...]
	rts                                    	| [$23c6: RET     NZ] [...]
0:
	lea	game_state_43A4,a0             	| [$23c7: LD      HL,game_state_43A4]
	move.b	#0x06,(a0)                      	| [$23ca: LD      (HL),$06]
	addq.w	#1,a0                           	| [$23cc: INC     L]
 	move.b	#0x60,(a0)                      	| [$23cd: LD      (HL),$60]
	lea	unknown_4363,a0                        	| [$23cf: LD      L,$63]
	move.b	#0xFF,(a0)                      	| [$23d1: LD      (HL),$FF]
	rts                                    	| [$23d3: RET]

l_23d6:
	lea	current_stage_43B8,a0          	| [$23d6: LD      HL,current_stage_43B8]
	move.b	(a0),d0                         	| [$23d9: LD      A,(HL)]
	and.b	#0x0F,d0                         	| [$23da: AND     $0F]
	cmp.b	#0x01,d0                         	| [$23dc: CP      $01]
	jeq	l_3a98                             	| [$23de: JP      Z,$3A98]
	cmp.b	#0x03,d0                         	| [$23e1: CP      $03]
	jeq	l_3a98                             	| [$23e3: JP      Z,$3A98]
	cmp.b	#0x05,d0                         	| [$23e6: CP      $05]
	jeq	l_3ad0                             	| [$23e8: JP      Z,$3AD0]
	cmp.b	#0x07,d0                         	| [$23eb: CP      $07]
	jeq	l_3ad0                             	| [$23ed: JP      Z,$3AD0]
	cmp.b	#0x09,d0                         	| [$23f0: CP      $09]
	bcc.b	0f                               	| [...]
	rts                                    	| [$23f2: RET     C] [...]
0:
	cmp.b	#0x0B,d0                         	| [$23f3: CP      $0B]
	jcs	l_3b02                             	| [$23f5: JP      C,$3B02]
	jbsr	l_3b02                            	| [$23f8: CALL    $3B02]
	jra	l_3a98                             	| [$23fb: JP      $3A98]

boss_stage_completed_2400:
	jbsr	l_242c                            	| [$2400: CALL    $242C]
	jeq	l_2552                             	| [$2403: JP      Z,$2552]
	cmp.b	#0x20,d0                         	| [$2406: CP      $20]
	jcs	l_246a                             	| [$2408: JP      C,$246A]
	jeq	l_2520                             	| [$240b: JP      Z,$2520]
	move.b	d0,d1                           	| [$240e: LD      B,A]
	ror.b	#1,d0                            	| [$240f: RRCA]
	                                    	| [$2410: NOP]
	jcc	l_20e8_2                             	| [$2412: JP      NC,$20E8]
	move.b	d4,d0                           	| [$2415: LD      A,E]
	subq.b	#0x05,d0                        	| [$2416: SUB     $05]
	add.b	#0xC0,d0                         	| [$2418: ADD     $C0]
	move.b	d0,d2                           	| [$241a: LD      C,A]
	move.b	d3,d0                           	| [$241b: LD      A,D]
	move.b	#0x00,d7                        	| [$241c: ADC     $00]
	addx.b	d7,d0                           	| [$241c: ADC     $00]
 	move.b	d0,d1                           	| [$241e: LD      B,A]
	move.b	(a0),d0                         	| [$241f: LD      A,(HL)]
	lea	game_rom+0x2A00,a1                      	| [$2420: LD      DE,$2A00]
	lea	game_rom+0x2B00,a0                      	| [$2423: LD      HL,$2B00]
	jra	l_2085                             	| [$2426: JP      $2085]

l_242c:
	lea	current_scroll_value_43B9,a0   	| [$242c: LD      HL,current_scroll_value_43B9]
	move.b	(a0),d0                         	| [$242f: LD      A,(HL)]
	and.b	#0xF8,d0                         	| [$2430: AND     $F8]
	move.b	d0,(a0)                         	| [$2432: LD      (HL),A]
	jbsr	osd_set_scroll_value                       	| [$2433: LD      ($5800),A] 58xx scroll register
 	lea	unknown_41C6,a1                	| [$2436: LD      DE,unknown_41C6]
	ror.b	#3,d0                            	| [$2439: RRCA] * 3
	move.b	d0,d1                           	| [$243c: LD      B,A]
	move.b	d4,d0                           	| [$243d: LD      A,E]
	sub.b	d1,d0                            	| [$243e: SUB     B]
	and.b	#0x1F,d0                         	| [$243f: AND     $1F]
	move.b	d0,d1                           	| [$2441: LD      B,A]
	move.b	d4,d0                           	| [$2442: LD      A,E]
	and.b	#0xE0,d0                         	| [$2443: AND     $E0]
	or.b	d1,d0                             	| [$2445: OR      B]
	move.b	d0,d4                           	| [$2446: LD      E,A]
	lea	unknown_43A5,a0                        	| [$2447: LD      L,$A5]
	subq.b	#1,(a0)                         	| [$2449: DEC     (HL)]
	move.b	(a0),d0                         	| [$244a: LD      A,(HL)]
	rts                                    	| [$244b: RET]

* called when boss has exploded, wraps back to level 1
end_of_level_transition_244C:
	lea	timer_43A5,a0                  	| [$244c: LD      HL,timer_43A5]
	subq.b	#1,(a0)                         	| [$244f: DEC     (HL)]
	move.b	(a0),d0                         	| [$2450: LD      A,(HL)]
	ror.b	#1,d0                            	| [$2451: RRCA]
	jcs	l_06f0                             	| [$2452: JP      C,$06F0]
	tst.b	d0                               	| [$2455: AND     A]
	beq.b	0f                               	| [...]
	rts                                    	| [$2456: RET     NZ] [...]
0:
	subq.w	#1,a0                           	| [$2457: DEC     L]
 	move.b	#0x02,(a0)                      	| [$2458: LD      (HL),$02] sets 43A4 to 2 (restart game state)
	lea	unknown_43B8,a0                        	| [$245a: LD      L,$B8]
	move.b	(a0),d0                         	| [$245c: LD      A,(HL)]
	and.b	#0xF0,d0                         	| [$245d: AND     $F0]
	add.b	#0x10,d0                         	| [$245f: ADD     $10]
	move.b	d0,(a0)                         	| [$2461: LD      (HL),A]
	lea	unknown_43BA,a0                        	| [$2462: LD      L,$BA]
	move.b	#0x10,(a0)                      	| [$2464: LD      (HL),$10]
	jra	l_0380                             	| [$2466: JP      $0380]

l_246a:
	move.w	#0x09,d1
	move.w	#0x14,d2                      	| [$246a: LD      BC,$0914]
	move.w	#0x4AC6,d3                	| [$246d: LD      DE,unknown_4AC6]
	lea	game_rom+0x1C00,a0                      	| [$2470: LD      HL,$1C00]
	jra	copy_block_to_screen_0ad6                             	| [$2473: JP      $0AD6]
l_2476:
	move.b	d1,d0                           	| [$2476: LD      A,B]
	add.b	d2,d0                            	| [$2477: ADD     A,C]
	jbsr	l_2495                            	| [$2478: CALL    $2495]
	lea	unknown_43D3,a0                        	| [$247b: LD      L,$D3]
	move.b	d0,(a0)                         	| [$247d: LD      (HL),A]
	lea	unknown_43BB,a0                	| [$247e: LD      HL,unknown_43BB]
	move.b	#0x08,d0                        	| [$2481: LD      A,$08]
	sub.b	(a0),d0                          	| [$2483: SUB     (HL)]
	rol.b	#1,d0                            	| [$2484: RLCA]
	lea	unknown_439A,a0                        	| [$2485: LD      L,$9A]
	add.b	(a0),d0                          	| [$2487: ADD     A,(HL)]
	rol.b	#1,d0                            	| [$2488: RLCA]
	move.b	d0,d1                           	| [$2489: LD      B,A]
	lea	unknown_436F,a0                        	| [$248a: LD      L,$6F]
	move.b	(a0),d0                         	| [$248c: LD      A,(HL)]
	and.b	#0x1E,d0                         	| [$248d: AND     $1E]
	add.b	d1,d0                            	| [$248f: ADD     A,B]
	move.b	d0,unknown_4BD1                 	| [$2490: LD      (unknown_4BD1),A]
	rts                                    	| [$2493: RET]
l_2495:
	add.b	d1,d0                            	| [$2495: ADD     A,B]
	subq.w	#1,d2                           	| [$2496: DEC     C]
	bne.b	0f                               	| [...]
	rts                                    	| [$2497: RET     Z] [...]
0:
	add.b	d1,d0                            	| [$2498: ADD     A,B]
	subq.b	#1,d2                           	| [$2499: DEC     C]
	bne.b	0f                               	| [...]
	rts                                    	| [$249a: RET     Z] [...]
0:
	add.b	d1,d0                            	| [$249b: ADD     A,B]
	subq.b	#1,d2                           	| [$249c: DEC     C]
 	bne.b	0f                               	| [...]
	rts                                    	| [$249d: RET     Z] [...]
0:
	add.b	d0,d0                            	| [$249e: ADD     A,A]
	rts                                    	| [$249f: RET]
l_24a0:
	move.b	current_stage_43B8,d0           	| [$24a0: LD      A,(current_stage_43B8)]
	and.b	#0x0F,d0                         	| [$24a3: AND     $0F]
	cmp.b	#0x08,d0                         	| [$24a5: CP      $08]
	bcc.b	0f                               	| [...]
	rts                                    	| [$24a7: RET     C] [...]
0:
	lea	player_shot_1_structure_43C4,a1	| [$24a8: LD      DE,player_shot_1_structure_43C4]
	lea	ram_pointer_on_flying_enemies_table_43E6,a0	| [$24ab: LD      HL,ram_pointer_on_flying_enemies_table_43E6]
	jbsr	l_2351                            	| [$24ae: CALL    $2351]
	move.b	counter_439A+1,d0                    	| [$24b1: LD      A,(counter_439A+1)]
	and.b	#0x03,d0                         	| [$24b4: AND     $03]
	cmp.b	#0x03,d0                         	| [$24b6: CP      $03]
	beq.b	0f                               	| [...]
	rts                                    	| [$24b8: RET     NZ] [...]
0:
	jra	l_24f2                             	| [$24b9: JP      $24F2]
	jbsr	l_2351                            	| [$24bc: CALL    $2351]
	rts                                    	| [$24bf: RET]

l_24c4:
	move.b	current_stage_43B8,d0           	| [$24c4: LD      A,(current_stage_43B8)]
	and.b	#0x0F,d0                         	| [$24c7: AND     $0F]
	cmp.b	#0x08,d0                         	| [$24c9: CP      $08]
	jcs	l_06f0                             	| [$24cb: JP      C,$06F0]
	jbsr	l_24e0                            	| [$24ce: CALL    $24E0]
	lea	unknown_43AA,a0                	| [$24d1: LD      HL,unknown_43AA]
	addq.b	#1,(a0)                         	| [$24d4: INC     (HL)]
	move.b	(a0),d0                         	| [$24d5: LD      A,(HL)]
	and.b	#0x03,d0                         	| [$24d6: AND     $03]
	jeq	l_22fa                             	| [$24d8: JP      Z,$22FA]
	jra	l_2322                             	| [$24db: JP      $2322]
	addq.b	#1,d5                           	| [$24de: INC     H]
	cmp.b	d0,d0                            	| [$24df: CP      A]
l_24e0:
	move.b	unknown_43AA,d0                 	| [$24e0: LD      A,(unknown_43AA)]
	and.b	#0x0F,d0                         	| [$24e3: AND     $0F]
	beq.b	0f                               	| [...]
	rts                                    	| [$24e5: RET     NZ] [...]
0:
	move.b	current_scroll_value_43B9,d0    	| [$24e6: LD      A,(current_scroll_value_43B9)]
	cmp.b	#0xA0,d0                         	| [$24e9: CP      $A0]
	bcc.b	0f                               	| [...]
	rts                                    	| [$24eb: RET     C] [...]
0:
	jra	update_scrolling_067A              	| [$24ec: JP      update_scrolling_067A]
	jmi	l_c322                             	| [$24ef: JP      M,$C322]
l_24f2:
	jbsr	l_30aa                            	| [$24f2: CALL    $30AA]
	add.b	#0x60,d0                         	| [$24f5: ADD     $60]
	nop                                    	| [$24f7: NOP]
	move.b	d0,d1                           	| [$24f8: LD      B,A]
	lea	unknown_439B,a0                	| [$24f9: LD      HL,unknown_439B]
	and.b	#0x0E,d0                         	| [$24fc: AND     $0E]
	and.b	(a0),d0                          	| [$24fe: AND     (HL)]
	beq.b	0f                               	| [...]
	rts                                    	| [$24ff: RET     NZ] [...]
0:
	move.b	unknown_439E,d0                 	| [$2500: LD      A,(unknown_439E)]
	cmp.b	d1,d0                            	| [$2503: CP      B]
	bcs.b	0f                               	| [...]
	rts                                    	| [$2504: RET     NC] [...]
0:
	move.b	unknown_439F,d0                 	| [$2505: LD      A,(unknown_439F)]
	cmp.b	d1,d0                            	| [$2508: CP      B]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2509: RET     C] [...]
0:
	move.b	d1,d0                           	| [$250a: LD      A,B]
	subq.b	#0x04,d0                        	| [$250b: SUB     $04]
	move.b	d0,d1                           	| [$250d: LD      B,A]
	move.b	current_scroll_value_43B9,d0    	| [$250e: LD      A,(current_scroll_value_43B9)]
	not.b	d0                               	| [$2511: CPL]
	addq.b	#1,d0                           	| [$2512: INC     A]
	and.b	#0xF8,d0                         	| [$2513: AND     $F8]
	add.b	#0x48,d0                         	| [$2515: ADD     $48]
	move.b	d0,d2                           	| [$2517: LD      C,A]

	move.l	a0,-(sp)                        	| [$2518: PUSH    HL]

	move.l	a0,-(sp)                        	| [$2519: PUSH    HL]
	jra	l_25b7                             	| [$251a: JP      $25B7]

l_2520:
	movem.w	d3/d4,-(sp)                    	| [$2520: PUSH    DE]
	move.l	a1,-(sp)                        	| [$2520: PUSH    DE]
	jbsr	l_0380                            	| [$2521: CALL    $0380]
	move.l	(sp)+,a1                        	| [$2524: POP     DE]
	movem.w	(sp)+,d3/d4                    	| [$2524: POP     DE]
	move.b	current_scroll_value_43B9,d0    	| [$2525: LD      A,(current_scroll_value_43B9)]
	add.b	#0x60,d0                         	| [$2528: ADD     $60]
	ror.b	#1,d0                            	| [$252a: RRCA]
	move.b	d0,d7                           	| [$252b: LD      B,A]
	move.b	current_stage_43B8,d0           	| [$252c: LD      A,(current_stage_43B8)]
	and.b	#0xF0,d0                         	| [$252f: AND     $F0]
	move.b	#0x90,d1                        	| [$2532: LD      B,$90]
	add.b	d7,d0                            	| [$2531: ADD     A,B]
	jcs	l_253d                             	| [$2534: JP      C,$253D]
	cmp.b	#0x90,d0                         	| [$2537: CP      $90]
	jcc	l_253d                             	| [$2539: JP      NC,$253D]
	move.b	d0,d1                           	| [$253c: LD      B,A]
l_253d:
	clr.b	d0                               	| [$253d: XOR     A]
	move.b	d1,d0                           	| [$253e: LD      A,B]
| DAA TODO 
	lea	unknown_439D,a0                	| [$2540: LD      HL,unknown_439D]
	move.b	d0,(a0)+                         	| [$2543: LD      (HL),A]
	                           	| [$2544: INC     L]
	clr.b	(a0)                             	| [$2545: LD      (HL),$00]
	move.b	d4,d0                           	| [$2547: LD      A,E]
	sub.b	#0x5E,d0                         	| [$2548: SUB     $5E]
	move.b	d0,d4                           	| [$254a: LD      E,A]
	move.b	#0x04,d1                        	| [$254b: LD      B,$04]
	jra	l_00c4                             	| [$254d: JP      $00C4]

l_2560:
	lea	unknown_4393,a0                	| [$2560: LD      HL,unknown_4393]
	move.b	(a0),d0                         	| [$2563: LD      A,(HL)]
	and.b	#0x01,d0                         	| [$2564: AND     $01]
	rol.b	#5,d0                            	| [$2566: RLCA] * 5
	add.b	#0x70,d0                         	| [$256b: ADD     $70]
	move.b	d0,d6                           	| [$256d: LD      L,A]
	move.b	#0x4B,d5                        	| [$256e: LD      H,$4B]
	move.b	#0x08,d4                        	| [$2570: LD      E,$08]
	move.b	unknown_4357,d0                 	| [$2572: LD      A,(unknown_4357)]
	rol.b	#3,d0                            	| [$2575: RLCA] * 3
	nop                                    	| [$2578: NOP]
	add.b	#0xAD,d0                         	| [$2579: ADD     $AD]
	move.b	d0,d3                           	| [$257b: LD      D,A]
	move.b	unknown_439F,d0                 	| [$257c: LD      A,(unknown_439F)]
	addq.b	#0x03,d0                        	| [$257f: ADD     $03]
	move.b	d0,d2                           	| [$2581: LD      C,A]
	move.b	unknown_439E,d0                 	| [$2582: LD      A,(unknown_439E)]
	sub.b	#0x0A,d0                         	| [$2585: SUB     $0A]
	move.b	d0,d1                           	| [$2587: LD      B,A]
l_2588:

	move.l	a0,-(sp)                        	| [$2588: PUSH    HL]
	jbsr	l_2596                            	| [$2589: CALL    $2596]
	move.l	(sp)+,a0                        	| [$258c: POP     HL]
												| [$258d: LD      A,L]
	addq.w	#0x04,a0                        	| [$258e: ADD     $04]
												| [$2590: LD      L,A]
	subq.w	#1,a1                           	| [$2591: DEC     E]
 	jne	l_2588                             	| [$2592: JP      NZ,$2588]
	rts                                    	| [$2595: RET]
l_2596:
	move.b	(a0),d0                         	| [$2596: LD      A,(HL)]
	and.b	#0x08,d0                         	| [$2597: AND     $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$2599: RET     Z] [...]
0:
	addq.w	#1,a0                           	| [$259a: INC     L]
	move.b	(a0),d0                         	| [$259b: LD      A,(HL)]
	cmp.b	#0x08,d0                         	| [$259c: CP      $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$259e: RET     Z] [...]
0:
	cmp.b	#0x88,d0                         	| [$259f: CP      $88]
	bcs.b	0f                               	| [...]
	rts                                    	| [$25a1: RET     NC] [...]
0:
	addq.w	#1,a0                           	| [$25a2: INC     L]
	move.b	(a0),d0                         	| [$25a3: LD      A,(HL)]
	cmp.b	d1,d0                            	| [$25a4: CP      B]
	bcc.b	0f                               	| [...]
	rts                                    	| [$25a5: RET     C] [...]
0:
	cmp.b	d2,d0                            	| [$25a6: CP      C]
	bcs.b	0f                               	| [...]
	rts                                    	| [$25a7: RET     NC] [...]
0:
	addq.w	#1,a0                           	| [$25a8: INC     L]
	move.b	(a0),d0                         	| [$25a9: LD      A,(HL)]
	cmp.b	d3,d0                            	| [$25aa: CP      D]
	bcs.b	0f                               	| [...]
	rts                                    	| [$25ab: RET     NC] [...]
0:
	cmp.b	#0x80,d0                         	| [$25ac: CP      $80]
	bcc.b	0f                               	| [...]
	rts                                    	| [$25ae: RET     C] [...]
0:
	                                    	| [$25af: NOP]
	                                    	| [$25b0: NOP]
	                                    	| [$25b1: NOP]
	                                    	| [$25b2: NOP]
	                                    	| [$25b3: NOP]
	move.b	d0,d2                           	| [$25b4: LD      C,A]
	subq.w	#1,a0                           	| [$25b5: DEC     L]
	move.b	(a0),d1                         	| [$25b6: LD      B,(HL)]
l_25b7:
	move.b	current_stage_43B8,d0           	| [$25b7: LD      A,(current_stage_43B8)]
	move.b	#0x03,d3                        	| [$25ba: LD      D,$03]
	cmp.b	#0x10,d0                         	| [$25bc: CP      $10]
	jcs	l_25ca                             	| [$25be: JP      C,$25CA]
	move.b	#0x04,d3                        	| [$25c1: LD      D,$04]
	cmp.b	#0x20,d0                         	| [$25c3: CP      $20]
	jcs	l_25ca                             	| [$25c5: JP      C,$25CA]
	move.b	#0x05,d3                        	| [$25c8: LD      D,$05]
l_25ca:
	lea	player_shot_3_structure_43CC,a0	| [$25ca: LD      HL,player_shot_3_structure_43CC]
l_25cd:
	move.b	(a0),d0                         	| [$25cd: LD      A,(HL)]
	and.b	#0x08,d0                         	| [$25ce: AND     $08]
	jeq	l_25e0                             	| [$25d0: JP      Z,$25E0]
	move.b	d6,d0                           	| [$25d3: LD      A,L]
	addq.b	#0x04,d0                        	| [$25d4: ADD     $04]
	move.b	d0,d6                           	| [$25d6: LD      L,A]
	subq.b	#1,d3                           	| [$25d7: DEC     D]
	jne	l_25cd                             	| [$25d8: JP      NZ,$25CD]
	move.l	(sp)+,a0                        	| [$25db: POP     HL]
	move.l	(sp)+,a0                        	| [$25dc: POP     HL]
	rts                                    	| [$25dd: RET]

l_25e0:
	move.b	d1,d0                           	| [$25e0: LD      A,B]
	addq.b	#0x04,d0                        	| [$25e1: ADD     $04]
	move.b	d0,d1                           	| [$25e3: LD      B,A]
	move.b	d2,d0                           	| [$25e4: LD      A,C]
	add.b	#0x0C,d0                         	| [$25e5: ADD     $0C]
	move.b	d0,d2                           	| [$25e7: LD      C,A]
	move.b	#0x08,(a0)+                      	| [$25e8: LD      (HL),$08]
	                           	| [$25ea: INC     L]
 	ror.b	#1,d0                            	| [$25ec: RRCA]
	and.b	#0x03,d0                         	| [$25ed: AND     $03]
	move.b	d0,d3                           	| [$25ef: LD      D,A]
	move.b	d2,d0                           	| [$25f0: LD      A,C]
	and.b	#0x04,d0                         	| [$25f1: AND     $04]
	add.b	d3,d0                            	| [$25f3: ADD     A,D]
	add.b	#0x58,d0                         	| [$25f4: ADD     $58]
	move.b	d0,(a0)+                         	| [$25f6: LD      (HL),A]
	                           	| [$25f7: INC     L]
	move.b	d1,(a0)+                         	| [$25f8: LD      (HL),B]
	                           	| [$25f9: INC     L]
 	move.b	d2,(a0)                         	| [$25fa: LD      (HL),C]
	move.l	(sp)+,a0                        	| [$25fb: POP     HL]
	move.l	(sp)+,a0                        	| [$25fc: POP     HL]
	rts                                    	| [$25fd: RET]

	move.b	current_scroll_value_43B9,d0    	| [$2605: LD      A,(current_scroll_value_43B9)]
	not.b	d0                               	| [$2608: CPL]
	ror.b	#3,d0                            	| [$2609: RRCA] * 3
	and.b	#0x1F,d0                         	| [$260c: AND     $1F]
	lea	unknown_4BD2,a0                	| [$260e: LD      HL,unknown_4BD2]
	move.b	d0,(a0)+                         	| [$2611: LD      (HL),A]
	                           	| [$2612: INC     L]
 	move.b	unknown_4BD1,d0                 	| [$2613: LD      A,(unknown_4BD1)]
	cmp.b	(a0),d0                          	| [$2616: CP      (HL)]
	jcs	l_2650                             	| [$2617: JP      C,$2650]
	move.b	unknown_4BD5,d0                 	| [$261a: LD      A,(unknown_4BD5)]
	move.b	d0,d3                           	| [$261d: LD      D,A]
	and.b	#0x03,d0                         	| [$261e: AND     $03]
	move.b	d0,d4                           	| [$2620: LD      E,A]
	move.b	counter_439A+1,d0                    	| [$2621: LD      A,(counter_439A+1)]
	rol.b	#2,d0                            	| [$2624: RLCA] * 2
	and.b	#0x0C,d0                         	| [$2626: AND     $0C]
	add.b	d4,d0                            	| [$2628: ADD     A,E]
	add.b	#0xD0,d0                         	| [$2629: ADD     $D0]
	move.b	d0,d6                           	| [$262b: LD      L,A]
	move.b	#0x3E,d5                        	| [$262c: LD      H,$3E]
	move.b	d3,d0                           	| [$262e: LD      A,D]
	ror.b	#2,d0                            	| [$262f: RRCA] * 2
	and.b	#0x07,d0                         	| [$2631: AND     $07]
	add.b	(a0),d0                          	| [$2633: ADD     A,(HL)]
	move.b	d0,d3                           	| [$2634: LD      D,A]
	move.b	current_scroll_value_43B9,d0    	| [$2635: LD      A,(current_scroll_value_43B9)]
	sub.b	d3,d0                            	| [$2638: SUB     D]
l_2639:
	move.b	d0,current_scroll_value_43B9    	| [$2639: LD      (current_scroll_value_43B9),A]
	jbsr	osd_set_scroll_value                       	| [$263c: LD      ($5800),A] 58xx scroll register
	move.b	counter_439A+1,d0                    	| [$263f: LD      A,(counter_439A+1)]
	ror.b	#1,d0                            	| [$2642: RRCA]
	jcc	l_26d0                             	| [$2643: JP      NC,$26D0]
	jbsr	l_2668                            	| [$2646: CALL    $2668]
	jra	l_26aa                             	| [$2649: JP      $26AA]
	jne	l_263a                             	| [$264c: JP      NZ,$263A]
	move.b	game_rom+0x3A2C,d0                       	| [$264f: LD      A,($3A2C)]
 	subx.b	d4,d0                           	| [$2652: SBC     E]
 	move.b	d4,d1                           	| [$2653: LD      B,E]
	rol.b	#2,d0                            	| [$2654: RLCA] * 2
	and.b	#0x0C,d0                         	| [$2656: AND     $0C]
	add.b	(a0),d0                          	| [$2658: ADD     A,(HL)]
	add.b	#0xD0,d0                         	| [$2659: ADD     $D0]
	move.b	d0,d6                           	| [$265b: LD      L,A]
	move.b	#0x3E,d5                        	| [$265c: LD      H,$3E]
	move.b	current_scroll_value_43B9,d0    	| [$265e: LD      A,(current_scroll_value_43B9)]
	add.b	(a0),d0                          	| [$2661: ADD     A,(HL)]
	jra	l_2639                             	| [$2662: JP      $2639]
	jcc	l_26ae                             	| [$2665: JP      NC,$26AE]
l_2668:
	move.b	unknown_436E,d0                 	| [$2668: LD      A,(unknown_436E)]
	nop                                    	| [$266b: NOP]
	move.b	d0,d1                           	| [$266c: LD      B,A]
	move.b	counter_439A,d0                      	| [$266d: LD      A,(counter_439A)]
	cmp.b	#0x18,d0                         	| [$2670: CP      $18]
	jcs	l_2676                             	| [$2672: JP      C,$2676]
	addq.b	#1,d1                           	| [$2675: INC     B]
l_2676:
	cmp.b	#0x10,d0                         	| [$2676: CP      $10]
	jcs	l_267c                             	| [$2678: JP      C,$267C]
	addq.b	#1,d1                           	| [$267b: INC     B]
l_267c:
	move.b	nb_to_kill_before_stage_completed_43BA,d0	| [$267c: LD      A,(nb_to_kill_before_stage_completed_43BA)]
	cmp.b	#0x03,d0                         	| [$267f: CP      $03]
	jcc	l_2685                             	| [$2681: JP      NC,$2685]
	addq.b	#1,d1                           	| [$2684: INC     B]
l_2685:
	move.b	unknown_4BD6,d0                 	| [$2685: LD      A,(unknown_4BD6)]
	add.b	#0xE0,d0                         	| [$2688: ADD     $E0]
	move.b	d0,d6                           	| [$268a: LD      L,A]
	move.b	#0x3E,d5                        	| [$268b: LD      H,$3E]
	move.b	d1,d0                           	| [$268d: LD      A,B]
	cmp.b	(a0),d0                          	| [$268e: CP      (HL)]
	jcs	l_2693                             	| [$268f: JP      C,$2693]
	move.b	(a0),d0                         	| [$2692: LD      A,(HL)]
l_2693:
	move.b	d0,d3                           	| [$2693: LD      D,A]
	move.b	unknown_43BB,d0                 	| [$2694: LD      A,(unknown_43BB)]
	cmp.b	#0x04,d0                         	| [$2697: CP      $04]
	jcc	l_269d                             	| [$2699: JP      NC,$269D]
	addq.b	#1,d3                           	| [$269c: INC     D]
l_269d:
	cmp.b	#0x02,d0                         	| [$269d: CP      $02]
	jcc	l_26a3                             	| [$269f: JP      NC,$26A3]
	addq.b	#1,d3                           	| [$26a2: INC     D]
l_26a3:
	move.b	d3,d0                           	| [$26a3: LD      A,D]
	move.b	d0,unknown_4BD5                 	| [$26a4: LD      (unknown_4BD5),A]
	rts                                    	| [$26a7: RET]
	nop                                    	| [$26a8: NOP]
	move.b	d1,d4                           	| [$26a9: LD      E,B]
l_26aa:
	lea	unknown_4BD3,a0                	| [$26aa: LD      HL,unknown_4BD3]
	move.b	(a0),d0                         	| [$26ad: LD      A,(HL)]
l_26ae:
	subq.b	#1,(a0)                         	| [$26ae: DEC     (HL)]
	tst.b	d0                               	| [$26af: AND     A]
	beq.b	0f                               	| [...]
	rts                                    	| [$26b0: RET     NZ] [...]
0:
	addq.b	#1,(a0)                         	| [$26b1: INC     (HL)]
	lea	unknown_43D6,a0                        	| [$26b2: LD      L,$D6]
	move.b	(a0),d0                         	| [$26b4: LD      A,(HL)]
	cmp.b	#0x16,d0                         	| [$26b5: CP      $16]
	bcs.b	0f                               	| [...]
	rts                                    	| [$26b7: RET     NC] [...]
0:
	cmp.b	#0x08,d0                         	| [$26b8: CP      $08]
	bcc.b	0f                               	| [...]
	rts                                    	| [$26ba: RET     C] [...]
0:
	addq.w	#1,a0                           	| [$26bb: INC     L]
	sub.b	(a0),d0                          	| [$26bc: SUB     (HL)]
	rol.b	#1,d0                            	| [$26bd: RLCA]
	move.b	d0,d1                           	| [$26be: LD      B,A]
	move.b	unknown_436F,d0                 	| [$26bf: LD      A,(unknown_436F)]
	and.b	#0x03,d0                         	| [$26c2: AND     $03]
	lea	unknown_43D4,a0                        	| [$26c4: LD      L,$D4]
	move.b	d0,(a0)                         	| [$26c6: LD      (HL),A]
	not.b	d0                               	| [$26c7: CPL]
	and.b	#0x03,d0                         	| [$26c8: AND     $03]
	addq.b	#1,d0                           	| [$26ca: INC     A]
	move.b	d0,d2                           	| [$26cb: LD      C,A]
	jra	l_2476                             	| [$26cc: JP      $2476]
	rts                                    	| [$26cf: RET]
l_26d0:
	lea	unknown_4BA8,a0                	| [$26d0: LD      HL,unknown_4BA8]
	lea	game_rom+0x0800,a4                      	| [$26d3: LD      BC,$0800]
	move.b	#0x80,d3
	move.b	#0,d4                      	| [$26d6: LD      DE,$8000]
l_26d9:
	move.b	(a0),d0                         	| [$26d9: LD      A,(HL)]
	                               	| [$26da: AND     A]
	jeq	l_26e5                             	| [$26db: JP      Z,$26E5]
	move.b	d3,d0                           	| [$26de: LD      A,D]
	rol.b	#1,d0                            	| [$26df: RLCA]
	jcc	l_26e4                             	| [$26e0: JP      NC,$26E4]
	move.b	d2,d3                           	| [$26e3: LD      D,C]
l_26e4:
	move.b	d2,d4                           	| [$26e4: LD      E,C]
l_26e5:
	addq.w	#1,d2                           	| [$26e5: INC     C]
 	                           	| [$26e6: LD      A,L]
	sub.w	d1,a0                            	| [$26e7: SUB     B]
	                           	| [$26e8: LD      L,A]
	cmp.l	#unknown_4B68,a0                         	| [$26e9: CP      $68]
	jne	l_26d9                             	| [$26eb: JP      NZ,$26D9]
	move.b	unknown_4BD2,d0                 	| [$26ee: LD      A,(unknown_4BD2)]
	add.b	d3,d0                            	| [$26f1: ADD     A,D]
	add.b	d4,d0                            	| [$26f2: ADD     A,E]
	and.b	#0x1F,d0                         	| [$26f3: AND     $1F]
	move.b	d0,unknown_4BD6                 	| [$26f5: LD      (unknown_4BD6),A]
	move.b	d4,d0                           	| [$26f8: LD      A,E]
	sub.b	d3,d0                            	| [$26f9: SUB     D]
	move.b	d0,unknown_4BD7                 	| [$26fa: LD      (unknown_4BD7),A]
	rts                                    	| [$26fd: RET]

l_2700:
	lea	game_in_play_43A2,a0           	| [$2700: LD      HL,game_in_play_43A2]
	move.b	(a0),d0                         	| [$2703: LD      A,(HL)]
	                               	| [$2704: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$2705: RET     Z] [...]
0:
	addq.w	#1,a0                           	| [$2706: INC     L]
	move.b	(a0),d0                         	| [$2707: LD      A,(HL)]
	and.b	#0x01,d0                         	| [$2708: AND     $01]
	rol.b	#2,d0                            	| [$270a: RLCA] * 2
	add.b	#0x83,d0                         	| [$270c: ADD     $83]
	move.b	d0,d6                           	| [$270e: LD      L,A]
	st.b	d0                                	| [$270f: LD      A,$FF]
	move.b	d0,unknown_4397                 	| [$2711: LD      (unknown_4397),A]
	lea	unknown_4370,a1                	| [$2714: LD      DE,unknown_4370]
l_2717:
	jbsr	l_2748                            	| [$2717: CALL    $2748]
	addq.w	#3,d4                           	| [$271a: INC     E]
 	move.b	d4,d0                           	| [$271d: LD      A,E]
	cmp.b	#0x80,d0                         	| [$271e: CP      $80]
	jne	l_2717                             	| [$2720: JP      NZ,$2717]
	move.b	#0x9D,d4                        	| [$2723: LD      E,$9D]
	move.b	game_state_43A4,d0              	| [$2725: LD      A,(game_state_43A4)]
	cmp.b	#0x06,d0                         	| [$2728: CP      $06]
	jne	l_2739                             	| [$272a: JP      NZ,$2739]
	move.b	(a1),d0                         	| [$272d: LD      A,(DE)]
	move.b	d0,d1                           	| [$272e: LD      B,A]
	clr.b	d2                               	| [$272f: LD      C,$00]
	jbsr	AddToScore_0220                   	| [$2731: CALL    AddToScore_0220]
	clr.b	d0                               	| [$2734: XOR     A]
	move.b	d0,(a1)                         	| [$2735: LD      (DE),A]
	move.b	d0,unknown_4397                 	| [$2736: LD      (unknown_4397),A]
l_2739:
	move.b	unknown_4397,d0                 	| [$2739: LD      A,(unknown_4397)]
	                               	| [$273c: AND     A]
	bne.b	0f                               	| [...]
	jbsr	l_2768                            	| [$273d: CALL    Z,$2768]
0:
	jbsr	l_27a8                            	| [$2740: CALL    $27A8]
	jra	l_3a10                             	| [$2743: JP      $3A10]


l_2748:
	move.b	(a1)+,d0                         	| [$2748: LD      A,(DE)]
	                           	| [$2749: INC     E]
 	cmp.b	#0x01,d0                         	| [$274a: CP      $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$274c: RET     NZ] [...]
0:
	move.b	(a1),d0                         	| [$274d: LD      A,(DE)]
	                               	| [$274e: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$274f: RET     Z] [...]
0:
	ror.b	#4,d0                            	| [$2750: RRCA] * 4
	move.b	d0,d1                           	| [$2754: LD      B,A]
	and.b	#0xF0,d0                         	| [$2755: AND     $F0]
	move.b	d0,d2                           	| [$2757: LD      C,A]
	move.b	d1,d0                           	| [$2758: LD      A,B]
	and.b	#0x0F,d0                         	| [$2759: AND     $0F]
	move.b	d0,d1                           	| [$275b: LD      B,A]
	jbsr	AddToScore_0220                   	| [$275c: CALL    AddToScore_0220]
	clr.b	d0                               	| [$275f: XOR     A]
	move.b	d0,(a1)                         	| [$2760: LD      (DE),A]
	move.b	d0,unknown_4397                 	| [$2761: LD      (unknown_4397),A]
	rts                                    	| [$2764: RET]
l_2768:

	move.l	a0,-(sp)                        	| [$2768: PUSH    HL]
	lea	unknown_4261,a1                	| [$2769: LD      DE,unknown_4261]
	move.b	#0x06,d1                        	| [$276c: LD      B,$06]
	move.b	unknown_43A3,d0                 	| [$276e: LD      A,(unknown_43A3)]
	                               	| [$2771: AND     A]
	jeq	l_2778                             	| [$2772: JP      Z,$2778]
	lea	unknown_4021,a1                	| [$2775: LD      DE,unknown_4021]
l_2778:
	jbsr	l_00c4                            	| [$2778: CALL    $00C4]
	move.l	(sp)+,a0                        	| [$277b: POP     HL]
	lea	unknown_43BD,a1                	| [$277c: LD      DE,unknown_43BD]
	exg	a1,a0                              	| [$277f: EX      DE,HL]
	move.b	(a0)+,d0                         	| [$2780: LD      A,(HL)]
	                           	| [$2781: INC     L]
 	or.b	(a0),d0                           	| [$2782: OR      (HL)]
	bne.b	0f                               	| [...]
	rts                                    	| [$2783: RET     Z] [...]
0:
	addq.w	#1,a0                           	| [$2784: INC     L]
	exg	a1,a0                              	| [$2785: EX      DE,HL]
	jbsr	l_0314                            	| [$2786: CALL    $0314]
	bcs.b	0f                               	| [...]
	rts                                    	| [$2789: RET     NC] [...]
0:
	move.b	unknown_43A3,d0                 	| [$278a: LD      A,(unknown_43A3)]
	add.b	#0x90,d0                         	| [$278d: ADD     $90]
	move.b	d0,d6                           	| [$278f: LD      L,A]
	addq.b	#1,(a0)                         	| [$2790: INC     (HL)]
	jbsr	l_0367                            	| [$2791: CALL    $0367]
	st.b	d0                                	| [$2794: LD      A,$FF]
	move.b	d0,unknown_436A                 	| [$2796: LD      (unknown_436A),A]
	lea	unknown_43BE,a0                        	| [$2799: LD      L,$BE]
	move.b	(a0),d0                         	| [$279b: LD      A,(HL)]
	clr.b	(a0)                             	| [$279c: LD      (HL),$00]
	ror.b	#4,d0                            	| [$279e: RRCA] * 4
	                           	| [$27a2: DEC     L]
	move.b	d0,-(a0)                         	| [$27a3: LD      (HL),A]
	rts                                    	| [$27a4: RET]
l_27a8:
	lea	unknown_438C,a0                	| [$27a8: LD      HL,unknown_438C]
	move.b	(a0)+,d0                         	| [$27ab: LD      A,(HL)]
	move.b	d0,unknown_6000                 	| [$27ac: LD      (unknown_6000),A] 60xx sound A
	                           	| [$27af: INC     L]
 	move.b	(a0),d0                         	| [$27b0: LD      A,(HL)]
	move.b	d0,unknown_6800                 	| [$27b1: LD      (unknown_6800),A] 68xx sound B
	or.b	#0x0F,d0                          	| [$27b4: OR      $0F]
	move.b	d0,(a0)                         	| [$27b6: LD      (HL),A]
	                           	| [$27b7: DEC     L]
 	move.b	#0x0F,-(a0)                      	| [$27b8: LD      (HL),$0F]
	rts                                    	| [$27ba: RET]
l_27bd:
	lea	unknown_4363,a0                	| [$27bd: LD      HL,unknown_4363]
	move.b	(a0),d0                         	| [$27c0: LD      A,(HL)]
	                               	| [$27c1: AND     A]
	jne	l_27e2                             	| [$27c2: JP      NZ,$27E2]
	lea	unknown_4361,a0                        	| [$27c5: LD      L,$61]
	move.b	(a0),d0                         	| [$27c7: LD      A,(HL)]
	                               	| [$27c8: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$27c9: RET     Z] [...]
0:
	cmp.b	#0x19,d0                         	| [$27ca: CP      $19]
	jcc	l_27d8                             	| [$27cc: JP      NC,$27D8]
	subq.b	#1,(a0)                         	| [$27cf: DEC     (HL)]
	lea	unknown_438C,a0                        	| [$27d0: LD      L,$8C]
	move.b	(a0),d0                         	| [$27d2: LD      A,(HL)]
	or.b	#0x40,d0                          	| [$27d3: OR      $40]
	move.b	d0,(a0)                         	| [$27d5: LD      (HL),A]
	rts                                    	| [$27d6: RET]
	move.b	d0,(a0)                         	| [$27d7: LD      (HL),A]
l_27d8:
	move.b	#0x18,(a0)                      	| [$27d8: LD      (HL),$18]
	lea	unknown_438C,a0                        	| [$27da: LD      L,$8C]
	move.b	(a0),d0                         	| [$27dc: LD      A,(HL)]
	and.b	#0xBF,d0                         	| [$27dd: AND     $BF]
	move.b	d0,(a0)                         	| [$27df: LD      (HL),A]
	rts                                    	| [$27e0: RET]
	
	
	move.b	#0xFE,(a0)                      	| [$27e1: LD      (HL),$FE]
	jcs	l_27e9                             	| [$27e4: JP      C,$27E9]
	move.b	#0x40,(a0)                      	| [$27e7: LD      (HL),$40]
l_27e9:
	subq.b	#1,(a0)                         	| [$27e9: DEC     (HL)]
	lea	unknown_438C,a0                        	| [$27ea: LD      L,$8C]
	move.b	#0x8F,(a0)                      	| [$27ec: LD      (HL),$8F]
	rts                                    	| [$27ee: RET]

l_3000:
	lea	unknown_4393,a0                	| [$3000: LD      HL,unknown_4393]
	move.b	(a0),d0                         	| [$3003: LD      A,(HL)]
	addq.b	#1,(a0)                         	| [$3004: INC     (HL)]
	and.b	#0x07,d0                         	| [$3005: AND     $07]
	lea	jump_table_3018,a0             	| [$3007: LD      HL,jump_table_3018]
	rol.b	#1,d0                            	| [$300a: RLCA]
	add.b	d6,d0                            	| [$300b: ADD     A,L]
	move.b	d0,d6                           	| [$300c: LD      L,A]
	move.b	(a0),d0                         	| [$300d: LD      A,(HL)]
	addq.w	#1,a0                           	| [$300e: INC     HL]
	move.b	(a0),d6                         	| [$300f: LD      L,(HL)]
	move.b	d0,d5                           	| [$3010: LD      H,A]
	jra	(a0)                               	| [$3011: JP      (HL)]
l_3012:
	rts                                    	| [$3012: RET]


jump_table_3018:
	.long	l_3264
	.long	l_3028
	.long	l_30ba
	.long	l_3124
	.long	l_315a
	.long	l_31b4
	.long	l_322c
	.long	l_3012

l_3028:
	lea	unknown_4357,a0                	| [$3028: LD      HL,unknown_4357]
	move.b	(a0),d0                         	| [$302b: LD      A,(HL)]
	cmp.b	#0x03,d0                         	| [$302c: CP      $03]
	bcs.b	0f                               	| [...]
	rts                                    	| [$302e: RET     NC] [...]
0:
	lea	unknown_4350,a0                        	| [$302f: LD      L,$50]
	move.b	(a0),d0                         	| [$3031: LD      A,(HL)]
	cmp.b	#0x04,d0                         	| [$3032: CP      $04]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3034: RET     NC] [...]
0:
	lea	unknown_4358,a0                        	| [$3035: LD      L,$58]
	move.b	(a0),d0                         	| [$3037: LD      A,(HL)]
	                               	| [$3038: AND     A]
	jeq	l_305c                             	| [$3039: JP      Z,$305C]
	subq.b	#1,(a0)                         	| [$303c: DEC     (HL)]
	beq.b	0f                               	| [...]
	rts                                    	| [$303d: RET     NZ] [...]
0:
	                           	| [$303e: DEC     L]
 	addq.b	#1,-(a0)                         	| [$303f: INC     (HL)]
	lea	unknown_4350,a0                        	| [$3040: LD      L,$50]
	move.b	#0x04,(a0)                      	| [$3042: LD      (HL),$04]
	lea	unknown_4353,a0                        	| [$3044: LD      L,$53]
	move.b	#0x10,(a0)+                      	| [$3046: LD      (HL),$10]
	                           	| [$3048: INC     L]
	move.b	#0x50,(a0)                      	| [$3049: LD      (HL),$50]
	lea	unknown_4351,a0                        	| [$304b: LD      L,$51]
	move.b	#0x2E,(a0)+                      	| [$304d: LD      (HL),$2E]
	                           	| [$304f: INC     L]
 	clr.b	(a0)                             	| [$3050: LD      (HL),$00]
	move.b	player_ship_x_43C2,d0           	| [$3052: LD      A,(player_ship_x_43C2)]
	ror.b	#1,d0                            	| [$3055: RRCA]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3056: RET     C] [...]
0:
	move.b	#0x40,(a0)                      	| [$3057: LD      (HL),$40]
	rts                                    	| [$3059: RET]
l_305c:
	jbsr	l_3074                            	| [$305c: CALL    $3074]
	lea	unknown_4357,a0                	| [$305f: LD      HL,unknown_4357]
	move.b	(a0),d0                         	| [$3062: LD      A,(HL)]
	rol.b	#2,d0                            	| [$3063: RLCA] * 2
	                                    	| [$3065: NOP]
	                                    	| [$3066: NOP]
	add.b	d2,d0                            	| [$3067: ADD     A,C]
	addq.b	#0x07,d0                        	| [$3068: ADD     $07]
	lea	unknown_4358,a0                        	| [$306a: LD      L,$58]
	move.b	d0,(a0)                         	| [$306c: LD      (HL),A]
	rts                                    	| [$306d: RET]

l_3074:
	lea	current_stage_43B8,a0          	| [$3074: LD      HL,current_stage_43B8]
	move.b	(a0),d0                         	| [$3077: LD      A,(HL)]
	ror.b	#1,d0                            	| [$3078: RRCA]
	                                    	| [$3079: NOP]
	and.b	#0x07,d0                         	| [$307a: AND     $07]
	move.b	d0,d1                           	| [$307c: LD      B,A]
	move.b	#0x07,d0                        	| [$307d: LD      A,$07]
	sub.b	d1,d0                            	| [$307f: SUB     B]
	move.b	d0,d2                           	| [$3080: LD      C,A]
	move.b	(a0),d0                         	| [$3081: LD      A,(HL)]
	cmp.b	#0x80,d0                         	| [$3082: CP      $80]
	jcs	l_3089                             	| [$3084: JP      C,$3089]
	move.b	#0x70,d0                        	| [$3087: LD      A,$70]
l_3089:
	ror.b	#1,d0                            	| [$3089: RRCA]
	ror.b	#3,d0                            	| [$308a: RRCA] * 3
	and.b	#0x07,d0                         	| [$308d: AND     $07]
	move.b	d0,d1                           	| [$308f: LD      B,A]
	move.b	#0x07,d0                        	| [$3090: LD      A,$07]
	sub.b	d1,d0                            	| [$3092: SUB     B]
	add.b	d2,d0                            	| [$3093: ADD     A,C]
	move.b	d0,d2                           	| [$3094: LD      C,A]
	move.b	nb_to_kill_before_stage_completed_43BA,d0	| [$3095: LD      A,(nb_to_kill_before_stage_completed_43BA)]
	subq.b	#0x05,d0                        	| [$3098: SUB     $05]
	jcc	l_309f                             	| [$309a: JP      NC,$309F]
	move.b	#0x10,d0                        	| [$309d: LD      A,$10]
l_309f:
	add.b	d2,d0                            	| [$309f: ADD     A,C]
	move.b	d0,d2                           	| [$30a0: LD      C,A]
	jbsr	l_30aa                            	| [$30a1: CALL    $30AA]
	and.b	#0x07,d0                         	| [$30a4: AND     $07]
	add.b	d2,d0                            	| [$30a6: ADD     A,C]
	move.b	d0,d2                           	| [$30a7: LD      C,A]
	rts                                    	| [$30a8: RET]
l_30aa:
	lea	unknown_439B,a0                	| [$30aa: LD      HL,unknown_439B]
	move.b	(a0),d0                         	| [$30ad: LD      A,(HL)]
	rol.b	#3,d0                            	| [$30ae: RLCA] * 3
	and.b	#0x07,d0                         	| [$30b1: AND     $07]
	lea	unknown_43C2,a0                        	| [$30b3: LD      L,$C2]
	add.b	(a0),d0                          	| [$30b5: ADD     A,(HL)]
	and.b	#0x0F,d0                         	| [$30b6: AND     $0F]
	rts                                    	| [$30b8: RET]

l_30ba:
	lea	unknown_4358,a0                	| [$30ba: LD      HL,unknown_4358]
	jbsr	l_30da                            	| [$30bd: CALL    $30DA]
	jbsr	l_30da                            	| [$30c0: CALL    $30DA]
	jbsr	l_30da                            	| [$30c3: CALL    $30DA]
	lea	unknown_4350,a0                        	| [$30c6: LD      L,$50]
	move.b	(a0),d0                         	| [$30c8: LD      A,(HL)]
	                               	| [$30c9: AND     A]
	beq.b	0f                               	| [...]
	rts                                    	| [$30ca: RET     NZ] [...]
0:
	lea	unknown_4355,a0                        	| [$30cb: LD      L,$55]
	move.b	(a0),d0                         	| [$30cd: LD      A,(HL)]
	                               	| [$30ce: AND     A]
	jeq	l_30e4                             	| [$30cf: JP      Z,$30E4]
	subq.b	#1,(a0)                         	| [$30d2: DEC     (HL)]
	beq.b	0f                               	| [...]
	rts                                    	| [$30d3: RET     NZ] [...]
0:
	lea	unknown_4350,a0                        	| [$30d4: LD      L,$50]
	move.b	#0x01,(a0)                      	| [$30d6: LD      (HL),$01]
	rts                                    	| [$30d8: RET]
	cmp.b	#0x2C,d0                         	| [$30d9: CP      $2C]
	move.b	(a0),d0                         	| [$30db: LD      A,(HL)]
	                               	| [$30dc: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$30dd: RET     Z] [...]
0:
	subq.b	#1,(a0)                         	| [$30de: DEC     (HL)]
	rts                                    	| [$30df: RET]
	move.b	(a0),d0                         	| [$30e0: LD      A,(HL)]
	cmp.b	#0x01,d0                         	| [$30e1: CP      $01]
	bcs.b	0f                               	| [...]
	rts                                    	| [$30e3: RET     NC] [...]
0:
l_30e4:
	jbsr	l_3074                            	| [$30e4: CALL    $3074]
	lea	unknown_439A,a0                	| [$30e7: LD      HL,unknown_439A]
	move.b	(a0),d0                         	| [$30ea: LD      A,(HL)]
	cmp.b	#0x10,d0                         	| [$30eb: CP      $10]
	jcs	l_30f2                             	| [$30ed: JP      C,$30F2]
	move.b	#0x0F,d0                        	| [$30f0: LD      A,$0F]
l_30f2:
	move.b	d0,d1                           	| [$30f2: LD      B,A]
	move.b	#0x0F,d0                        	| [$30f3: LD      A,$0F]
	sub.b	d1,d0                            	| [$30f5: SUB     B]
	add.b	d2,d0                            	| [$30f6: ADD     A,C]
	move.b	d0,d2                           	| [$30f7: LD      C,A]
	move.b	#0x01,d1                        	| [$30f8: LD      B,$01]
	lea	unknown_4358,a0                        	| [$30fa: LD      L,$58]
	jbsr	l_3112                            	| [$30fc: CALL    $3112]
	jbsr	l_3112                            	| [$30ff: CALL    $3112]
	jbsr	l_3112                            	| [$3102: CALL    $3112]
	move.b	d2,d0                           	| [$3105: LD      A,C]
	ror.b	#2,d0                            	| [$3106: RRCA] * 2
	and.b	#0x3F,d0                         	| [$3108: AND     $3F]
	addq.b	#0x01,d0                        	| [$310a: ADD     $01]
	lea	unknown_4355,a0                        	| [$310c: LD      L,$55]
	move.b	d0,(a0)                         	| [$310e: LD      (HL),A]
	rts                                    	| [$310f: RET]
	lea	game_rom+0x2C50,a0                      	| [$3110: LD      HL,$2C50]
	move.b	(a0),d0                         	| [$3113: LD      A,(HL)]
	                               	| [$3114: AND     A]
	beq.b	0f                               	| [...]
	rts                                    	| [$3115: RET     NZ] [...]
0:
	move.b	d2,d0                           	| [$3116: LD      A,C]
	ror.b	#1,d0                            	| [$3117: RRCA]
	and.b	#0x7F,d0                         	| [$3118: AND     $7F]
	move.b	d0,d2                           	| [$311a: LD      C,A]
	move.b	d1,d0                           	| [$311b: LD      A,B]
	                               	| [$311c: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$311d: RET     Z] [...]
0:
	subq.b	#1,d1                           	| [$311e: DEC     B]
	move.b	#0x0C,(a0)                      	| [$311f: LD      (HL),$0C]
	rts                                    	| [$3121: RET]
	add.b	(a0),d0                          	| [$3122: ADD     A,(HL)]
	move.b	d0,d1                           	| [$3123: LD      B,A]
l_3124:
	lea	unknown_4350,a0                	| [$3124: LD      HL,unknown_4350]
	move.b	(a0),d0                         	| [$3127: LD      A,(HL)]
	cmp.b	#0x01,d0                         	| [$3128: CP      $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$312a: RET     NZ] [...]
0:
	move.b	#0x02,(a0)                      	| [$312b: LD      (HL),$02]
	lea	unknown_43B8,a0                        	| [$312d: LD      L,$B8]
	move.b	(a0),d0                         	| [$312f: LD      A,(HL)]
	ror.b	#2,d0                            	| [$3130: RRCA] * 2
	and.b	#0x0F,d0                         	| [$3132: AND     $0F]
	addq.b	#0x05,d0                        	| [$3134: ADD     $05]
	cmp.b	#0x11,d0                         	| [$3136: CP      $11]
	jcs	l_313d                             	| [$3138: JP      C,$313D]
	move.b	#0x05,d0                        	| [$313b: LD      A,$05]
l_313d:
	lea	unknown_4357,a0                        	| [$313d: LD      L,$57]
	sub.b	(a0),d0                          	| [$313f: SUB     (HL)]
	move.b	d0,d1                           	| [$3140: LD      B,A]
	jbsr	l_30aa                            	| [$3141: CALL    $30AA]
	addq.b	#1,d0                           	| [$3144: INC     A]
	cmp.b	d1,d0                            	| [$3145: CP      B]
	jcs	l_314b                             	| [$3146: JP      C,$314B]
	move.b	#0x01,d0                        	| [$3149: LD      A,$01]
l_314b:
	lea	unknown_4353,a0                        	| [$314b: LD      L,$53]
	move.b	d0,(a0)                         	| [$314d: LD      (HL),A]
	rts                                    	| [$314e: RET]

l_315a:
	lea	unknown_4350,a0                	| [$315a: LD      HL,unknown_4350]
	move.b	(a0),d0                         	| [$315d: LD      A,(HL)]
	cmp.b	#0x02,d0                         	| [$315e: CP      $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$3160: RET     NZ] [...]
0:
	jbsr	l_30aa                            	| [$3161: CALL    $30AA]
	nop                                    	| [$3164: NOP]
	move.b	d0,d1                           	| [$3165: LD      B,A]
	rol.b	#1,d0                            	| [$3166: RLCA]
	add.b	#0x50,d0                         	| [$3167: ADD     $50]
	move.b	d0,d6                           	| [$3169: LD      L,A]
	move.b	#0x4B,d5                        	| [$316a: LD      H,$4B]
	move.b	d1,d0                           	| [$316c: LD      A,B]
	rol.b	#2,d0                            	| [$316d: RLCA] * 2
	add.b	#0x70,d0                         	| [$316f: ADD     $70]
	move.b	d0,d4                           	| [$3171: LD      E,A]
	move.b	#0x4B,d3                        	| [$3172: LD      D,$4B]
	move.b	#0x10,d2                        	| [$3174: LD      C,$10]
	move.b	d2,d0                           	| [$3176: LD      A,C]
	sub.b	d1,d0                            	| [$3177: SUB     B]
	move.b	d0,d1                           	| [$3178: LD      B,A]
l_3179:
	jbsr	l_3192                            	| [$3179: CALL    $3192]
	addq.w	#4,a1                           	| [$317c: INC     DE] * 4
	addq.w	#2,a0                           	| [$3180: INC     HL] * 2
	subq.b	#1,d1                           	| [$3182: DEC     B]
	jne	l_318a                             	| [$3183: JP      NZ,$318A]
	move.b	#0x70,d4                        	| [$3186: LD      E,$70]
	lea	unknown_4350,a0                        	| [$3188: LD      L,$50]
l_318a:
	subq.w	#1,d2                           	| [$318a: DEC     C]
	jne	l_3179                             	| [$318b: JP      NZ,$3179]
	rts                                    	| [$318e: RET]

l_3192:
	move.b	(a1),d0                         	| [$3192: LD      A,(DE)]
	and.b	#0x08,d0                         	| [$3193: AND     $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$3195: RET     Z] [...]
0:
	move.b	unknown_4394,d0                 	| [$3196: LD      A,(unknown_4394)]
	cmp.b	(a0),d0                          	| [$3199: CP      (HL)]
	beq.b	0f                               	| [...]
	rts                                    	| [$319a: RET     NZ] [...]
0:
	move.b	unknown_4356,d0                 	| [$319b: LD      A,(unknown_4356)]
	addq.w	#1,a0                           	| [$319e: INC     L]
	move.b	(a0),d1                         	| [$319f: LD      B,(HL)]
	subq.w	#1,a0                           	| [$31a0: DEC     L]
 	cmp.b	d1,d0                            	| [$31a1: CP      B]
	beq.b	0f                               	| [...]
	rts                                    	| [$31a2: RET     NZ] [...]
0:
	move.b	d6,d0                           	| [$31a3: LD      A,L]
	move.b	d0,unknown_4354                 	| [$31a4: LD      (unknown_4354),A]
	move.b	#0x03,d0                        	| [$31a7: LD      A,$03]
	move.b	d0,unknown_4350                 	| [$31a9: LD      (unknown_4350),A]
	move.l	(sp)+,a0                        	| [$31ac: POP     HL]
	rts                                    	| [$31ad: RET]

l_31b4:
	move.b	unknown_4350,d0                 	| [$31b4: LD      A,(unknown_4350)]
	cmp.b	#0x03,d0                         	| [$31b7: CP      $03]
	beq.b	0f                               	| [...]
	rts                                    	| [$31b9: RET     NZ] [...]
0:
	move.b	unknown_4354,d0                 	| [$31ba: LD      A,(unknown_4354)]
	sub.b	#0x50,d0                         	| [$31bd: SUB     $50]
	rol.b	#1,d0                            	| [$31bf: RLCA]
	add.b	#0x72,d0                         	| [$31c0: ADD     $72]
	move.b	d0,d6                           	| [$31c2: LD      L,A]
	move.b	#0x4B,d5                        	| [$31c3: LD      H,$4B]
	move.b	(a0)+,d1                         	| [$31c5: LD      B,(HL)]
	                           	| [$31c6: INC     L]
	move.b	(a0),d3                         	| [$31c7: LD      D,(HL)]
	move.b	player_ship_x_43C2,d0           	| [$31c8: LD      A,(player_ship_x_43C2)]
	move.b	#0x04,d2                        	| [$31cb: LD      C,$04]
	cmp.b	d1,d0                            	| [$31cd: CP      B]
	jcc	l_31d6                             	| [$31ce: JP      NC,$31D6]
	move.b	d0,d2                           	| [$31d1: LD      C,A]
	move.b	d1,d0                           	| [$31d2: LD      A,B]
	move.b	d2,d1                           	| [$31d3: LD      B,C]
	clr.b	d2                               	| [$31d4: LD      C,$00]
l_31d6:
	sub.b	d1,d0                            	| [$31d6: SUB     B]
	rol.b	#3,d0                            	| [$31d7: RLCA] * 3
	and.b	#0x07,d0                         	| [$31da: AND     $07]
	                        	| [$31dc: ADD     $00]
	move.b	d0,d6                           	| [$31de: LD      L,A]
	move.b	#0x33,d5                        	| [$31df: LD      H,$33]
	bsr		load_ram_in_a0_from_d5d6
	move.b	(a0),d0                         	| [$31e1: LD      A,(HL)]
	add.b	d2,d0                            	| [$31e2: ADD     A,C]
	rol.b	#2,d0                            	| [$31e3: RLCA] * 2
	move.b	d0,d2                           	| [$31e5: LD      C,A]
														| [$31e6: NOP]
														| [$31e7: NOP]
														| [$31e8: NOP]
	move.b	unknown_4357,d0                 	| [$31e9: LD      A,(unknown_4357)]
	move.b	d0,d1                           	| [$31ec: LD      B,A]
	jbsr	l_3210                            	| [$31ed: CALL    $3210]
	move.b	d2,d0                           	| [$31f0: LD      A,C]
	add.b	d1,d0                            	| [$31f1: ADD     A,B]
	add.b	#0x10,d0                         	| [$31f2: ADD     $10]
	move.b	d0,d6                           	| [$31f4: LD      L,A]
	move.b	#0x33,d5                        	| [$31f5: LD      H,$33]
	bsr		load_ram_in_a0_from_d5d6
	move.b	(a0),d2                         	| [$31f7: LD      C,(HL)]
	jbsr	l_30aa                            	| [$31f8: CALL    $30AA]
	and.b	#0x06,d0                         	| [$31fb: AND     $06]
	add.b	d2,d0                            	| [$31fd: ADD     A,C]
	move.b	d0,d6                           	| [$31fe: LD      L,A]
	move.b	#0x33,d5                        	| [$31ff: LD      H,$33]
	bsr		load_ram_in_a0_from_d5d6
	move.b	(a0)+,d0                         	| [$3201: LD      A,(HL)]
	                           	| [$3202: INC     L]
 	move.b	(a0),d1                         	| [$3203: LD      B,(HL)]
	lea	unknown_4350,a0                	| [$3204: LD      HL,unknown_4350]
	move.b	#0x05,(a0)+                      	| [$3207: LD      (HL),$05]
	                           	| [$3209: INC     L]
 	move.b	d0,(a0)+                         	| [$320a: LD      (HL),A]
	                           	| [$320b: INC     L]
	move.b	d1,(a0)                         	| [$320c: LD      (HL),B]
	rts                                    	| [$320d: RET]
l_3210:
	move.b	unknown_4353,d0                 	| [$3210: LD      A,(unknown_4353)]
	cmp.b	#0x01,d0                         	| [$3213: CP      $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$3215: RET     NZ] [...]
0:
	move.b	d3,d0                           	| [$3216: LD      A,D]
	clr.b	d1                               	| [$3217: LD      B,$00]
	cmp.b	#0x58,d0                         	| [$3219: CP      $58]
	bcc.b	0f                               	| [...]
	rts                                    	| [$321b: RET     C] [...]
0:
	move.b	#0x01,d1                        	| [$321c: LD      B,$01]
	cmp.b	#0x78,d0                         	| [$321e: CP      $78]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3220: RET     C] [...]
0:
	move.b	#0x02,d1                        	| [$3221: LD      B,$02]
	cmp.b	#0x98,d0                         	| [$3223: CP      $98]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3225: RET     C] [...]
0:
	move.b	#0x03,d1                        	| [$3226: LD      B,$03]
	rts                                    	| [$3228: RET]
	beq.b	0f                               	| [...]
	rts                                    	| [$3229: RET     NZ] [...]
0:
	lea	game_rom+0x3A50,a0                      	| [$322a: LD      HL,$3A50]
	move.b	d1,d3                           	| [$322d: LD      D,B]
	move.b	d4,d1                           	| [$322e: LD      B,E]
	cmp.b	#0x04,d0                         	| [$322f: CP      $04]
	beq.b	0f                               	| [...]
	rts                                    	| [$3231: RET     NZ] [...]
0:
	lea	unknown_4B50,a0                	| [$3232: LD      HL,unknown_4B50]
	lea	unknown_4B70,a1                	| [$3235: LD      DE,unknown_4B70]
	move.b	unknown_4356,d0                 	| [$3238: LD      A,(unknown_4356)]
	move.b	d0,d2                           	| [$323b: LD      C,A]
	move.b	unknown_4394,d0                 	| [$323c: LD      A,(unknown_4394)]
	move.b	d0,d1                           	| [$323f: LD      B,A]
l_3240:
	move.b	(a1),d0                         	| [$3240: LD      A,(DE)]
	and.b	#0x08,d0                         	| [$3241: AND     $08]
	jeq	l_324e                             	| [$3243: JP      Z,$324E]
	move.b	(a0),d0                         	| [$3246: LD      A,(HL)]
	cmp.b	d1,d0                            	| [$3247: CP      B]
	beq.b	0f                               	| [...]
	rts                                    	| [$3248: RET     NZ] [...]
0:
	                           	| [$3249: INC     L]
	move.b	(1,a0),d0                         	| [$324a: LD      A,(HL)]
	                           	| [$324b: DEC     L]
	cmp.b	d2,d0                            	| [$324c: CP      C]
	beq.b	0f                               	| [...]
	rts                                    	| [$324d: RET     NZ] [...]
0:
l_324e:
	addq.w	#2,a0                           	| [$324e: INC     L]
	                           	| [$324f: INC     L]
	                           	| [$3250: LD      A,E]
	addq.w	#0x04,a1                        	| [$3251: ADD     $04]
	                           	| [$3253: LD      E,A]
	cmp.l	#unknown_4BB0,a1                         	| [$3254: CP      $B0]
	jne	l_3240                             	| [$3256: JP      NZ,$3240]
	move.b	#0x06,d0                        	| [$3259: LD      A,$06]
	move.b	d0,unknown_4350                 	| [$325b: LD      (unknown_4350),A]
	rts                                    	| [$325e: RET]
	
	* not reached???
	addq.b	#1,d0                           	| [$325f: INC     A]
	and.b	#0x0F,d0                         	| [$3260: AND     $0F]
	move.b	d0,(a0)                         	| [$3262: LD      (HL),A]
	move.b	#0x21,d6                        	| [$3263: LD      L,$21]
	sub.b	d6,d0                            	| [$3265: SUB     L]
	move.b	d4,d1                           	| [$3266: LD      B,E]
	move.b	(a0),d0                         	| [$3267: LD      A,(HL)]
	move.b	d0,unknown_4356                 	| [$3268: LD      (unknown_4356),A]
	addq.b	#1,d0                           	| [$326b: INC     A]
	and.b	#0x0F,d0                         	| [$326c: AND     $0F]
	move.b	d0,(a0)                         	| [$326e: LD      (HL),A]
	lea	unknown_4350,a0                        	| [$326f: LD      L,$50]
	move.b	(a0),d0                         	| [$3271: LD      A,(HL)]
	cmp.b	#0x05,d0                         	| [$3272: CP      $05]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3274: RET     C] [...]
0:
	clr.b	(a0)                             	| [$3275: LD      (HL),$00]
	lea	unknown_4353,a0                        	| [$3277: LD      L,$53]
	move.b	(a0),d2                         	| [$3279: LD      C,(HL)]
	addq.w	#1,a0                           	| [$327a: INC     L]
	move.w	#0x4B00,d7
	move.b	(a0),d7                         	| [$327b: LD      L,(HL)]
	
	                        	| [$327c: LD      H,$4B]
	move.b	unknown_4356,d0                 	| [$327e: LD      A,(unknown_4356)]
	move.b	d0,d3                           	| [$3281: LD      D,A]
	move.b	unknown_4394,d0                 	| [$3282: LD      A,(unknown_4394)]
	move.b	d0,d4                           	| [$3285: LD      E,A]
	move.b	d6,d0                           	| [$3286: LD      A,L]
	sub.b	#0x50,d0                         	| [$3287: SUB     $50]
	ror.b	#1,d0                            	| [$3289: RRCA]
	move.b	d0,d1                           	| [$328a: LD      B,A]
	move.b	#0x10,d0                        	| [$328b: LD      A,$10]
	sub.b	d1,d0                            	| [$328d: SUB     B]
	move.b	d0,d1                           	| [$328e: LD      B,A]
l_328f:
	jbsr	osd_r_videoram                         	| [$328f: LD      A,(HL)]
	addq.w	#1,d7                           	| [$3290: INC     L]
	cmp.b	d4,d0                            	| [$3291: CP      E]
	jne	l_32a4                             	| [$3292: JP      NZ,$32A4]
	jbsr	osd_r_videoram                         	| [$3295: LD      A,(HL)]
	cmp.b	d3,d0                            	| [$3296: CP      D]
	jne	l_32a4                             	| [$3297: JP      NZ,$32A4]
	subq.w	#1,d7                           	| [$329a: DEC     L]
	move.b	unknown_4351,d0                 	| [$329b: LD      A,(unknown_4351)]
	jbsr	osd_w_videoram                         	| [$329e: LD      (HL),A]
	addq.w	#1,d7                           	| [$329f: INC     L]
	move.b	unknown_4352,d0                 	| [$32a0: LD      A,(unknown_4352)]
	move.b	d0,(a0)                         	| [$32a3: LD      (HL),A]
l_32a4:
	addq.w	#1,d7                           	| [$32a4: INC     L]
	subq.b	#1,d1                           	| [$32a5: DEC     B]
	jne	l_32ab                             	| [$32a6: JP      NZ,$32AB]
	lea	unknown_4350,a0                        	| [$32a9: LD      L,$50]
l_32ab:
	subq.w	#1,d2                           	| [$32ab: DEC     C]
	jne	l_328f                             	| [$32ac: JP      NZ,$328F]
	rts                                    	| [$32af: RET]

l_32b0:
	lea	unknown_4350,a0                	| [$32b0: LD      HL,unknown_4350]
	move.b	#0x30,d1                        	| [$32b3: LD      B,$30]
	jbsr	clear_area_05D8                   	| [$32b5: CALL    clear_area_05D8]
	lea	unknown_439A,a0                        	| [$32b8: LD      L,$9A]
	move.b	#0x04,d1                        	| [$32ba: LD      B,$04]
	jbsr	clear_area_05D8                   	| [$32bc: CALL    clear_area_05D8]
	move.b	unknown_43BB,d0                 	| [$32bf: LD      A,(unknown_43BB)]
	                               	| [$32c2: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$32c3: RET     Z] [...]
0:
	rol.b	#3,d0                            	| [$32c4: RLCA] * 3
	move.b	d0,d2                           	| [$32c7: LD      C,A]
	lea	unknown_4B70,a0                	| [$32c8: LD      HL,unknown_4B70]
	move.b	#0x40,d1                        	| [$32cb: LD      B,$40]
	jbsr	clear_area_05D8                   	| [$32cd: CALL    clear_area_05D8]
	move.b	#0x4B,d3                        	| [$32d0: LD      D,$4B]
	move.b	#0x3F,d5                        	| [$32d2: LD      H,$3F]
	move.b	#0x40,d0                        	| [$32d4: LD      A,$40]
	sub.b	d2,d0                            	| [$32d6: SUB     C]
	add.b	#0x70,d0                         	| [$32d7: ADD     $70]
	move.b	d0,d4                           	| [$32d9: LD      E,A]
	add.b	#0x10,d0                         	| [$32da: ADD     $10]
	move.b	d0,d6                           	| [$32dc: LD      L,A]
	move.b	d2,d1                           	| [$32dd: LD      B,C]
	move.b	current_stage_43B8,d0           	| [$32de: LD      A,(current_stage_43B8)]
	ror.b	#2,d0                            	| [$32e1: RRCA] * 2
	jcc	l_05e0                             	| [$32e3: JP      NC,$05E0]
	move.b	d6,d0                           	| [$32e6: LD      A,L]
	add.b	#0x40,d0                         	| [$32e7: ADD     $40]
	move.b	d0,d6                           	| [$32e9: LD      L,A]
	jra	l_05e0                             	| [$32ea: JP      $05E0]
	jbsr	l_05e0                            	| [$32ed: CALL    $05E0]
	jra	l_03a0                             	| [$32f0: JP      $03A0]



vultures_level_3400:
	jbsr	l_0876                            	| [$3400: CALL    $0876]
	jbsr	player_shots_vs_vultures_collision_3800	| [$3403: CALL    player_shots_vs_vultures_collision_3800]
	jbsr	l_2600                            	| [$3406: CALL    $2600]
	jbsr	player_shots_vs_vultures_collision_3800	| [$3409: CALL    player_shots_vs_vultures_collision_3800]
	jbsr	l_3980                            	| [$340c: CALL    $3980]
	move.b	unknown_43BB,d0                 	| [$340f: LD      A,(unknown_43BB)]
	                               	| [$3412: AND     A]
	jeq	l_3462                             	| [$3413: JP      Z,$3462]
	cmp.b	#0x04,d0                         	| [$3416: CP      $04]
	jcc	l_3438                             	| [$3418: JP      NC,$3438]
	jbsr	l_3474                            	| [$341b: CALL    $3474]
	jbsr	l_3486                            	| [$341e: CALL    $3486]
	jbsr	l_3560                            	| [$3421: CALL    $3560]
	jbsr	l_3498                            	| [$3424: CALL    $3498]
	jbsr	l_34aa                            	| [$3427: CALL    $34AA]
	move.b	counter_439A+1,d0                    	| [$342a: LD      A,(counter_439A+1)]
	ror.b	#1,d0                            	| [$342d: RRCA]
	jcs	l_0fc0                             	| [$342e: JP      C,$0FC0]
	jbsr	l_3930                            	| [$3431: CALL    $3930]
	jra	l_0c40                             	| [$3434: JP      $0C40]
l_3438:
	move.b	counter_439A+1,d0                    	| [$3438: LD      A,(counter_439A+1)]
	ror.b	#1,d0                            	| [$343b: RRCA]
	jcs	l_3452                             	| [$343c: JP      C,$3452]
	jbsr	l_3474                            	| [$343f: CALL    $3474]
	jbsr	l_3560                            	| [$3442: CALL    $3560]
	jbsr	l_3498                            	| [$3445: CALL    $3498]
	jbsr	l_3930                            	| [$3448: CALL    $3930]
	jra	l_0c40                             	| [$344b: JP      $0C40]

l_3452:
	jbsr	l_3486                            	| [$3452: CALL    $3486]
	jbsr	l_3560                            	| [$3455: CALL    $3560]
	jbsr	l_34aa                            	| [$3458: CALL    $34AA]
	jra	l_0fc0                             	| [$345b: JP      $0FC0]

l_3462:
	move.b	counter_439A+1,d0                    	| [$3462: LD      A,(counter_439A+1)]
	ror.b	#1,d0                            	| [$3465: RRCA]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3466: RET     C] [...]
0:
	jbsr	l_0c40                            	| [$3467: CALL    $0C40]
	jbsr	l_0fc0                            	| [$346a: CALL    $0FC0]
	jra	l_2204                             	| [$346d: JP      $2204]

l_3474:
	lea	unknown_4B70,a0                	| [$3474: LD      HL,unknown_4B70]
l_3477:

	move.l	a0,-(sp)                        	| [$3477: PUSH    HL]
	jbsr	l_34c0                            	| [$3478: CALL    $34C0]
	move.l	(sp)+,a0                        	| [$347b: POP     HL]
	move.b	d6,d0                           	| [$347c: LD      A,L]
	add.b	#0x08,d0                         	| [$347d: ADD     $08]
	move.b	d0,d6                           	| [$347f: LD      L,A]
	cmp.b	#0x90,d0                         	| [$3480: CP      $90]
	jne	l_3477                             	| [$3482: JP      NZ,$3477]
	rts                                    	| [$3485: RET]
l_3486:
	lea	unknown_4B90,a0                	| [$3486: LD      HL,unknown_4B90]
l_3489:

	move.l	a0,-(sp)                        	| [$3489: PUSH    HL]
	jbsr	l_34c0                            	| [$348a: CALL    $34C0]
	move.l	(sp)+,a0                        	| [$348d: POP     HL]
	move.b	d6,d0                           	| [$348e: LD      A,L]
	add.b	#0x08,d0                         	| [$348f: ADD     $08]
	move.b	d0,d6                           	| [$3491: LD      L,A]
	cmp.b	#0xB0,d0                         	| [$3492: CP      $B0]
	jne	l_3489                             	| [$3494: JP      NZ,$3489]
	rts                                    	| [$3497: RET]
l_3498:
	lea	unknown_4B70,a0                	| [$3498: LD      HL,unknown_4B70]
l_349b:

	move.l	a0,-(sp)                        	| [$349b: PUSH    HL]
	jbsr	l_35b0                            	| [$349c: CALL    $35B0]
	move.l	(sp)+,a0                        	| [$349f: POP     HL]
	move.b	d6,d0                           	| [$34a0: LD      A,L]
	add.b	#0x08,d0                         	| [$34a1: ADD     $08]
	move.b	d0,d6                           	| [$34a3: LD      L,A]
	cmp.b	#0x90,d0                         	| [$34a4: CP      $90]
	jne	l_349b                             	| [$34a6: JP      NZ,$349B]
	rts                                    	| [$34a9: RET]
l_34aa:
	lea	unknown_4B90,a0                	| [$34aa: LD      HL,unknown_4B90]
l_34ad:

	move.l	a0,-(sp)                        	| [$34ad: PUSH    HL]
	jbsr	l_35b0                            	| [$34ae: CALL    $35B0]
	move.l	(sp)+,a0                        	| [$34b1: POP     HL]
	move.b	d6,d0                           	| [$34b2: LD      A,L]
	add.b	#0x08,d0                         	| [$34b3: ADD     $08]
	move.b	d0,d6                           	| [$34b5: LD      L,A]
	cmp.b	#0xB0,d0                         	| [$34b6: CP      $B0]
	jne	l_34ad                             	| [$34b8: JP      NZ,$34AD]
	rts                                    	| [$34bb: RET]

l_34c0:
	move.b	(a0),d0                         	| [$34c0: LD      A,(HL)]
	                               	| [$34c1: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$34c2: RET     Z] [...]
0:
	move.b	d0,d1                           	| [$34c3: LD      B,A]
	add.b	#0xC0,d0                         	| [$34c4: ADD     $C0]
	move.b	d0,d4                           	| [$34c6: LD      E,A]
	move.b	#0x3E,d3                        	| [$34c7: LD      D,$3E]
	move.b	(a1),d0                         	| [$34c9: LD      A,(DE)]
	move.b	d0,d2                           	| [$34ca: LD      C,A]
	addq.w	#1,a0                           	| [$34cb: INC     L]
	move.b	(a0)+,d3                         	| [$34cc: LD      D,(HL)]
	                           	| [$34cd: INC     L]
 	move.b	(a0)+,d4                         	| [$34ce: LD      E,(HL)]
	                           	| [$34cf: INC     L]
 	move.b	d1,d0                           	| [$34d0: LD      A,B]
	rol.b	#3,d0                            	| [$34d1: RLCA] * 3
	add.b	(a0),d0                          	| [$34d4: ADD     A,(HL)]
	and.b	#0x7E,d0                         	| [$34d5: AND     $7E]
	move.b	d0,d6                           	| [$34d7: LD      L,A]
	move.b	#0x3E,d5                        	| [$34d8: LD      H,$3E]
	move.b	(a0)+,d0                         	| [$34da: LD      A,(HL)]
	                           	| [$34db: INC     L]
 	move.b	(a0),d6                         	| [$34dc: LD      L,(HL)]
	move.b	d0,d5                           	| [$34dd: LD      H,A]
	bsr		load_ram_in_a0_from_d5d6
l_34de:
	move.b	d3,d0                           	| [$34de: LD      A,D]
	cmp.b	#0x4B,d0                         	| [$34df: CP      $4B]
	jne	l_350c                             	| [$34e1: JP      NZ,$350C]
	move.b	d4,d0                           	| [$34e4: LD      A,E]
	cmp.b	#0x50,d0                         	| [$34e5: CP      $50]
	jcs	l_350c                             	| [$34e7: JP      C,$350C]
	move.b	#0x08,d1                        	| [$34ea: LD      B,$08]
	addq.w	#2,a0                           	| [$34ec: INC     L]
	sub.b	#0x20,d0                         	| [$34ee: SUB     $20]
	move.b	d0,d4                           	| [$34f0: LD      E,A]
	cmp.b	#0x50,d0                         	| [$34f1: CP      $50]
	jcs	l_3509                             	| [$34f3: JP      C,$3509]
	move.b	#0x10,d1                        	| [$34f6: LD      B,$10]
	addq.w	#2,a0                           	| [$34f8: INC     L]
	sub.b	#0x20,d0                         	| [$34fa: SUB     $20]
	move.b	d0,d4                           	| [$34fc: LD      E,A]
	cmp.b	#0x50,d0                         	| [$34fd: CP      $50]
	jcs	l_3509                             	| [$34ff: JP      C,$3509]
	move.b	#0x18,d1                        	| [$3502: LD      B,$18]
	addq.w	#2,a0                           	| [$3504: INC     L]
	sub.b	#0x20,d0                         	| [$3506: SUB     $20]
	move.b	d0,d4                           	| [$3508: LD      E,A]
l_3509:
	move.b	d2,d0                           	| [$3509: LD      A,C]
	add.b	d1,d0                            	| [$350a: ADD     A,B]
	move.b	d0,d2                           	| [$350b: LD      C,A]
l_350c:
	move.b	#0x35,d1                        	| [$350c: LD      B,$35]
	movem.w	d1/d2,-(sp)                    	| [$350e: PUSH    BC]
	move.l	a4,-(sp)                        	| [$350e: PUSH    BC]
	move.w	#0xFFDF,d1                      	| [$350f: LD      BC,$FFDF]
	exg	a1,a0                              	| [$3512: EX      DE,HL]
	clr.b	(a0)+                             	| [$3513: LD      (HL),$00]
										| [$3515: INC     HL]
	clr.b	(a0)                             	| [$3516: LD      (HL),$00]
	add.w	d1,a0                            	| [$3518: ADD     HL,BC]
	rts                                    	| [$3519: RET]

	bsr		copy_a0_a1_d1
	
l_3528:
	bsr		copy_a0_a1_d1

	                       	| [$3528: LD      A,(DE)]
	                       	| [$3529: LD      (HL),A]
	         	| [$352a: INC     DE]
	         	| [$352b: INC     HL]
	                       	| [$352c: LD      A,(DE)]
	                      	| [$352d: LD      (HL),A]
	         	| [$352e: INC     DE]
	                       	| [$352f: ADD     HL,BC]
	bsr		copy_a0_a1_d1
	                       	| [$3530: LD      A,(DE)]
	                       	| [$3531: LD      (HL),A]
	        	| [$3532: INC     DE]
	        	| [$3533: INC     HL]
	                       	| [$3534: LD      A,(DE)]
	                      	| [$3535: LD      (HL),A]
	        	| [$3536: INC     DE]
	                       	| [$3537: ADD     HL,BC]
l_3538:
	bsr		copy_a0_a1_d1                        	| [$3538: LD      A,(DE)]
	                        	| [$3539: LD      (HL),A]
	          	| [$353a: INC     DE]
	          	| [$353b: INC     HL]
	                        	| [$353c: LD      A,(DE)]
	                       	| [$353d: LD      (HL),A]
	          	| [$353e: INC     DE]
	                        	| [$353f: ADD     HL,BC]
l_3540:
	bsr		copy_a0_a1_d1
    	| [$3540: LD      A,(DE)]
    	| [$3541: LD      (HL),A]
    	| [$3542: INC     DE]
    	| [$3543: INC     HL]
    	| [$3544: LD      A,(DE)]
    	| [$3545: LD      (HL),A]
    	| [$3546: INC     DE]
     	| [$3547: ADD     HL,BC]
  
l_3548:
	bsr		copy_a0_a1_d1
	  	| [$3548: LD      A,(DE)]
	  	| [$3549: LD      (HL),A]
	  	| [$354a: INC     DE]
	  	| [$354b: INC     HL]
	  	| [$354c: LD      A,(DE)]
	  	| [$354d: LD      (HL),A]
	  	| [$354e: INC     DE]
	   	| [$354f: ADD     HL,BC]
	bsr		copy_a0_a1_d1
	  	| [$3550: LD      A,(DE)]
	  	| [$3551: LD      (HL),A]
	  	| [$3552: INC     DE]
	  	| [$3553: INC     HL]
	  	| [$3554: LD      A,(DE)]
	  	| [$3555: LD      (HL),A]
	  	| [$3556: INC     DE]
	   	| [$3557: ADD     HL,BC]
 	clr.b	(a0)+                             	| [$3558: LD      (HL),$00]
	                           	| [$355a: INC     HL]
	clr.b	(a0)                             	| [$355b: LD      (HL),$00]
	rts                                    	| [$355d: RET]

l_3560:
	jbsr	l_30aa                            	| [$3560: CALL    $30AA]
	move.b	d0,d1                           	| [$3563: LD      B,A]
	rol.b	#2,d0                            	| [$3564: RLCA] * 2
	move.b	d0,d2                           	| [$3566: LD      C,A]
	rol.b	#2,d0                            	| [$3567: RLCA] * 2
	or.b	d1,d0                             	| [$3569: OR      B]
	move.b	d0,unknown_436F                 	| [$356a: LD      (unknown_436F),A]
	move.b	current_stage_43B8,d0           	| [$356d: LD      A,(current_stage_43B8)]
	cmp.b	#0x40,d0                         	| [$3570: CP      $40]
	jcs	l_3577                             	| [$3572: JP      C,$3577]
	move.b	#0x30,d0                        	| [$3575: LD      A,$30]
l_3577:
	and.b	#0x30,d0                         	| [$3577: AND     $30]
	ror.b	#1,d0                            	| [$3579: RRCA]
	move.b	d0,d1                           	| [$357a: LD      B,A]
	move.b	unknown_43BB,d0                 	| [$357b: LD      A,(unknown_43BB)]
	subq.b	#1,d0                           	| [$357e: DEC     A]
	cmp.b	#0x04,d0                         	| [$357f: CP      $04]
	jcs	l_3586                             	| [$3581: JP      C,$3586]
	move.b	#0x03,d0                        	| [$3584: LD      A,$03]
l_3586:
	rol.b	#1,d0                            	| [$3586: RLCA]
	or.b	d1,d0                             	| [$3587: OR      B]
	move.b	d0,d1                           	| [$3588: LD      B,A]
	move.b	counter_439A,d0                      	| [$3589: LD      A,(counter_439A)]
	rol.b	#2,d0                            	| [$358c: RLCA] * 2
	and.b	#0x20,d0                         	| [$358e: AND     $20]
	or.b	d1,d0                             	| [$3590: OR      B]
	add.b	#0x80,d0                         	| [$3591: ADD     $80]
	move.b	d0,d6                           	| [$3593: LD      L,A]
	move.b	#0x3E,d5                        	| [$3594: LD      H,$3E]
	move.b	(a0)+,d0                         	| [$3596: LD      A,(HL)]
	move.b	d0,unknown_436E                 	| [$3597: LD      (unknown_436E),A]
	                           	| [$359a: INC     L]
 	move.b	(a0),d0                         	| [$359b: LD      A,(HL)]
	add.b	d2,d0                            	| [$359c: ADD     A,C]
	and.b	#0xF8,d0                         	| [$359d: AND     $F8]
	move.b	d0,unknown_436D                 	| [$359f: LD      (unknown_436D),A]
	rts                                    	| [$35a2: RET]

l_35b0:
	move.b	(a0),d0                         	| [$35b0: LD      A,(HL)]
	                               	| [$35b1: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$35b2: RET     Z] [...]
0:
	move.b	d0,d1                           	| [$35b3: LD      B,A]
	addq.w	#4,a0                           	| [$35b4: INC     L]
 	move.b	(a0),d0                         	| [$35b8: LD      A,(HL)]
	                               	| [$35b9: AND     A]
	jeq	l_35be                             	| [$35ba: JP      Z,$35BE]
	subq.b	#1,(a0)                         	| [$35bd: DEC     (HL)]
l_35be:
	* hidden jump table
	exg	a1,a0                              	| [$35be: EX      DE,HL]
	
	move.l	a1,-(sp)                        	| [$35bf: PUSH    DE]
	moveq	#0,d0
	move.b	d1,d0                           	| [$35c0: LD      A,B]
	rol.b	#4,d0                            	| [$35c1: RLCA] * 3, *2 32 bit table
	lea		jump_table_chain_3F00(pc),a0
	add.w	d0,a0                           	| [$35c4: LD      L,A]
	move.l	(a0)+,a4                        	| [$35c5: LD      H,$3F]
	                      	| [$35c7: LD      B,(HL)]
	                      	| [$35c8: INC     HL]
	                      	| [$35c9: LD      C,(HL)]
	move.l	a4,-(sp)                        	| [$35ca: PUSH    BC]
	                           	| [$35cb: INC     HL]
	move.l	(a0)+,a4                         	| [$35cc: LD      B,(HL)]
	                    	| [$35cd: INC     HL]
	                    	| [$35ce: LD      C,(HL)]
	move.l	a4,-(sp)                        	| [$35cf: PUSH    BC]
	                           	| [$35d0: INC     HL]
	move.l	(a0)+,a4                         	| [$35d1: LD      B,(HL)]
	                       	| [$35d2: INC     HL]
	                       	| [$35d3: LD      C,(HL)]
	move.l	a4,-(sp)                        	| [$35d4: PUSH    BC]
	                           	| [$35d5: INC     HL]
	move.l	(a0)+,a4                         	| [$35d6: LD      B,(HL)]
											| [$35d7: INC     HL]
                        	| [$35d8: LD      C,(HL)]
	move.l	a4,-(sp)                        	| [$35d9: PUSH    BC]
	exg	a1,a0                              	| [$35da: EX      DE,HL]
	* start the call chain
	rts                                    	| [$35db: RET]

* this command doesn't have any parameters
command_35e0:	
	addq.w	#2,a0                           	| [$35e0: INC     L]
	move.b	(a0),d0                         	| [$35e2: LD      A,(HL)]
	cmp.b	#0x10,d0                         	| [$35e3: CP      $10]
	jcc	l_3628                             	| [$35e5: JP      NC,$3628]
	move.b	d0,d1                           	| [$35e8: LD      B,A]
	                           	| [$35e9: DEC     L]
	add.b	-(a0),d0                          	| [$35ea: ADD     A,(HL)]
	move.b	d0,(a0)                         	| [$35eb: LD      (HL),A]
	subq.w	#2,a0                           	| [$35ec: DEC     L]
	move.b	d1,d0                           	| [$35ee: LD      A,B]
	add.b	(a0),d0                          	| [$35ef: ADD     A,(HL)]
	move.b	d0,(a0)                         	| [$35f0: LD      (HL),A]
	cmp.b	#0x08,d0                         	| [$35f1: CP      $08]
	jcs	l_366a                             	| [$35f3: JP      C,$366A]
	and.b	#0x07,d0                         	| [$35f6: AND     $07]
	move.b	d0,(a0)                         	| [$35f8: LD      (HL),A]
	                           	| [$35f9: DEC     L]
 	                         	| [$35fa: LD      A,(HL)]
	sub.b	#0x20,-(a0)                         	| [$35fb: SUB     $20]
	                         	| [$35fd: LD      (HL),A]
	jcc	l_3604                             	| [$35fe: JP      NC,$3604]
	                           	| [$3601: DEC     L]
	subq.b	#1,(-1,a0)                         	| [$3602: DEC     (HL)]
	                           	| [$3603: INC     L]
l_3604:
	addq.w	#3,a0                           	| [$3604: INC     L]
	                           	| [$3605: INC     L]
	move.b	(a0),d2                         	| [$3607: LD      C,(HL)]
	addq.w	#2,a0                           	| [$3608: INC     L]
	move.b	(a0),d0                         	| [$360a: LD      A,(HL)]
											| [$360b: DEC     L]
 	move.b	#0x10,-(a0)                      	| [$360c: LD      (HL),$10]
	sub.b	d2,d0                            	| [$360e: SUB     C]
	jeq	l_3672                             	| [$360f: JP      Z,$3672]
	subq.b	#1,d0                           	| [$3612: DEC     A]
	ror.b	#3,d0                            	| [$3613: RRCA] * 3
	and.b	#0x1F,d0                         	| [$3616: AND     $1F]
	cmp.b	d1,d0                            	| [$3618: CP      B]
	addq.b	#1,(a0)                           	| [$3619: INC     A]
										| [$361a: LD      (HL),A]
	bcc.b	0f                               	| [...]
	rts                                    	| [$361b: RET     C] [...]
0:
	move.b	unknown_436E,d0                 	| [$361c: LD      A,(unknown_436E)]
	move.b	d0,(a0)                         	| [$361f: LD      (HL),A]
	cmp.b	d1,d0                            	| [$3620: CP      B]
	bne.b	0f                               	| [...]
	rts                                    	| [$3621: RET     Z] [...]
0:
	addq.b	#1,d1                           	| [$3622: INC     B]
	move.b	d1,(a0)                         	| [$3623: LD      (HL),B]
	rts                                    	| [$3624: RET]

l_3628:
	and.b	#0x0F,d0                         	| [$3628: AND     $0F]
	jeq	l_3744                             	| [$362a: JP      Z,$3744]
	move.b	d0,d1                           	| [$362d: LD      B,A]
	                           	| [$362e: DEC     L]
	move.b	-(a0),d0                         	| [$362f: LD      A,(HL)]
	sub.b	d1,d0                            	| [$3630: SUB     B]
	move.b	d0,(a0)                         	| [$3631: LD      (HL),A]
	subq.w	#2,a0                           	| [$3632: DEC     L]
	move.b	(a0),d0                         	| [$3634: LD      A,(HL)]
	sub.b	d1,d0                            	| [$3635: SUB     B]
	jcc	l_3695                             	| [$3637: JP      NC,$3695]
	move.b	d0,(a0)                         	| [$3636: LD      (HL),A]
	and.b	#0x07,d0                         	| [$363a: AND     $07]
	move.b	d0,(a0)                         	| [$363c: LD      (HL),A]
	subq.w	#1,a0                           	| [$363d: DEC     L]
	                         	| [$363e: LD      A,(HL)]
	add.b	#0x20,(a0)                         	| [$363f: ADD     $20]
	                         	| [$3641: LD      (HL),A]
	jcc	l_3648                             	| [$3642: JP      NC,$3648]
	                           	| [$3645: DEC     L]
	addq.b	#1,(-1,a0)                         	| [$3646: INC     (HL)]
	                           	| [$3647: INC     L]
l_3648:
	addq.w	#3,a0                           	| [$3648: INC     L]
	                           	| [$3649: INC     L] * 2
	move.b	(a0),d0                         	| [$364b: LD      A,(HL)]
	addq.w	#2,a0                           	| [$364c: INC     L]
	sub.b	(a0),d0                          	| [$364e: SUB     (HL)]
	ror.b	#3,d0                            	| [$364f: RRCA] * 3
	and.b	#0x1F,d0                         	| [$3652: AND     $1F]
	subq.w	#1,a0                           	| [$3656: DEC     L]
	move.b	d0,d7
	addq.b	#1,d0                           	| [$3655: INC     A]
	cmp.b	d1,d7                            	| [$3654: CP      B]
	jcs	l_3663                             	| [$3657: JP      C,$3663]
	
	move.b	unknown_436E,d0                 	| [$365a: LD      A,(unknown_436E)]
	cmp.b	d1,d0                            	| [$365d: CP      B]
	jeq	l_3663                             	| [$365e: JP      Z,$3663]
	move.b	d1,d0                           	| [$3661: LD      A,B]
	addq.b	#1,d0                           	| [$3662: INC     A]
l_3663:
	or.b	#0x10,d0                          	| [$3663: OR      $10]
	move.b	d0,(a0)                         	| [$3665: LD      (HL),A]
	rts                                    	| [$3666: RET]
	move.b	d0,(a0)                         	| [$3667: LD      (HL),A]
	rts                                    	| [$3668: RET]

l_366a:
	move.b	d1,d0                           	| [$366a: LD      A,B]
	                               	| [$366b: AND     A]
	beq.b	0f                               	| [...]
	rts                                    	| [$366c: RET     NZ] [...]
0:
	addq.w	#3,a0                           	| [$366d: INC     L]
	addq.b	#1,(a0)                         	| [$3670: INC     (HL)]
	rts                                    	| [$3671: RET]
l_3672:
	                           	| [$3672: DEC     L]
	move.b	-(a0),d1                         	| [$3673: LD      B,(HL)]
	addq.w	#2,a0                           	| [$3674: INC     L]
	move.b	player_ship_x_43C2,d0           	| [$3676: LD      A,(player_ship_x_43C2)]
	and.b	#0xF8,d0                         	| [$3679: AND     $F8]
	cmp.b	d1,d0                            	| [$367b: CP      B]
	jcc	l_3680                             	| [$367c: JP      NC,$3680]
	move.b	d0,d1                           	| [$367f: LD      B,A]
l_3680:
	move.b	unknown_436D,d0                 	| [$3680: LD      A,(unknown_436D)]
	move.b	d0,d2                           	| [$3683: LD      C,A]
	add.b	#0x08,d0                         	| [$3684: ADD     $08]
	move.b	d0,unknown_436D                 	| [$3686: LD      (unknown_436D),A]
	move.b	d1,d0                           	| [$3689: LD      A,B]
	move.b	#0x08,(a0)                      	| [$368b: LD      (HL),$08]
	sub.b	d2,d0                            	| [$368a: SUB     C]
	bcc.b	0f                               	| [...]
	rts                                    	| [$368d: RET     C] [...]
0:
	cmp.b	#0x08,d0                         	| [$368e: CP      $08]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3690: RET     C] [...]
0:
	move.b	d0,(a0)                         	| [$3691: LD      (HL),A]
	rts                                    	| [$3692: RET]

0:
l_3695:
	move.b	d0,(a0)
	addq.w	#2,a0                           	| [$3696: INC     L] * 2
	move.b	(a0),d1                         	| [$3697: LD      B,(HL)]
	addq.w	#2,a0                           	| [$3698: INC     L]
	move.b	(a0),d0                         	| [$369a: LD      A,(HL)]
	cmp.b	d1,d0                            	| [$369b: CP      B]
	beq.b	0f                               	| [...]
	rts                                    	| [$369c: RET     NZ] [...]
0:
	                           	| [$369d: DEC     L]
	clr.b	(-1,a0)                             	| [$369e: LD      (HL),$00]
	                           	| [$36a0: INC     L]
	move.b	player_ship_x_43C2,d0           	| [$36a1: LD      A,(player_ship_x_43C2)]
	and.b	#0xF8,d0                         	| [$36a4: AND     $F8]
	cmp.b	d1,d0                            	| [$36a6: CP      B]
	jcs	l_36ab                             	| [$36a7: JP      C,$36AB]
	move.b	d0,d1                           	| [$36aa: LD      B,A]
l_36ab:
	move.b	unknown_436D,d0                 	| [$36ab: LD      A,(unknown_436D)]
	add.b	#0x08,d0                         	| [$36ae: ADD     $08]
	move.b	d0,unknown_436D                 	| [$36b0: LD      (unknown_436D),A]
	move.b	#0xC8,(a0)                      	| [$36b4: LD      (HL),$C8]
	add.b	d1,d0                            	| [$36b3: ADD     A,B]
	bcc.b	0f                               	| [...]
	rts                                    	| [$36b6: RET     C] [...]
0:
	cmp.b	#0xC8,d0                         	| [$36b7: CP      $C8]
	bcs.b	0f                               	| [...]
	rts                                    	| [$36b9: RET     NC] [...]
0:
	move.b	d0,(a0)                         	| [$36ba: LD      (HL),A]
	rts                                    	| [$36bb: RET]
	move.b	d0,(a0)                         	| [$36bc: LD      (HL),A]
	rts                                    	| [$36bd: RET]

command_36c0:
	move.b	(a0),d0                         	| [$36c0: LD      A,(HL)]
	ror.b	#1,d0                            	| [$36c1: RRCA]
	bcc.b	0f                               	| [...]
	rts                                    	| [$36c2: RET     C] [...]
0:
												| [$36c3: DEC     L]
	move.b	-(a0),d0                         	| [$36c4: LD      A,(HL)]
	addq.b	#1,d0                           	| [$36c5: INC     A]
	and.b	#0x07,d0                         	| [$36c6: AND     $07]
	move.b	d0,(a0)                         	| [$36c8: LD      (HL),A]
	rts                                    	| [$36c9: RET]

end_chained_calls_36cc:
	* drop 2 remaining parameters (0xFFFF)
	addq.w	#8,sp                        	| [$36cc: POP     DE]
	                        	| [$36cd: POP     BC]
	move.l	(sp)+,a0                        	| [$36ce: POP     HL]
	rts                                    	| [$36cf: RET]
	
command_36d2:
	move.l	(sp)+,d3                        	| [$36d2: POP     DE] pops params
	move.l	(sp)+,d1                        	| [$36d3: POP     BC]
	move.l	(sp)+,a0                        	| [$36d4: POP     HL]
	move.b	(a0),d0                         	| [$36d5: LD      A,(HL)]
	                               	| [$36d6: AND     A]
	beq.b	0f                               	| [...]
	rts                                    	| [$36d7: RET     NZ] [...]
0:
	LOAD_D1D2_FROM_D1_16
	LOAD_D3D4_FROM_D3_16
	move.b	d1,(a0)                         	| [$36d8: LD      (HL),B]
	subq.w	#4,a0                           	| [$36d9: DEC     L]
	move.b	d3,(a0)                         	| [$36dd: LD      (HL),D]
	move.b	unknown_4368,d0                 	| [$36de: LD      A,(unknown_4368)]
	or.b	#0x01,d0                          	| [$36e1: OR      $01]
	move.b	d0,unknown_4368                 	| [$36e3: LD      (unknown_4368),A]
	rts                                    	| [$36e6: RET]

command_36ea:
	movem.l	(sp)+,d3                    	| [$36ea: POP     DE] pops params
	movem.l	(sp)+,d1                    	| [$36eb: POP     BC]
	move.l	(sp)+,a0                        	| [$36ec: POP     HL]
	move.b	(a0),d0                         	| [$36ed: LD      A,(HL)]
	                               	| [$36ee: AND     A]
	beq.b	0f                               	| [...]
	rts                                    	| [$36ef: RET     NZ] [...]
0:
	LOAD_D1D2_FROM_D1_16
	LOAD_D3D4_FROM_D3_16
	addq.w	#2,a0                           	| [$36f0: INC     L]
	move.b	(a0),d0                         	| [$36f2: LD      A,(HL)]
	and.b	#0x0F,d0                         	| [$36f3: AND     $0F]
	beq.b	0f                               	| [...]
	rts                                    	| [$36f5: RET     NZ] [...]
0:
	subq.w	#2,a0                           	| [$36f6: DEC     L]
	move.b	d1,(a0)                         	| [$36f8: LD      (HL),B]
	subq.w	#4,a0                           	| [$36f9: DEC     L]
	move.b	d3,(a0)                         	| [$36fd: LD      (HL),D]
	move.b	unknown_4368,d0                 	| [$36fe: LD      A,(unknown_4368)]
	or.b	#0x02,d0                          	| [$3701: OR      $02]
	move.b	d0,unknown_4368                 	| [$3703: LD      (unknown_4368),A]
	rts                                    	| [$3706: RET]

command_370a:
	movem.l	(sp)+,d3                     	| [$370a: POP     DE] pops params
	movem.l	(sp)+,d1					 	| [$370b: POP     BC]
	move.l	(sp)+,a0                        	| [$370c: POP     HL]
	move.b	(a0),d0                         	| [$370d: LD      A,(HL)]
	                               	| [$370e: AND     A]
	beq.b	0f                               	| [...]
	rts                                    	| [$370f: RET     NZ] [...]
0:
	LOAD_D1D2_FROM_D1_16
	LOAD_D3D4_FROM_D3_16
	addq.w	#2,a0                           	| [$3710: INC     L]
	move.b	(a0),d0                         	| [$3712: LD      A,(HL)]
	and.b	#0x0F,d0                         	| [$3713: AND     $0F]
	beq.b	0f                               	| [...]
	rts                                    	| [$3715: RET     NZ] [...]
0:
	subq.w	#2,a0                           	| [$3716: DEC     L]
	move.b	d1,(a0)                         	| [$3718: LD      (HL),B]
	subq.w	#4,a0                           	| [$3719: DEC     L]
	move.b	d3,(a0)                         	| [$371d: LD      (HL),D]
	move.b	unknown_4368,d0                 	| [$371e: LD      A,(unknown_4368)]
	or.b	#0x04,d0                          	| [$3721: OR      $04]
	move.b	d0,unknown_4368                 	| [$3723: LD      (unknown_4368),A]
	move.b	unknown_436F,d0                 	| [$3726: LD      A,(unknown_436F)]
	and.b	d4,d0                            	| [$3729: AND     E]
	and.b	#0xF0,d0                         	| [$372a: AND     $F0]
	beq.b	0f                               	| [...]
	rts                                    	| [$372c: RET     NZ] [...]
0:
	move.b	d4,d0                           	| [$372d: LD      A,E]
	and.b	#0x0F,d0                         	| [$372e: AND     $0F]
	move.b	d0,(a0)                         	| [$3730: LD      (HL),A]
	addq.w	#4,a0                           	| [$3731: INC     L]
	move.b	d2,(a0)                         	| [$3735: LD      (HL),C]
	move.b	unknown_4368,d0                 	| [$3736: LD      A,(unknown_4368)]
	or.b	#0x08,d0                          	| [$3739: OR      $08]
	move.b	d0,unknown_4368                 	| [$373b: LD      (unknown_4368),A]
	rts                                    	| [$373e: RET]

l_3744:
	move.b	#0x11,(a0)                      	| [$3744: LD      (HL),$11]
	                           	| [$3746: DEC     L]
	subq.b	#1,-(a0)                         	| [$3747: DEC     (HL)]
	subq.w	#2,a0                           	| [$3748: DEC     L]
	move.b	#0x07,(a0)                      	| [$374a: LD      (HL),$07]
	                           	| [$374c: DEC     L]
	move.b	-(a0),d0                         	| [$374d: LD      A,(HL)]
	add.b	#0x20,(a0)                         	| [$374e: ADD     $20]
	                         	| [$3750: LD      (HL),A]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3751: RET     NC] [...]
0:
	                          	| [$3752: DEC     L]
	addq.b	#1,-(a0)                         	| [$3753: INC     (HL)]
	rts                                    	| [$3754: RET]

l_3758:
	move.b	(a0),d0                         	| [$3758: LD      A,(HL)]
	                               	| [$3759: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$375a: RET     Z] [...]
0:
	subq.b	#1,(a0)                         	| [$375b: DEC     (HL)]
	jeq	l_37cc                             	| [$375c: JP      Z,$37CC]
	move.b	(a0),d0                         	| [$375f: LD      A,(HL)]
	ror.b	#1,d0                            	| [$3760: RRCA]
	jcc	l_37b0                             	| [$3761: JP      NC,$37B0]
	move.b	#0x0F,d0                        	| [$3764: LD      A,$0F]
	sub.b	(a0),d0                          	| [$3766: SUB     (HL)]
	and.b	#0x0E,d0                         	| [$3767: AND     $0E]
	rol.b	#4,d0                            	| [$3769: RLCA] * 4
	addq.w	#2,a0                           	| [$376d: INC     L]
	move.b	(a0)+,d3                         	| [$376f: LD      D,(HL)]
	                           	| [$3770: INC     L]
	move.b	(a0),d4                         	| [$3771: LD      E,(HL)]
	move.w	d0,-(sp)                        	| [$3772: PUSH    AF]
	movem.w	d3/d4,-(sp)                    	| [$3773: PUSH    DE]
	move.l	a1,-(sp)                        	| [$3773: PUSH    DE]
	move.w	#0xFFDf,d1                      	| [$3774: LD      BC,$FFDF]
	jbsr	l_3796                            	| [$3777: CALL    $3796]
	move.l	(sp)+,a1                        	| [$377a: POP     DE]
	movem.w	(sp)+,d3/d4                    	| [$377a: POP     DE]
	move.w	(sp)+,d0                        	| [$377b: POP     AF]
	illegal  | fishy D5/D6/A0 stuff
	not.b	d0                               	| [$377c: CPL]
	move.b	d0,d6                           	| [$377d: LD      L,A]
	st.b	d5                                	| [$377e: LD      H,$FF]
	addq.w	#1,a0                           	| [$3780: INC     HL]
	add.w	d3,a0                            	| [$3781: ADD     HL,DE]
	exg	d3,a0                              	| [$3782: EX      DE,HL]
	move.w	#0xBFA0,d3                      	| [$3783: LD      HL,$BFA0]
	add.w	d3,a0                            	| [$3786: ADD     HL,DE]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3787: RET     NC] [...]
0:
	exg	d3,a0                              	| [$3788: EX      DE,HL]
	lea	game_rom+0x17D6,a1                      	| [$3789: LD      DE,$17D6]
	clr.b	(a0)+                             	| [$378c: LD      (HL),$00]
											| [$378e: INC     HL]
	clr.b	(a0)                             	| [$378f: LD      (HL),$00]
	add.w	d1,a0                            	| [$3791: ADD     HL,BC]
	jra	l_3540                             	| [$3792: JP      $3540]
l_3796:
	illegal   | fishfty
	clr.b	d5                               	| [$3799: LD      H,$00]
	add.b	#0x60,d6                         	| [$3796: ADD     $60]
                           	| [$3798: LD      L,A]
	jcc	l_379f                             	| [$379b: JP      NC,$379F]
	addq.b	#1,d5                           	| [$379e: INC     H]
l_379f:
	add.w	d3,a0                            	| [$379f: ADD     HL,DE]
	exg	d3,a0                              	| [$37a0: EX      DE,HL]
	move.w	#0xBCC0,a0                      	| [$37a1: LD      HL,$BCC0]
	add.w	d3,a0                            	| [$37a4: ADD     HL,DE]
	bcc.b	0f                               	| [...]
	rts                                    	| [$37a5: RET     C] [...]
0:
	exg	a1,a0                              	| [$37a6: EX      DE,HL]
	lea	game_rom+0x17D0,a1                      	| [$37a7: LD      DE,$17D0]
	jra	l_3540                             	| [$37aa: JP      $3540]

l_37b0:
	addq.w	#1,a0                           	| [$37b0: INC     L]
	move.b	(a0),d0                         	| [$37b1: LD      A,(HL)]
**DAA   | WTF DAA without add... something about scores
	move.b	d0,(a0)+                         	| [$37b3: LD      (HL),A]
	                           	| [$37b4: INC     L]
	move.b	(a0)+,d3                         	| [$37b5: LD      D,(HL)]
	                           	| [$37b6: INC     L]
	move.b	(a0),d4                         	| [$37b7: LD      E,(HL)]
	subq.w	#2,a0                           	| [$37b8: DEC     L]
	                                    	| [$37ba: NOP]
	LOAD_D3_16_FROM_D3D4
	jbsr	SubtractOneRow_0217               	| [$37bb: CALL    SubtractOneRow_0217]
	move.b	#0x20,d0                        	| [$37be: LD      A,$20]
	move.w	d3,d7
	jbsr	osd_w_videoram                         	| [$37c0: LD      (DE),A]
	jbsr	AddOneRow_0210                    	| [$37c1: CALL    AddOneRow_0210]
	move.b	#0x02,d1                        	| [$37c4: LD      B,$02]
	jra	l_00c4                             	| [$37c6: JP      $00C4]

l_37cc:
	addq.w	#3,a0                           	| [$37cc: INC     L]
	                          	| [$37cd: INC     L]
	move.b	(a0),d0                         	| [$37cf: LD      A,(HL)]
	and.b	#0x1F,d0                         	| [$37d0: AND     $1F]
	add.b	#0x20,d0                         	| [$37d2: ADD     $20]
	move.b	d0,d6                           	| [$37d4: LD      L,A]
	move.b	#0x43,d5                        	| [$37d5: LD      H,$43]
	move.w	#0xFFDF,d1                      	| [$37d7: LD      BC,$FFDF]
	move.w	#0x001A,d3                      	| [$37da: LD      DE,$001A] 26
l_37dd:
	move.b	d3,(a0)+                         	| [$37dd: LD      (HL),D]
	                           	| [$37de: INC     HL]
	move.b	d3,(a0)                         	| [$37df: LD      (HL),D]
	add.w	d1,a0                            	| [$37e0: ADD     HL,BC]
 	subq.w	#1,d3                           	| [$37e1: DEC     E]
	jne	l_37dd                             	| [$37e2: JP      NZ,$37DD]
	rts                                    	| [$37e5: RET]

* only 1 shot, 2-shots cheat doesn't work with vultures
player_shots_vs_vultures_collision_3800:
	move.b	player_shot_1_structure_43C4,d0 	| [$3800: LD      A,(player_shot_1_structure_43C4)]
	and.b	#0x08,d0                         	| [$3803: AND     $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$3805: RET     Z] [...]
0:
	move.b	ram_pointer_on_flying_enemies_table_43E6,d0	| [$3806: LD      A,(ram_pointer_on_flying_enemies_table_43E6)]
	add.b	#0x08,d0                         	| [$3809: ADD     $08]
	move.b	d0,d3                           	| [$380b: LD      D,A]
	move.b	unknown_4BD2,d0                 	| [$380c: LD      A,(unknown_4BD2)]
	move.b	d0,d4                           	| [$380f: LD      E,A]
	move.b	unknown_43E7,d0                 	| [$3810: LD      A,(unknown_43E7)]
	and.b	#0xE0,d0                         	| [$3813: AND     $E0]
	move.b	d0,d1                           	| [$3815: LD      B,A]
	move.b	unknown_43E7,d0                 	| [$3816: LD      A,(unknown_43E7)]
	sub.b	d4,d0                            	| [$3819: SUB     E]
	nop                                    	| [$381a: NOP]
	and.b	#0x1F,d0                         	| [$381b: AND     $1F]
	or.b	d1,d0                             	| [$381d: OR      B]
	move.b	d0,d4                           	| [$381e: LD      E,A]
	move.b	(a1),d0                         	| [$381f: LD      A,(DE)]
	sub.b	#0x90,d0                         	| [$3820: SUB     $90]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3822: RET     C] [...]
0:
	move.b	d0,d1                           	| [$3823: LD      B,A]
	move.b	unknown_43C6,d0                 	| [$3824: LD      A,(unknown_43C6)]
	and.b	#0x07,d0                         	| [$3827: AND     $07]
	                        	| [$3829: ADD     $00]
	move.b	d0,d6                           	| [$382b: LD      L,A]
	move.b	#0x3E,d5                        	| [$382c: LD      H,$3E]
	move.b	(a0),d2                         	| [$382e: LD      C,(HL)]
	move.b	d4,d0                           	| [$382f: LD      A,E]
	and.b	#0x0E,d0                         	| [$3830: AND     $0E]
	rol.b	#2,d0                            	| [$3832: RLCA] * 2
	move.b	d0,d4                           	| [$3834: LD      E,A]
	move.b	#0xA8,d0                        	| [$3835: LD      A,$A8]
	sub.b	d4,d0                            	| [$3837: SUB     E]
	move.b	d0,d4                           	| [$3838: LD      E,A]
	move.b	#0x4B,d3                        	| [$3839: LD      D,$4B]
	move.b	d1,d0                           	| [$383b: LD      A,B]
	cmp.b	#0x50,d0                         	| [$383c: CP      $50]
	bcc.b	0f                               	| [...]
	jbsr	l_3844                            	| [$383e: CALL    C,$3844]
0:
	jra	l_391c                             	| [$3841: JP      $391C]
l_3844:
	add.b	#0x60,d0                         	| [$3844: ADD     $60]
	move.b	d0,d6                           	| [$3846: LD      L,A]
	move.b	#0x3B,d5                        	| [$3847: LD      H,$3B]
	move.b	(a0),d0                         	| [$3849: LD      A,(HL)]
	and.b	d2,d0                            	| [$384a: AND     C]
	bne.b	0f                               	| [...]
	rts                                    	| [$384b: RET     Z] [...]
0:
	jbsr	l_38a1                            	| [$384c: CALL    $38A1]
	exg	a1,a0                              	| [$384f: EX      DE,HL]
	move.b	(a0),d0                         	| [$3850: LD      A,(HL)]
	clr.b	(a0)                             	| [$3851: LD      (HL),$00]
	addq.w	#4,a0                           	| [$3853: INC     L]
	move.b	(a0),d3                         	| [$3857: LD      D,(HL)]
	move.l	(sp)+,a0                        	| [$3858: POP     HL]
	lea	unknown_43BB,a0                	| [$3859: LD      HL,unknown_43BB]
	subq.b	#1,(a0)                         	| [$385c: DEC     (HL)]
	cmp.b	#0x0B,d0                         	| [$385d: CP      $0B]
	jcs	l_3894                             	| [$385f: JP      C,$3894]
	move.b	d0,d4                           	| [$3862: LD      E,A]
	st.b	d0                                	| [$3863: LD      A,$FF]
	move.b	d0,unknown_4369                 	| [$3865: LD      (unknown_4369),A]
	lea	unknown_4378,a0                	| [$3868: LD      HL,unknown_4378]
	lea	game_rom+0x1010,a4                      	| [$386b: LD      BC,$1010]
	move.b	d4,d0                           	| [$386e: LD      A,E]
	cmp.b	#0x0F,d0                         	| [$386f: CP      $0F]
	jeq	l_38fb                             	| [$3871: JP      Z,$38FB]
	move.b	d3,d0                           	| [$3874: LD      A,D]
	ror.b	#1,d0                            	| [$3875: RRCA]
	and.b	#0x7C,d0                         	| [$3876: AND     $7C]
	add.b	#0x30,d0                         	| [$3878: ADD     $30]
	move.b	d0,d2                           	| [$387a: LD      C,A]
	move.b	d4,d0                           	| [$387b: LD      A,E]
	cmp.b	#0x0E,d0                         	| [$387c: CP      $0E]
	jeq	l_38fb                             	| [$387e: JP      Z,$38FB]
	move.b	d2,d0                           	| [$3881: LD      A,C]
	ror.b	#1,d0                            	| [$3882: RRCA]
	move.b	d0,d2                           	| [$3883: LD      C,A]
	move.b	d4,d0                           	| [$3884: LD      A,E]
	cmp.b	#0x0C,d0                         	| [$3885: CP      $0C]
	jcc	l_38fb                             	| [$3887: JP      NC,$38FB]
	move.b	d2,d0                           	| [$388a: LD      A,C]
	ror.b	#1,d0                            	| [$388b: RRCA]
	move.b	d0,d2                           	| [$388c: LD      C,A]
	jra	l_38fb                             	| [$388d: JP      $38FB]

l_3894:
	move.b	#0x0D,d1                      	| [$3894: LD      BC,$0D05]
	move.b	#0x05,d2                      	| [$3894: LD      BC,$0D05]
	st.b	d0                                	| [$3897: LD      A,$FF]
	move.b	d0,unknown_4364                 	| [$3899: LD      (unknown_4364),A]
	jra	l_38f8                             	| [$389c: JP      $38F8]

l_38a1:
	movem.w	d3/d4,-(sp)                    	| [$38a1: PUSH    DE]
	move.b	#0x20,d2                        	| [$38a2: LD      C,$20]
	exg	a1,a0                              	| [$38a4: EX      DE,HL]
	addq.w	#1,a0                           	| [$38a5: INC     HL]
	move.b	(a0),d3                         	| [$38a6: LD      D,(HL)]
	addq.w	#1,a0                           	| [$38a7: INC     HL]
	move.b	(a0),d4                         	| [$38a8: LD      E,(HL)]
	move.b	game_rom+0x198C,d0                       	| [$38a9: LD      A,($198C)]
	add.b	#0xde,d0                         	| [$38ac: ADD     $DE]
	move.b	d0,d6                           	| [$38ae: LD      L,A]
	move.b	#0x17,d5                        	| [$38af: LD      H,$17]
	jbsr	l_34de                            	| [$38b1: CALL    $34DE]
	movem.w	(sp)+,d3/d4                    	| [$38b4: POP     DE]
	rts                                    	| [$38b5: RET]
	

l_38bc:
	add.b	#0xB0,d0                         	| [$38bc: ADD     $B0]
	move.b	d0,d6                           	| [$38be: LD      L,A]
	move.b	#0x3B,d5                        	| [$38bf: LD      H,$3B]
	move.b	(a0),d0                         	| [$38c1: LD      A,(HL)]
	and.b	d2,d0                            	| [$38c2: AND     C]
	bne.b	0f                               	| [...]
	rts                                    	| [$38c3: RET     Z] [...]
0:
	jbsr	l_38a1                            	| [$38c4: CALL    $38A1]
	move.b	(a1),d0                         	| [$38c7: LD      A,(DE)]
	sub.b	#0x0B,d0                         	| [$38c8: SUB     $0B]
	jcs	l_38e9                             	| [$38ca: JP      C,$38E9]
	cmp.b	#0x03,d0                         	| [$38cd: CP      $03]
	jcc	l_38e9                             	| [$38cf: JP      NC,$38E9]
	move.b	d0,d1                           	| [$38d2: LD      B,A]

	* transfer/address shifts between DE/HL
	* amounting to just setting HL to DE+5
	lea		(5,a1),a0

												| [$38d3: LD      H,D]
												| [$38d4: LD      A,E]
												| [$38d5: ADD     $05]
												| [$38d7: LD      L,A]
	move.b	unknown_43C6,d0                 	| [$38d8: LD      A,(unknown_43C6)]
	cmp.b	(a0),d0                          	| [$38db: CP      (HL)]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$38dc: RLA]
	rol.b	#2,d0                            	| [$38dd: RLCA] * 2
	and.b	#0x04,d0                         	| [$38df: AND     $04]
	or.b	d1,d0                             	| [$38e1: OR      B]
	add.b	#0xB8,d0                         	| [$38e2: ADD     $B8]
	move.b	d0,d6                           	| [$38e4: LD      L,A]
	move.b	#0x3D,d5                        	| [$38e5: LD      H,$3D]
	bsr		load_rom_in_a0_from_d5d6
	move.b	(a0),d0                         	| [$38e7: LD      A,(HL)]
	move.b	d0,(a1)                         	| [$38e8: LD      (DE),A]
l_38e9:
	st.b	d0                                	| [$38e9: LD      A,$FF]
	move.b	d0,unknown_4366                 	| [$38eb: LD      (unknown_4366),A]
	move.b	#0x07,d1
	move.b	#0x02,d2                      	| [$38ee: LD      BC,$0702]
	                             	| [$38f1: JP      $38F8]

l_38f8:
	lea	unknown_4370,a0                	| [$38f8: LD      HL,unknown_4370]
l_38fb:
	clr.b	d0                               	| [$38fb: XOR     A]
	cmp.b	(a0),d0                          	| [$38fc: CP      (HL)]
	jeq	l_3906                             	| [$38fd: JP      Z,$3906]
	addq.w	#4,a0                           	| [$3900: INC     L]
	cmp.b	(a0),d0                          	| [$3904: CP      (HL)]
	beq.b	0f                               	| [...]
	rts                                    	| [$3905: RET     NZ] [...]
0:
l_3906:
	move.b	d1,(a0)+                         	| [$3906: LD      (HL),B]
	                           	| [$3907: INC     L]
	move.b	d2,(a0)+                         	| [$3908: LD      (HL),C]
	                           	| [$3909: INC     L]
	move.b	ram_pointer_on_flying_enemies_table_43E6,d0	| [$390a: LD      A,(ram_pointer_on_flying_enemies_table_43E6)]
	move.b	d0,(a0)+                         	| [$390d: LD      (HL),A]
	                           	| [$390e: INC     L]
	move.b	unknown_43E7,d0                 	| [$390f: LD      A,(unknown_43E7)]
	move.b	d0,(a0)                         	| [$3912: LD      (HL),A]
	move.b	player_shot_1_structure_43C4,d0 	| [$3913: LD      A,(player_shot_1_structure_43C4)]
	and.b	#0xF7,d0                         	| [$3916: AND     $F7]
	move.b	d0,player_shot_1_structure_43C4 	| [$3918: LD      (player_shot_1_structure_43C4),A]
	rts                                    	| [$391b: RET]
l_391c:
	move.b	d1,d0                           	| [$391c: LD      A,B]
	cmp.b	#0x20,d0                         	| [$391d: CP      $20]
	jcc	l_38bc                             	| [$391f: JP      NC,$38BC]
	rts                                    	| [$3922: RET]
l_3923:
	bne.b	0f                               	| [...]
	rts                                    	| [$3923: RET     Z] [...]
0:
	subq.b	#1,(a0)                         	| [$3924: DEC     (HL)]
	lea	unknown_438D,a0                        	| [$3925: LD      L,$8D]
	move.b	(a0),d0                         	| [$3927: LD      A,(HL)]
	and.b	#0x3F,d0                         	| [$3928: AND     $3F]
	or.b	#0x80,d0                          	| [$392a: OR      $80]
	move.b	d0,(a0)                         	| [$392c: LD      (HL),A]
	rts                                    	| [$392d: RET]
	rts                                    	| [$392e: RET]

l_3930:
	move.b	unknown_4BD2,d0                 	| [$3930: LD      A,(unknown_4BD2)]
	and.w	#0x1E,d0                         	| [$3933: AND     $1E]
	add.b	#0xC0,d0                         	| [$3935: ADD     $C0]
	lea		game_rom+0x3D00,a0
	add.w	d0,a0                           	| [$3937: LD      L,A]
	                        	| [$3938: LD      H,$3D]
	move.b	(a0)+,d4                         	| [$393a: LD      E,(HL)]
	                           	| [$393b: INC     L]
	move.b	(a0),d0                         	| [$393c: LD      L,(HL)]
	lea		game_rom+0x4B00,a0                        	| [$393d: LD      H,$4B]
	add.w	d0,a0
	jbsr	l_3a00                            	| [$393f: CALL    $3A00]
	move.b	unknown_439F,d0                 	| [$3942: LD      A,(unknown_439F)]
	add.b	d3,d0                            	| [$3945: ADD     A,D]
	move.b	d0,d2                           	| [$3946: LD      C,A]
	move.b	unknown_439E,d0                 	| [$3947: LD      A,(unknown_439E)]
	sub.b	d3,d0                            	| [$394a: SUB     D]
	move.b	d0,d1                           	| [$394b: LD      B,A]
l_394c:

	move.l	a0,-(sp)                        	| [$394c: PUSH    HL]
	jbsr	l_395c                            	| [$394d: CALL    $395C]
	move.l	(sp)+,a0                        	| [$3950: POP     HL]
	                           	| [$3951: LD      A,L]
	add.w	#0x08,a0                         	| [$3952: ADD     $08]
	                           	| [$3954: LD      L,A]
	subq.w	#1,d4                           	| [$3955: DEC     E]
	jne	l_394c                             	| [$3956: JP      NZ,$394C]
	rts                                    	| [$3959: RET]

l_395c:
	move.b	(a0),d0                         	| [$395c: LD      A,(HL)]
	cmp.b	#0x05,d0                         	| [$395d: CP      $05]
	bcc.b	0f                               	| [...]
	rts                                    	| [$395f: RET     C] [...]
0:
												| [$3960: LD      A,L]
	addq.w	#0x05,a0                        	| [$3961: ADD     $05]
												| [$3963: LD      L,A]
	move.b	(a0),d0                         	| [$3964: LD      A,(HL)]
	cmp.b	d1,d0                            	| [$3965: CP      B]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3966: RET     C] [...]
0:
	cmp.b	d2,d0                            	| [$3967: CP      C]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3968: RET     NC] [...]
0:
	subq.b	#0x04,d0                        	| [$3969: SUB     $04]
	move.b	d0,d1                           	| [$396b: LD      B,A]
	subq.w	#3,a0                           	| [$396c: DEC     L]
	move.b	unknown_4BD2,d0                 	| [$396f: LD      A,(unknown_4BD2)]
	add.b	(a0),d0                          	| [$3972: ADD     A,(HL)]
	and.b	#0x1F,d0                         	| [$3973: AND     $1F]
	rol.b	#3,d0                            	| [$3975: RLCA] * 3
	add.b	#0x08,d0                         	| [$3978: ADD     $08]
	move.b	d0,d2                           	| [$397a: LD      C,A]
	jra	l_25b7                             	| [$397b: JP      $25B7]

l_3980:
	move.b	unknown_4BD2,d0                 	| [$3980: LD      A,(unknown_4BD2)]
	sub.b	#0x0C,d0                         	| [$3983: SUB     $0C]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3985: RET     C] [...]
0:
	cmp.b	#0x10,d0                         	| [$3986: CP      $10]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3988: RET     NC] [...]
0:
	lea	player_shot_1_structure_43C4,a0	| [$3989: LD      HL,player_shot_1_structure_43C4]
	lea	unknown_4BC0,a1                	| [$398c: LD      DE,unknown_4BC0]
	move.b	#0x04,d1                        	| [$398f: LD      B,$04]
	jbsr	l_05e0                            	| [$3991: CALL    $05E0]
	lea	unknown_43E6,a0                        	| [$3994: LD      L,$E6]
	move.b	#0x02,d1                        	| [$3996: LD      B,$02]
	jbsr	l_05e0                            	| [$3998: CALL    $05E0]
	lea	screen_address_43E2,a0                        	| [$399b: LD      L,$E2]
	lea	ram_pointer_on_flying_enemies_table_43E6,a1	| [$399d: LD      DE,ram_pointer_on_flying_enemies_table_43E6]
	move.b	#0x02,d1                        	| [$39a0: LD      B,$02]
	jbsr	l_05e0                            	| [$39a2: CALL    $05E0]
	lea	unknown_43C4,a0                        	| [$39a5: LD      L,$C4]
	move.b	#0x08,(a0)                      	| [$39a7: LD      (HL),$08]
	lea	unknown_439E,a1                	| [$39a9: LD      DE,unknown_439E]
	move.b	counter_439A+1,d0                    	| [$39ac: LD      A,(counter_439A+1)]
	ror.b	#1,d0                            	| [$39af: RRCA]
	jcs	l_39bf                             	| [$39b0: JP      C,$39BF]
	addq.w	#1,a1                           	| [$39b3: INC     E]
	lea	unknown_43E7,a0                        	| [$39b4: LD      L,$E7]
	move.b	(a0),d0                         	| [$39b6: LD      A,(HL)]
	sub.b	#0x20,d0                         	| [$39b7: SUB     $20]
	move.b	d0,(a0)                         	| [$39b9: LD      (HL),A]
	                           	| [$39ba: DEC     L]
	move.b	-(a0),d0                         	| [$39bb: LD      A,(HL)]
	clr		d7
	subx.b	d7,d0                        	| [$39bc: SBC     $00]
	move.b	d0,(a0)                         	| [$39be: LD      (HL),A]
l_39bf:
	move.b	(a1),d0                         	| [$39bf: LD      A,(DE)]
	move.b	d0,unknown_43C6                 	| [$39c0: LD      (unknown_43C6),A]
l_39c3:
	jbsr	player_shots_vs_vultures_collision_3800	| [$39c3: CALL    player_shots_vs_vultures_collision_3800]
	lea	player_shot_1_structure_43C4,a0	| [$39c6: LD      HL,player_shot_1_structure_43C4]
	move.b	(a0),d0                         	| [$39c9: LD      A,(HL)]
	and.b	#0x08,d0                         	| [$39ca: AND     $08]
	jeq	l_39f0                             	| [$39cc: JP      Z,$39F0]
	lea	unknown_43E7,a0                	| [$39cf: LD      HL,unknown_43E7]
	addq.b	#1,(a0)                         	| [$39d2: INC     (HL)]
	move.b	(a0),d0                         	| [$39d3: LD      A,(HL)]
	and.b	#0x1F,d0                         	| [$39d4: AND     $1F]
	cmp.b	#0x1D,d0                         	| [$39d6: CP      $1D]
	jcs	l_39c3                             	| [$39d8: JP      C,$39C3]
l_39db:
	lea	unknown_4BC0,a0                	| [$39db: LD      HL,unknown_4BC0]
	lea	player_shot_1_structure_43C4,a1	| [$39de: LD      DE,player_shot_1_structure_43C4]
	move.b	#0x04,d1                        	| [$39e1: LD      B,$04]
	jbsr	l_05e0                            	| [$39e3: CALL    $05E0]
	move.b	#0xE6,d4                        	| [$39e6: LD      E,$E6]
	move.b	#0x02,d1                        	| [$39e8: LD      B,$02]
	jra	l_05e0                             	| [$39ea: JP      $05E0]

l_39f0:
	lea	unknown_43A6,a0                        	| [$39f0: LD      L,$A6]
	move.b	(a0),d0                         	| [$39f2: LD      A,(HL)]
	cmp.b	#0xC0,d0                         	| [$39f3: CP      $C0]
	jcs	l_0cc4                             	| [$39f5: JP      C,$0CC4]
	subq.b	#0x01,d0                        	| [$39f8: SUB     $01]
	move.b	d0,(a0)                         	| [$39fa: LD      (HL),A]
	jra	l_39db                             	| [$39fb: JP      $39DB]

l_3a00:
	move.b	unknown_43BB,d0                 	| [$3a00: LD      A,(unknown_43BB)]
	sub.b	#0x0C,d0                         	| [$3a03: SUB     $0C]
	not.b	d0                               	| [$3a05: CPL]
	addq.b	#1,d0                           	| [$3a06: INC     A]
	move.b	d0,d3                           	| [$3a07: LD      D,A]
	move.b	counter_439A+1,d0                    	| [$3a08: LD      A,(counter_439A+1)]
	ror.b	#2,d0                            	| [$3a0b: RRCA] * 2
	bcc.b	0f                               	| [...]
	rts                                    	| [$3a0d: RET     C] [...]
0:
	move.l	(sp)+,a0                        	| [$3a0e: POP     HL]
	rts                                    	| [$3a0f: RET]
l_3a10:
	lea	current_stage_43B8,a0          	| [$3a10: LD      HL,current_stage_43B8]
	move.b	(a0),d0                         	| [$3a13: LD      A,(HL)]
	                               	| [$3a14: AND     A]
	jne	l_3b43                             	| [$3a15: JP      NZ,$3B43]
	lea	unknown_438D,a0                        	| [$3a18: LD      L,$8D]
	move.b	#0xCF,(a0)                      	| [$3a1a: LD      (HL),$CF]
	rts                                    	| [$3a1c: RET]
l_3a1d:
	lea	unknown_4369,a0                	| [$3a1d: LD      HL,unknown_4369]
	move.b	(a0),d0                         	| [$3a20: LD      A,(HL)]
	                               	| [$3a21: AND     A]
	jeq	l_3a40                             	| [$3a22: JP      Z,$3A40]
	cmp.b	#0x20,d0                         	| [$3a25: CP      $20]
	jcs	l_3a2c                             	| [$3a27: JP      C,$3A2C]
	move.b	#0x20,(a0)                      	| [$3a2a: LD      (HL),$20]
l_3a2c:
	subq.b	#1,(a0)                         	| [$3a2c: DEC     (HL)]
	move.b	(a0),d0                         	| [$3a2d: LD      A,(HL)]
	rol.b	#2,d0                            	| [$3a2e: RLCA] * 2
	nop                                    	| [$3a30: NOP]
	not.b	d0                               	| [$3a31: CPL]
	and.b	#0x0E,d0                         	| [$3a32: AND     $0E]
	lea	unknown_438D,a0                        	| [$3a34: LD      L,$8D]
	move.b	d0,(a0)                         	| [$3a36: LD      (HL),A]
	lea	unknown_4368,a0                        	| [$3a37: LD      L,$68]
	clr.b	(a0)                             	| [$3a39: LD      (HL),$00]
	lea	unknown_4366,a0                        	| [$3a3b: LD      L,$66]
	clr.b	(a0)                             	| [$3a3d: LD      (HL),$00]
	rts                                    	| [$3a3f: RET]
l_3a40:
	lea	unknown_4364,a0                        	| [$3a40: LD      L,$64]
	move.b	(a0),d0                         	| [$3a42: LD      A,(HL)]
	                               	| [$3a43: AND     A]
	jeq	l_3a62                             	| [$3a44: JP      Z,$3A62]
	cmp.b	#0x10,d0                         	| [$3a47: CP      $10]
	jcs	l_3a4e                             	| [$3a49: JP      C,$3A4E]
	move.b	#0x10,(a0)                      	| [$3a4c: LD      (HL),$10]
l_3a4e:
	subq.b	#1,(a0)                         	| [$3a4e: DEC     (HL)]
	move.b	(a0),d0                         	| [$3a4f: LD      A,(HL)]
	ror.b	#1,d0                            	| [$3a50: RRCA]
	nop                                    	| [$3a51: NOP]
	nop                                    	| [$3a52: NOP]
	not.b	d0                               	| [$3a53: CPL]
	and.b	#0x07,d0                         	| [$3a54: AND     $07]
	or.b	#0x10,d0                          	| [$3a56: OR      $10]
	lea	unknown_438C,a0                        	| [$3a58: LD      L,$8C]
	move.b	d0,(a0)                         	| [$3a5a: LD      (HL),A]
	lea	unknown_4366,a0                        	| [$3a5b: LD      L,$66]
	clr.b	(a0)                             	| [$3a5d: LD      (HL),$00]
	rts                                    	| [$3a5f: RET]
	ror.b	#1,d0                            	| [$3a60: RRCA]
	nop                                    	| [$3a61: NOP]
l_3a62:
	lea	unknown_4366,a0                        	| [$3a62: LD      L,$66]
	move.b	(a0),d0                         	| [$3a64: LD      A,(HL)]
	                               	| [$3a65: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$3a66: RET     Z] [...]
0:
	cmp.b	#0x10,d0                         	| [$3a67: CP      $10]
	jcs	l_3a78                             	| [$3a69: JP      C,$3A78]
	move.b	#0x10,(a0)                      	| [$3a6c: LD      (HL),$10]
	move.b	current_stage_43B8,d0           	| [$3a6e: LD      A,(current_stage_43B8)]
	and.b	#0x08,d0                         	| [$3a71: AND     $08]
	jeq	l_3a78                             	| [$3a73: JP      Z,$3A78]
	move.b	#0x05,(a0)                      	| [$3a76: LD      (HL),$05]
l_3a78:
	subq.b	#1,(a0)                         	| [$3a78: DEC     (HL)]
	lea	unknown_438C,a0                        	| [$3a79: LD      L,$8C]
	move.b	(a0),d0                         	| [$3a7b: LD      A,(HL)]
	and.b	#0x08,d0                         	| [$3a7c: AND     $08]
	or.b	#0x04,d0                          	| [$3a7e: OR      $04]
	move.b	d0,(a0)                         	| [$3a80: LD      (HL),A]
	rts                                    	| [$3a81: RET]
l_3a82:
	lea	unknown_439A,a0                	| [$3a82: LD      HL,unknown_439A]
	move.b	(a0),d0                         	| [$3a85: LD      A,(HL)]
	cmp.b	#0x03,d0                         	| [$3a86: CP      $03]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3a88: RET     C] [...]
0:
	lea	unknown_438D,a0                        	| [$3a89: LD      L,$8D]
	move.b	(a0),d0                         	| [$3a8b: LD      A,(HL)]
	and.b	#0x3F,d0                         	| [$3a8c: AND     $3F]
	move.b	d0,(a0)                         	| [$3a8e: LD      (HL),A]
	rts                                    	| [$3a8f: RET]
l_3a90:
	lea	unknown_436B,a0                	| [$3a90: LD      HL,unknown_436B]
	move.b	(a0),d0                         	| [$3a93: LD      A,(HL)]
	                               	| [$3a94: AND     A]
	jra	l_3923                             	| [$3a95: JP      $3923]
l_3a98:
	lea		unknown_4B70,a0                	| [$3a98: LD      HL,unknown_4B70]
	move.b	#0x08,d1
	move.b	#0x00,d2                      	| [$3a9b: LD      BC,$0800]
	move.w	#0x03,d3					  	| [$3a9e: LD      DE,$03B0]
l_3aa1:
	move.b	(a0)+,d0                         	| [$3aa1: LD      A,(HL)]
	                           	| [$3aa2: INC     L]
	and.b	d1,d0                            	| [$3aa3: AND     B]
	jeq	l_3aae                             	| [$3aa4: JP      Z,$3AAE]
	move.b	(a0),d0                         	| [$3aa7: LD      A,(HL)]
	cmp.b	#0x28,d0                         	| [$3aa8: CP      $28]
	jcs	l_3aae                             	| [$3aaa: JP      C,$3AAE]
	addq.w	#1,d2                           	| [$3aad: INC     C]
l_3aae:
	                           	| [$3aae: LD      A,L]
	add.w	d3,a0                            	| [$3aaf: ADD     A,D]
	                           	| [$3ab0: LD      L,A]
	cmp.l	#unknown_4BB0,a0                            	| [$3ab1: CP      E]
	jne	l_3aa1                             	| [$3ab2: JP      NZ,$3AA1]
	move.b	d2,d0                           	| [$3ab5: LD      A,C]
	                               	| [$3ab6: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$3ab7: RET     Z] [...]
0:
	cmp.b	#0x08,d0                         	| [$3ab8: CP      $08]
	jcs	l_3abf                             	| [$3aba: JP      C,$3ABF]
	move.b	#0x08,d0                        	| [$3abd: LD      A,$08]
l_3abf:
	add.b	#0x25,d0                         	| [$3abf: ADD     $25]
	move.b	d0,d2                           	| [$3ac1: LD      C,A]
	lea	unknown_438C,a0                	| [$3ac2: LD      HL,unknown_438C]
	move.b	(a0),d0                         	| [$3ac5: LD      A,(HL)]
	and.b	#0xC0,d0                         	| [$3ac6: AND     $C0]
	or.b	d2,d0                             	| [$3ac8: OR      C]
	move.b	d0,(a0)                         	| [$3ac9: LD      (HL),A]
	rts                                    	| [$3aca: RET]



l_3ad0:
	lea	unknown_438E,a0                	| [$3ad0: LD      HL,unknown_438E]
	move.b	(a0),d0                         	| [$3ad3: LD      A,(HL)]
	and.b	#0x01,d0                         	| [$3ad4: AND     $01]
	rol.b	#2,d0                            	| [$3ad6: RLCA] * 2
	or.b	#0x20,d0                          	| [$3ad8: OR      $20]
	move.b	d0,d1     		                      	| [$3ada: LD      B,A]
	                           	| [$3adb: DEC     L]
	move.b	-(a0),d0                         	| [$3adc: LD      A,(HL)]
	and.b	#0xC0,d0                         	| [$3add: AND     $C0]
	or.b	d1,d0                             	| [$3adf: OR      B]
	move.b	d0,(a0)                         	| [$3ae0: LD      (HL),A]
	lea	unknown_4396,a0                        	| [$3ae1: LD      L,$96]
	move.b	(a0),d0                         	| [$3ae3: LD      A,(HL)]
	addq.b	#1,(a0)                         	| [$3ae4: INC     (HL)]
	tst.b	d0                               	| [$3ae5: AND     A]
	jeq	l_3af8                             	| [$3ae6: JP      Z,$3AF8]
	move.b	unknown_4BD6,d0                 	| [$3ae9: LD      A,(unknown_4BD6)]
	add.b	#0xE0,d0                         	| [$3aec: ADD     $E0]
	move.b	d0,d4                           	| [$3aee: LD      E,A]
	move.b	#0x3D,d3                        	| [$3aef: LD      D,$3D]
	move.b	(a1),d0                         	| [$3af1: LD      A,(DE)]
	cmp.b	(a0),d0                          	| [$3af2: CP      (HL)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3af3: RET     NC] [...]
0:
	clr.b	(a0)                             	| [$3af4: LD      (HL),$00]
	rts                                    	| [$3af6: RET]
	move.b	d0,d4                           	| [$3af7: LD      E,A]
l_3af8:
	lea	unknown_438E,a0                        	| [$3af8: LD      L,$8E]
	addq.b	#1,(a0)                         	| [$3afa: INC     (HL)]
	                           	| [$3afb: DEC     L]
	move.b	-(a0),d0                         	| [$3afc: LD      A,(HL)]
	or.b	#0x10,d0                          	| [$3afd: OR      $10]
	move.b	d0,(a0)                         	| [$3aff: LD      (HL),A]
	rts                                    	| [$3b00: RET]
l_3b02:
	lea	unknown_439A,a0                	| [$3b02: LD      HL,unknown_439A]
	move.b	(a0),d0                         	| [$3b05: LD      A,(HL)]
	cmp.b	#0x02,d0                         	| [$3b06: CP      $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3b08: RET     NC] [...]
0:
	addq.w	#1,a0                           	| [$3b09: INC     L]
	move.b	(a0),d0                         	| [$3b0a: LD      A,(HL)]
	move.b	d0,d1                           	| [$3b0b: LD      B,A]
	lea	unknown_438D,a0                        	| [$3b0e: LD      L,$8D]
	move.b	#0x0A,(a0)                      	| [$3b10: LD      (HL),$0A]
	and.b	#0x60,d0                         	| [$3b0c: AND     $60]
	beq.b	0f                               	| [...]
	rts                                    	| [$3b12: RET     NZ] [...]
0:
	move.b	d1,d0                           	| [$3b13: LD      A,B]
	and.b	#0x02,d0                         	| [$3b14: AND     $02]
	add.b	#0x1C,d0                         	| [$3b16: ADD     $1C]
	move.b	d0,(a0)                         	| [$3b18: LD      (HL),A]
	rts                                    	| [$3b19: RET]
	move.b	d1,d0                           	| [$3b1a: LD      A,B]
l_3b1b:
	lea	unknown_4362,a0                	| [$3b1b: LD      HL,unknown_4362]
	move.b	(a0),d0                         	| [$3b1e: LD      A,(HL)]
	                               	| [$3b1f: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$3b20: RET     Z] [...]
0:
	cmp.b	#0x40,d0                         	| [$3b21: CP      $40]
	jcs	l_3b28                             	| [$3b23: JP      C,$3B28]
	move.b	#0x40,(a0)                      	| [$3b26: LD      (HL),$40]
l_3b28:
	subq.b	#1,(a0)                         	| [$3b28: DEC     (HL)]
	move.b	(a0),d0                         	| [$3b29: LD      A,(HL)]
	and.b	#0x06,d0                         	| [$3b2a: AND     $06]
	rol.b	#1,d0                            	| [$3b2c: RLCA]
	nop                                    	| [$3b2d: NOP]
	lea	unknown_438D,a0                        	| [$3b2e: LD      L,$8D]
	move.b	d0,(a0)                         	| [$3b30: LD      (HL),A]
	rts                                    	| [$3b31: RET]

l_3b33:
	lea	unknown_436A,a0                	| [$3b33: LD      HL,unknown_436A]
	move.b	(a0),d0                         	| [$3b36: LD      A,(HL)]
	                               	| [$3b37: AND     A]
	bne.b	0f                               	| [...]
	rts                                    	| [$3b38: RET     Z] [...]
0:
	subq.b	#1,(a0)                         	| [$3b39: DEC     (HL)]
	and.b	#0x08,d0                         	| [$3b3a: AND     $08]
	or.b	#0x07,d0                          	| [$3b3c: OR      $07]
	lea	unknown_438D,a0                        	| [$3b3e: LD      L,$8D]
	move.b	d0,(a0)                         	| [$3b40: LD      (HL),A]
	rts                                    	| [$3b41: RET]
l_3b43:
	lea	game_state_43A4,a0             	| [$3b43: LD      HL,game_state_43A4]
	move.b	(a0),d0                         	| [$3b46: LD      A,(HL)]
	cmp.b	#0x03,d0                         	| [$3b47: CP      $03]
	bne.b	0f                               	| [...]
	jbsr	l_23d6                            	| [$3b49: CALL    Z,$23D6]
0:
	jbsr	l_3b33                            	| [$3b4c: CALL    $3B33]
	jbsr	l_3b1b                            	| [$3b4f: CALL    $3B1B]
	jbsr	l_3a1d                            	| [$3b52: CALL    $3A1D]
	jbsr	l_27bd                            	| [$3b55: CALL    $27BD]
	jbsr	l_3a82                            	| [$3b58: CALL    $3A82]
	jra	l_3a90                             	| [$3b5b: JP      $3A90]


jump_table_chain_3F00:
	.long	0xFFFF 		| slot 0, not possible
	.long	0xFFFF 
	.long	0xFFFF 
	.long	0xFFFF

	.long	l_20FF 		| slot 1
	.long	l_02FF 
	.long	command_36d2 
	.long	command_36c0

	.long	0x20FF 		| slot 2
	.long	0x03FF 
	.long	command_36d2 
	.long	command_35e0 

	.long	0x30FF 		| slot 3 
	.long	0x04FF 
	.long	command_36d2 
	.long	command_35e0

	.long	0x10FF  		| slot 4
	.long	0x05FF 
	.long	command_36ea
	.long	command_35e0

	.long	0x10FF 		| slot 5
	.long	0x06FF
	.long	command_36ea
	.long	command_36c0

	.long	0x1060 		| slot 6
	.long	0x071F 
	.long	command_370a 
	.long	command_36c0 

	.long	0xF010 		| slot 7
	.long	0x0B1A		
	.long	command_370a
	.long	command_36c0

	.long	0x40FF 		| slot 8, bogus  
	.long	0x04FF 
	.long	command_36ea
	.long	command_36c0

	.long	0x10FF 		| slot 9
	.long	0x08FF
	.long	command_36ea 
	.long	command_36c0

	.long	0x4010 		| slot 10
	.long	l_0F17 
	.long	command_370a
	.long	command_36c0 

	.long	0x10FF 		| slot 11
	.long	0x0AFF
	.long	command_36ea
	.long	command_35e0 

	.long	0xFFFF 		| slot 12
	.long	0xFFFF
	.long	end_chained_calls_36cc
	.long	command_35e0

	.long	0xFFFF 		| slot 14
	.long	0xFFFF
	.long	end_chained_calls_36cc
	.long	command_35e0

	.long	0x10FF  		| slot 15
	.long	0x06FF 
	.long	command_36ea 
	.long	command_35e0

	.long	0x1010 		| slot 16
	.long	0x0779
	.long	command_370a 
	.long	command_35e0
