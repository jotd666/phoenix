*
*	Amiga-specific portions of phoenix
*
* (c) JOTD 2024
*

.include "../src/phoenix.inc"
.include "custom.i"
.include "exec_lvos.i"
.include "dos_lvos.i"
.include "graphics_lvos.i"

AttnFlags = 0x128
AFB_68010 = 0
AFB_68020 = 1
NO68020 = 1


FORE_SCREEN_ADDRESS = 0x4000
BACK_SCREEN_ADDRESS = 0x4800

TOTAL_NB_COLORS = 8


SCORE_FILE_SIZE = 0x50


PURPLE_ALIEN_HEAD_COPPER_LONGWORD = ((color+14)<<16)+0xA2D

	.ifdef	RELEASE
OPT_ENABLE_PROFILING = 0         | DO NOT CHANGE THIS
OPT_ENABLE_LOGGING = 0           | DO NOT CHANGE THIS
ONE_TICK = 1
	.else
OPT_ENABLE_LOGGING = 0
OPT_ENABLE_PROFILING = 0
* set to higher values than 1 to speed game up
ONE_TICK = 1


	.endif
	

OPT_ENABLE_DOUBLE_BUFFERING_BG = 0
OPT_ENABLE_DOUBLE_BUFFERING_FG = 0

_custom = 0xDFF000


NB_PLAYFIELD_PLANES = 3
NB_BYTES_PER_ROW = 40
NB_LINES = 256
NB_PLAYFIELD_LINES = NB_LINES

BG_SCREEN_PLANE_SIZE = NB_BYTES_PER_ROW*NB_PLAYFIELD_LINES*2
BG_SCREEN_SIZE =  BG_SCREEN_PLANE_SIZE*NB_PLAYFIELD_PLANES
FG_SCREEN_PLANE_SIZE = NB_BYTES_PER_ROW*NB_PLAYFIELD_LINES
FG_SCREEN_SIZE =  FG_SCREEN_PLANE_SIZE*NB_PLAYFIELD_PLANES



| write current PC value to some address
.macro LOGPC	address
	.ifndef	RELEASE
     bsr    .next_\@
.next_\@:
      addq.l    #6,(a7) | skip this & next instruction
      move.l    (a7)+,0x\address
	.endif
.endm

.macro	WAIT_BLIT
	move.w	#0x8400,(dmacon,a5)		| blitter high priority
wait\@:
	BTST	#6,(dmaconr,a5)
	BNE.S	wait\@
	move.w	#0x0400,(dmacon,a5)		| blitter normal priority
.endm

.macro MUL_TABLE value,len
mul\value\()_table:
	.set    mulv,0
	.rept	\len
	dc.w	mulv
	.set	mulv,mulv+\value
	.endr
.endm


* debug macro that colors the screen until LMB pressed
.macro 	blitz_bypass
	move.w	d0,-(a7)
	clr.w	d0
loop\@:
	move.w	d0,_custom+color
	btst	#6,0xbfe001
	beq.b	out\@
	addq.w	#1,d0
	bra.b	loop\@
out\@:
	move.w	(a7)+,d0
	nop
.endm

* same thing but if LMB is pressed when entering, macro waits for release)
.macro blitz
w\@:
	btst	#6,0xbfe001
	beq.b	w\@
	blitz_bypass
.endm

start:
	move.l	a7,old_stack
	bra	_user
    
	

* exports

	  .global _user
		.global _player_start
		.global _demo_end

* osd layer		
		.global osd_disable_display
		.global osd_enable_display
		.global osd_ack_vblank_interrupt
		.global	osd_is_vblank_interrupt_enabled
		.global osd_break		| for debug	
		*.global osd_calibrate_display		| for debug
		.global osd_w_videoram
		.global osd_read_dipswitches
		.global osd_read_inputs
		.global osd_read_high_scores
		.global osd_write_high_scores
		.global osd_set_scroll_value
		.global osd_sound_start
		.global osd_sound_stop
		.global	osd_write_5000
		.global	osd_wait_for_vblank

	
	.include	"ReadJoypad.i"
	.include	"whdload_funcs.i"
		.text


.list

	.ifne	OPT_ENABLE_PROFILING
	* init profiling if enabled
	.include	"profiler.68k"
	.endif

	    
_user:
    * if D0 contains "WHDL"
    * A0 contains resload
        
    cmp.l   #0x05748444c,D0	| WHDL
    bne.b   .standard
	move.b	d1,_keyexit
    move.l a0,_resload

	move.l	a0,a2
	lea	(_tag,pc),a0
	jsr	(resload_Control,a2)
	
    bra		.no_forbid
.standard:
	
    * open dos library, graphics library
    move.l  0x4.W,a6
    lea dosname,a1
    moveq.l #0,d0
    jsr _LVOOpenLibrary(a6)
    move.l  d0,_dosbase

	lea	read_args_string(pc),a0
	lea	program_args(pc),a1
	move.l	#program_args_end-program_args,d0
	lsr.l	#2,d0		| number of longs
	

	bsr	get_args_BCPL

0:	
	lea		program_args,a0

	move.l	(A0)+,D0	| INVINCIBLE/S
	beq.b	1f
	or.l	#1,cheat_flags
	st.b	cheat_used
1:
	move.l	(A0)+,D0	| INFLIVES/S
	beq.b	2f
	or.l	#2,cheat_flags
	st.b	cheat_used
2:
	move.l	(A0)+,D0	| INFTIME/S
	beq.b	2f
	or.l	#4,cheat_flags
	st.b	cheat_used
2:
	move.l	(A0)+,D0	| INFPICK/S
	beq.b	2f
	or.l	#8,cheat_flags
	st.b	cheat_used
2:
	move.l	(A0)+,D0	| CHEATKEYS/S
	beq.b	2f
	* cheat isn't used as long as no cheat key is used
	or.l	#0x10,cheat_flags
2:
	move.l	(A0)+,D0	| HARDBAGS/S
	beq.b	2f
	or.l	#1,misc_options
2:
	move.l	(A0)+,D0	| FRENCH/S
	beq.b	2f
	or.l	#2,misc_options
2:

	move.l	(A0)+,D0	| SKILL/S
	beq.b	2f
	bsr		bcpl_string_to_int
	move.l	d0,dip_switch_difficulty
2:
	move.l	(A0)+,D0	| STARTLIVES/S
	beq.b	2f
	bsr		bcpl_string_to_int
	subq.b	#1,d0
	bmi.b	2f
	move.l	d0,dip_switch_start_lives
	bra.b	3f
2:
	move.l	#2,dip_switch_start_lives		| 3 lives default
3:
	move.l	(A0)+,D0	| EXTRA40000/S
	beq.b	2f
	or.l	#4,misc_options
2:
	bsr		load_highscores

    * check if "floppy" file is here
    
    move.l  _dosbase(pc),a6
    move.l   #floppy_file,d1
    move.l  #1005,d2   | MODE_OLDFILE
    jsr     _LVOOpen(a6)
    move.l  d0,d1
    beq.b   .no_floppy
    
    * "floppy" file found
    jsr     _LVOClose(a6)
    * wait 2 seconds for floppy drive to switch off
    move.l  #100,d1
    jsr     _LVODelay(a6)
.no_floppy:

	lea		_custom,a5
	lea		debug_copperlist,a0
	move.l	a0,cop1lc(a5)

	
	move.l	4.W,A6
	lea graphicsname,a1
    moveq.l #0,d0
    jsr _LVOOpenLibrary(a6)
    move.l  d0,_gfxbase
    move.l	d0,a6
	move.l	38(a6),old_syscoplist
	move.l	34(A6),old_actiview		| gb_ActiView

	sub.l	a1,a1
	jsr	_LVOLoadView(a6)
	jsr	_LVOWaitTOF(a6)
	jsr	_LVOWaitTOF(a6)


.startup:

* no multitask
    tst.l   _resload
    bne.b   .no_forbid
    *move.l  _gfxbase(pc),a4
    *move.l StartList(a4),gfxbase_copperlist

	
    move.l  4,a6
    jsr _LVOForbid(a6)

    
	sub.l	A1,A1
	jsr	_LVOFindTask(a6)		| find ourselves
	move.l	D0,A0
	move.l	#-1,184(A0)	| pr_WindowPtr: no more system requesters (insert volume, write protected...)

.no_forbid:
	move.l	dip_switch_difficulty(pc),d0
	lsl.b	#3,d0
	
	move.b	dip_switch_start_lives+3(pc),d1
	bne.b	1f
	moveq	#2,d1	| 3 lives is default
1:
	* DSW 0 = 2 lives
	subq.b	#1,d1
	or.b	d1,d0

	
	move.l	misc_options,d1
	btst	#0,d1

	btst	#1,d1
	beq.b	0f
	bset	#5,d0
0:
	btst	#2,d1
	beq.b	0f
	bset	#6,d0
0:
	move.b	d0,dip_switches


	

	move.l	cheat_flags,d0
	btst	#0,d0
	sne		invincible_flag
	btst	#1,d0
	sne		infinite_lives_flag
	btst	#2,d0

	
	jsr	 _detect_controller_types 
	clr.b	controller_joypad_0
	clr.b	controller_joypad_1

	jra		demo_game


* < D0: bcpl string (with leading size byte)
* < A1: dest C string
bcpl_arg_string_copy:
    movem.l D0-D2/A0-A1,-(a7)
	lsl.l	#2,d0
	moveq.l	#0,d2
    move.l  d0,a0
	move.b	(a0)+,d2	| size
	beq.b	1f
	subq	#1,d2
0:
	move.b	(a0)+,(a1)+
	dbf		d2,0b
1:
    movem.l (a7)+,D0-D2/A0-A1
    rts


bcpl_string_to_int:
    movem.l A0/A1,-(a7)
    lea temp_filename_buffer(pc),a1
    bsr bcpl_arg_string_copy
    * convert to integer
    move.l  a1,a0
    * < A0: pointer on C string
    * > D0: value
    * > D1: -1 if ok, position of the string if error
    bsr parse_integer
    movem.l  (a7)+,a0/a1
	rts
	
* parse integer from string
* < A0: pointer on C string
* > D0: value
* > D1: -1 if ok, position of the string if error
parse_integer:
    movem.l  d2/d3,-(a7)
    * go to end of string
    moveq.l #-1,d1
.loop1:
    addq.l  #1,d1
    tst.b   (a0,d1.w)
    bne.b   .loop1
    * d1 is the number of chars
    moveq.l #0,d0
    moveq.l #0,d2
    subq.l  #2,d1   | 10th power minus 1
.loop2:
    move.b  (a0)+,d2
    beq.b   .out
    
    cmp.b   #32,d2
    beq.b   .skip
    sub.b   #48,d2
    bcs.b   .error
    cmp.b   #10,d2
    bcc.b   .error
    move.w  d1,d3
    bmi.b   .doadd
.muloop:
    mulu    #10,d2
    dbf d3,.muloop
.doadd:
    add.l   d2,d0
.skip:
    subq.l  #1,d1
    bra.b   .loop2
.out:    
    movem.l  (a7)+,d2/d3
    rts
.error:
    moveq.l #0,d0
    bra.b   .error
	
    * thanks Toni for this 1.3 read argument code
BCPL_RdArgs = 78
	
	* a1 = pointer to result array. Must be LONG aligned!
	* a0 = formatting string. BSTR!
	* d0 = size of result array (number of LONGs)
get_args_BCPL:
	movem.l d2/d3/d4,-(sp)
	move.l d0,d3
	moveq #BCPL_RdArgs,d0
	move.l a0,d1
	lsr.l #2,d1
	move.l a1,d2
	lsr.l #2,d2
	moveq #0,d4
	bsr.s call_bcpl
	movem.l (sp)+,d2/d3/d4
	rts

	* d0 = gv index
	* d1-d4 = bcpl parms

BCPL_STACK = 3000

call_bcpl:
	movem.l d2-d7/a2-a6,-(sp)

	move.l d0,d6
	move.l d1,d5

	move.l 4.w,a6
	move.l	_dosbase(pc),a5


	sub.l a1,a1
	jsr	_LVOFindTask(a6)
	move.l d0,a4

	* allocate BCPL stack
	move.l #BCPL_STACK,d0
	move.l #65536+1,d1
	jsr	_LVOAllocMem(a6)
	move.l d0,d7
	beq.s 0f
	
	movem.l d7/a5/a6,-(sp)

	moveq #0,d0
	move.l d5,d1
	sub.l a0,a0
	move.l d7,a1
	lea 3*4(a1),a1
	move.l 136(a4),a2
	lsl.w #2,d6
	move.l 0(a2,d6.w),a4
	movem.l 46(a5),a5/a6
	jsr (a5) | call bcpl!
	
	movem.l (sp)+,d7/a5/a6

0:
	move.l d7,a1
	move.l #BCPL_STACK,d0
	jsr	_LVOFreeMem(a6)


	movem.l (sp)+,d2-d7/a2-a6
	rts

	
get_hiscore_name:
    lea normal_hiscorename,a0
	rts
	
load_highscores:
	bsr.b		get_hiscore_name
    move.l  _resload(pc),d0
    bne.b   1f

    move.l  _dosbase(pc),a6
    move.l  a0,d1
    move.l  #1005,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVORead,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
	st.b	highscore_loaded
1:
    rts

save_highscores:
	tst.l	_resload
	bne.b	1f
    tst.b   highscore_needs_saving
    beq.b   1f
    move.l  _dosbase(pc),a6
	bsr.b		get_hiscore_name
    move.l  a0,d1
    move.l  #1006,d2
    jsr     (_LVOOpen,a6)
    move.l  d0,d1
    beq.b   1f
    move.l  d1,d4
    move.l  #SCORE_FILE_SIZE,d3
    move.l  #high_score_buffer,d2
    jsr (_LVOWrite,a6)
    move.l  d4,d1
    jsr (_LVOClose,a6)   
1:	
    rts
    
	
* To get the core to run, you just need to jump to phoenix_reset after
* you've initialised the platform (Amiga) stuff. That essentially does a
* Z80 reset. 

demo_game:
		move		#0x4000,_custom+intena						| disable interrupts
		move		#0x7FFF,_custom+intreq						| ack all interrupts
		bsr			platform_init					| amiga-specific init
		
0:	
	jbsr	enable_vblank_interrupt
	
		jmp			phoenix_reset					| pass control to the phoenix core
		
	
* just in case some hardware calls nmi
_nmi:
	move.w	#0x7FFF,_custom+intreq
	move.w	#0x7FFF,_custom+intreq
	rts
	
_vblank:
    movem.l d0-d7/a0-a6,-(a7)
	lea		_custom,a5
	move.w	(intreqr,a5),d0
	btst	#5,d0
	beq.b		1f

	st.b	vblank_flag
	
	move.l	_joypad_state(pc),d1
	moveq	#1,d0
	jsr	_read_joystick
	move.l	d0,_joypad_state
	
	* CD32 "play" is disabled but it's free to read
	* 3rd button on a Sega 3-button so 3rd button is pause
	btst	#JPB_BTN_PLAY,d0
	beq.b	0f
	btst	#JPB_BTN_PLAY,d1
	bne.b	0f
	bsr		toggle_pause
0:
	* here music doesn't loop. We have to stop it when it ends
	move.w	music_tick(pc),d1
	beq.b	13f
	
	subq	#1,d1

	move.w	d1,music_tick
	bne.b	13f
	bsr		osd_sound_stop
13:
	
	* ack vbl twice (040/pistorm bug)
	move.w	#0x20,(intreq,a5)
	move.w	#0x20,(intreq,a5)	
	bra.b	3f
1:
	* has to be copper
	* we're going to ack copper interrupt now
	* do it twice (040/pistorm bug)
	move.w	#0x10,(intreq,a5)
	move.w	#0x10,(intreq,a5)
	
	moveq	#ONE_TICK,d1
    move.w  vbl_counter(pc),d0
    addq.w  #1,d0
    cmp.w   #5,d0
    bne.b   22f
    * update a second time, simulate 60Hz
	moveq	#ONE_TICK*2,d1
	clr.w d0    
22:
	move.b	d1,vb_ticks_count
    move.w  d0,vbl_counter
	
	* set scrolling
	jbsr	set_bg_bitplanes
	
	tst.b	pause_flag
	bne.b	23f

	sub.w	d1,delay_timer
	
	* TODO set vb sync flag
	
	.ifne  OPT_ENABLE_DOUBLE_BUFFERING_BG
	bsr		switch_screen_buffers
	.endif
23:
	* now we check copper interrupt again
	move.w	_custom+intreqr,d0
	btst	#4,d0
	beq.b	3f		| clear: ok
	* copper interrupt has been called, which means that
	* rendering was so slow that we couldn't cope within a frame
	* skip a tick and ack again, we lose one update frame
	addq.b	#ONE_TICK,vb_ticks_count
	move.w	#0x10,_custom+intreq
3:
    movem.l (a7)+,d0-d7/a0-a6
    rte
	

osd_break:
	* sends a WinUAE command to enter WinUAE debugger
	.ifndef	RELEASE
	move.l	D0,-(a7)
	pea     0.w
	* Normally it would point to where the result of the command is written, but since the last parameter (first pushed)
	* indicating the number of bytes to write is 0, nothing is written.
	pea     0.w	
	pea     1003f-1002f
	pea     1002f(pc)
	pea     -1.w
	pea     82.w
	jsr     0xf0ff60
	lea     24(sp),sp
	move.l	(a7)+,d0
	.endif
    rts
		
1002: .asciz    "AKS_ENTERDEBUGGER 1"
1003:
        .align	

	


	
osd_sound_start:
	cmp.b	#CREDIT_SND,d0
	bcs.b	0f			| always play sampled sounds
	tst.b	music_playing
	beq.b	0f
	* don't play AY-sound when music is playing
	rts
0:
	movem.l	d0/d1/a0/a6,-(a7)
	tst.b	d0
	jmi	7f		| should stop the sound
	and.w	#0xFF,d0
	lea		_custom,a6
	
	
	lsl.w	#3,d0
	lea		sound_table,a0

	move.w	(a0,d0.w),d1	| sound type
	beq.b	0f		| no sound

2:
	cmp.w	#1,d1
	bne.b	4f		| music module
	move.w	(2,a0,d0.w),d1
	move.l	(4,a0,d0.w),a0
	lea		_custom,a6
	tst.w	d1
	beq.b	3f
	* looped sound
	jsr		_mt_loopfx
	bra.b	1f
3:
	jsr		_mt_playfx
1:
	movem.l	(a7)+,d0/d1/a0/a6
	rts
0:
	* some sounds seem to be missing/blank in the real game
	lsr.w	#3,d0
	cmp.b	#0x14,d0	| when hatching
	beq.b	1b
	cmp.b	#0x6,d0		| game over
	beq.b	1b
	
	bra.b	1b
	* music
4:
	* don't play if game not in play
	* could have been handled at generic phoenix.68k level
	* but it's way simpler here. I suppose than the real game
	* just turns music volume off to get away with it
	*tst.b	game_playing_8817
	*beq.b	1b
	
	* don't play if already playing
	* (music_tick value is not important for looped tunes
	* as long as it's not zero)
	tst.w	music_tick
	bne.b	1b
	* play the proper module pattern
	* load up the countdown if loop
	move.w	(2,a0,d0.w),d1	| pattern number in .mod file
	* since it's not zero, next vbl tick will play the music
	cmp.b	music_track_start_number(pc),d1
	beq.b	1b		| same track, skip

    movem.l d0-a6,-(a7)
	bsr		osd_sound_stop
    lea _custom,a6
 	movem.l	d0/a0,-(a7)
    *lea	phoenix_tunes,a0
	move.b	d1,music_track_start_number
	move.w	d1,d0
    sub.l   a1,a1		| samples are in the module
    jsr _mt_init
	movem.l	(a7)+,d0/a0

    * set master volume a little less loud if needed
	move.b	(6,a0,d0.w),music_volume
	move.b	(7,a0,d0.w),music_loops
	move.w	(2,a0,d0.w),music_pattern	| pattern number in .mod file
	move.w	(4,a0,d0.w),d2

	move.w	d2,music_duration
	move.w	d2,music_tick

    moveq	#0,d0
	move.b	music_volume(pc),d0
    jsr	_mt_mastervol
	st.b	music_playing
    jsr _mt_start
    movem.l (a7)+,d0-a6
	
6:
	jra	1b

7:
	jra	1b
	tst.b	music_playing
	jeq	1b
	bsr		osd_sound_stop
	jra	1b
	

osd_sound_stop:
	movem.l	d0/a0/a6,-(a7)
	lea		_custom,a6
	move.b	#-1,music_track_start_number
    clr.w   music_tick   | not playing anymore
	clr.b	music_playing
    jsr		_mt_end
0:
	movem.l	(a7)+,d0/a0/a6
	rts
	


switch_screen_buffers:	
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING_BG
	* let's switch screen buffers, background (chars)
	* toggle fg planes (double buffering)
	lea		bg_drawed_screen_ptr(pc),a0
	lea		bg_displayed_screen_ptr(pc),a4
	lea		bg_screen_data_1,a1
	lea		bg_screen_data_2,a5
	* also switch previous state memory
	cmp.l	(a0),a1
	bne.b	2f
	* screen data 1 is displayed screen
	* set it to drawn screen
	exg		a1,a5
2:
	move.l	a1,(a0)
	move.l	a5,(a4)
	jbsr		set_bg_bitplanes
	.endif
	
	rts

	
store_system:
	tst.l	_resload
	beq.b	0f
	rts
0:
	* system copper
	
	move.l	4.W,a6
	move.w	AttnFlags(a6),d0
	btst	#AFB_68010,d0
	beq.b	1f
	lea	get_vbr,a5

	jsr		_LVOSupervisor(a6)
	move.l	d0,system_vbr
1:
	
*	move.w	AttnFlags(a6),d0
*	btst	#AFB_68020,d0
*	bne.b	1f
*	* no whdload, no 68020: assume slow
*	* if running on PiStorm, well, too bad use whdload
*	st.b	slow_machine
*1:
	lea	_custom,a6
	move.w	intenar(a6),old_intena
	move.w	dmaconr(a6),old_dmacon
	lea		old_sysvectors,a0
	move.l	system_vbr(pc),a1
	move.l	(0x64,a1),(a0)+
	move.l	(0x68,a1),(a0)+
	move.l	(0x6c,a1),(a0)+
	move.l	(0x70,a1),(a0)+
	move.l	(0x74,a1),(a0)+
	move.l	(0x78,a1),(a0)+
	move.l	(0x7C,a1),(a0)+
	rts

restore_system:
	lea	_custom,a6
	jsr		_mt_remove_cia

	move.w	#0x4000,intena(a6)	| ints off
	lea		old_sysvectors,a0
	move.l	system_vbr(pc),a1
	move.l	(a0)+,(0x64,a1)
	move.l	(a0)+,(0x68,a1)
	move.l	(a0)+,(0x6c,a1)
	move.l	(a0)+,(0x70,a1)
	move.l	(a0)+,(0x74,a1)
	move.l	(a0)+,(0x78,a1)
	move.l	(a0)+,(0x7C,a1)


	bclr	#6,0xbfee01


	lea	_custom,a6
	move.w	old_intena,d0			| get old val
	and.w	#0x3fff,d0
	eor.w	#0x3fff,d0
	move.w	d0,intena(a6)		| clr bits
	eor.w	#0x3fff,d0
	or.w	#0xc000,d0		
	move.w	d0,intena(a6)		| set bits and main

	move.w	old_dmacon,d0			| get old val
	and.w	#0x3fff,d0
	eor.w	#0x3fff,d0

***		and.w	#0xfff0,d0		| preserve sound dma for now

	move.w	d0,dmacon(a6)		| clr bits



	eor.w	#0x3fff,d0
	or.w	#0xc000,d0		
	move.w	d0,dmacon(a6)		| set bits and main

	move.l	old_syscoplist,cop1lc(a6)
	move.l	_gfxbase,a6
	move.l	old_actiview,a1
	jsr	_LVOLoadView(a6)


	moveq	#0,d0
	rts

quit_to_os:
	tst.l	_resload
	bne.b	0f
	bsr		restore_system
	* set SR to 0 from here, so we return to OS with SR=0
	* (else it kills the system pretty quickly)
	* it works as quit_to_os is called from an interrupt
	move.w	#0,SR
	move.l	old_stack(pc),a7
	bsr		save_highscores
	moveq	#0,d0
	rts
0:
	pea	  TDREASON_OK
	move.l	_resload(pc),-(a7)
	addq.l	#resload_Abort,(a7)
	rts

platform_init:
	bsr		store_system
	

	lea		_custom,a5
	move.w	#0x7FFF,dmacon(a5)
	move.w	#0x7FFF,intena(a5)
	* set blitter parameters once and for all
	.ifndef	VARIABLE_BLITTER_MASKS_AND_MODS
    move.l  #-1,bltafwm(a5)
	.endif
	
	* restrict borders: we don't see bobs on the borders!
	*         VVHH
    move.w #0x1C99+0x18,diwstrt(a5)
    move.w #0x2481,diwstop(a5)
    move.w #0x0038,ddfstrt(a5)
    move.w #0x00D0,ddfstop(a5)
    move.w #0x6600,bplcon0(a5) | 6 bitplanes DPF
    move.w #0x0064,bplcon2(a5)
	* AGA-compatible ECS default values
    move.w #0x0C00,bplcon3(a5)     | no AGA specificities, default ECS
    move.w #0x0011,bplcon4(a5)     | ECS default for sprite colors
    move.w #0,fmode(a5)			
	

    move.w #0,bplcon1(a5)    | foreground tiles
	move.w	#0,d0
    move.w d0,bpl1mod(a5)
    move.w d0,bpl2mod(a5)

	* set other sprites to blank
	move.l		#blank_sprite,d0

	moveq	#7,d1
	lea		sprites,a1
0:
    move.w	d0,(6,a1)
	swap	d0
    move.w	d0,(2,a1)
	swap	d0
	addq.w	#8,a1
	dbf		d1,0b
	
	bsr		set_bg_bitplanes
	bsr		set_fg_bitplanes
	
	moveq	#0,d0
	clr.b	current_stage_43B8
	bsr		set_palette
	
	* set copperlist
	move.l	#copperlist,cop1lc(a5)

	* wait 300 lines
	move.w	#100,d0
	bsr	beamdelay
	move.w	#100,d0
	bsr	beamdelay
	move.w	#100,d0
	bsr	beamdelay
	
    * init sprite, bitplane, whatever dma

    move.w #0x83E0,dmacon(a5)
    *move.w #0x20,dmacon(a5)

	* install keyboard and vblank/copper handler
	pea		level2_interrupt(pc)
	move.l	system_vbr(pc),a1
	move.l	(a7)+,(0x68,a1)
	pea		_vblank(pc)
	move.l	(a7)+,(0x6C,a1)
	pea		_nmi(pc)
	move.l	(a7)+,(0x7C,a1)

	* soundfx lib
	lea		_custom,a6
	lea		blank_sound,a0
	move.l	a0,(0xA0,a6)
	move.l	a0,(0xB0,a6)
	move.l	a0,(0xC0,a6)
	move.l	a0,(0xD0,a6)
	move.l	system_vbr(pc),a0
	moveq	#1,d0	| PAL
	jsr		_mt_install_cia

	.ifne	OPT_ENABLE_PROFILING
	* init profiling if enabled
	lea		0x180000,a0
	move.l	#0x20000,d0
	lea		0x100,a1
	bsr		init_fixed_address
	bsr		install_profiler_vbl_hook
	.endif

	
    rts

* < D0: bit 0: palette 0/1, we'll ignore that, and will use level info
* < D0: bit 1: rom bank: check current/previous bank and swap memory 
* & video if needed
osd_write_5000:
	movem.l	a0/a1/d0-d1,-(a7)
	btst	#0,d0
	beq.b	0f
	tst.b	current_bank
	bne.b	1f				| same bank: ignore
	bra.b	2f
0:	
	tst.b	current_bank
	beq.b	1f				| same bank: ignore
2:
	* current bank is not requested bank: swap banks
	eor.b	#1,current_bank
	lea		fg_videoram,a0
	lea		bank_1,a1
	move.w	#0x1000/4-1,d0
3:
	move.l	(a0),d1
	move.l	(a1),(a0)+	| high-quality hand made swap algorithm :)
	move.l	d1,(a1)+
	dbf		d0,3b
1:
	bsr		set_palette
	movem.l	(a7)+,a0/a1/d0-d1
	rts
	
* < D0: 0 or 1 but we'll ignore that for Amiga
set_palette:
	movem.l	d0-d1/a0-a1,-(a7)
	moveq	#0,d0
	move.b	current_stage_43B8,d0
	beq.b	0f			| intro: palettes 0
	and.b	#0xF,d0		| loops after completing one round of levels
	* not zero: 1 => 0, 3 => 1 ..., 5 => 2
	lsr.b	#1,d0
0:
	add.w	d0,d0
	add.w	d0,d0
	lea		back_palettes,a0
	move.l	(a0,d0.w),a0

	move.w	#TOTAL_NB_COLORS-1,d1
	lea		bg_colors+2,a1
1:
	move.w	(a0)+,(a1)+
	addq.w	#2,a1
	dbf		d1,1b
	
	lea		fore_palettes,a0
	move.l	(a0,d0.w),a0

	move.w	#TOTAL_NB_COLORS-1,d1
	lea		fg_colors+2,a1
1:
	move.w	(a0)+,(a1)+
	addq.w	#2,a1
	dbf		d1,1b
		
	movem.l	(a7)+,d0-d1/a0-a1
	rts
	
osd_wait_for_vblank:
	clr.b	vblank_flag
0:
	tst.b	vblank_flag
	beq.b	0b
	
	rts
	
	
* 60Hz VBLANK interrupt (also keyboard)
enable_vblank_interrupt:
	move.w	#0xC038,_custom+intena
	rts

osd_ack_vblank_interrupt:
	move.w	#0x30,_custom+intreq
 	rts
		
* not used after all
*osd_test_vblank_interrupt:
*	move.w	_custom+intreqr,d0
*	btst	#5,d0
*	rts
	
osd_disable_vblank_interrupt:
	move.w	#0x0030,_custom+intena
	rts



	


* < D4: sprite properties
*     Y code+attrs clut X
* > D0,D1: X,Y.B
* > D5: clut index
* > D6: sprite index + attributes
* 
decode_sprite_data:
	move.b	d4,d1	| sprite X (aka Y on amiga)
	lsr.l	#8,d4
	move.b	d4,d5	| clut index
	lsr.l	#8,d4
	move.b	d4,d6	| sprite index
	lsr.l	#8,d4	
	move.b	d4,d0	| sprite Y (aka X on amiga)
	rts


REAL_VIDEO_SIZE = 0x360	
* d7=screen address (preserved), d0=tile (preserved)
* d7 starts at 0x4000-0x43FF or 0x4800-0x4BFF
* should preserve all registers

* layout
*
* 4320                               4000
* Y=0,X=0                            Y=0,X=24
* 
* 
* 
* 
* 
* 433F                               401F
* Y=31,X=0                           Y=31,X=24


osd_w_videoram:
	movem.l	d0-d3/d7/a0-a2,-(a7)
	cmp.w	#FORE_SCREEN_ADDRESS,d7
	* game can try to write in ROM (on low addresses): ignore
	jcs	2f				
	* game can try to write in high addresses
	cmp.w	#0xFD00,d7
	jcc	2f
	
	move.w	d7,d3
	
	sub.w	#FORE_SCREEN_ADDRESS,d7
	cmp.w	#REAL_VIDEO_SIZE,d7
	bcs.b	write_fore_videoram

	sub.w	#BACK_SCREEN_ADDRESS-FORE_SCREEN_ADDRESS,d7
	bcs.b	0f
	cmp.w	#REAL_VIDEO_SIZE,d7
	bcs.b	write_back_videoram
0:
	* should not happen
*	lea		write_videoram_out_of_range,a0
*	jbsr	osd_break
*	nop
*	move.b	d0,d0
*	nop	
	bra.b	2f

write_back_videoram:
    .ifeq OPT_DISABLE_BG_LAYER
	lea		bg_videoram,a1
	add.w	d7,a1
	
	cmp.b	(a1),d0
	beq.b	2f		| already the proper value

	cmp.w	#0x2B8,d7
	bne.b	1f
	cmp.b	#0x75,d0
	beq.b	0f
	* if specific address written to, enable/disable dyn color
	move.w	#0x01FE,alien_purple_score_screen
	bra.b	1f
0:
	move.w	#PURPLE_ALIEN_HEAD_COPPER_LONGWORD>>16,alien_purple_score_screen
1:
	move.b	d0,(a1)	| update logical grid
	
	move.l		bg_drawed_screen_ptr,a1
	lea		back_tile_table,a0
	move.l	#BG_SCREEN_PLANE_SIZE,d5
	movem.l	d0/d7/a0/a1,-(a7)
	jbsr		update_tile
	movem.l	(a7)+,d0/d7/a0/a1

	* mid screen so it wraps when scrolling
	
	lea		back_tile_table,a0
	add.w	#BG_SCREEN_PLANE_SIZE/2,a1
	move.l	#BG_SCREEN_PLANE_SIZE,d5
	jbsr		update_tile
	.endif
2:
	movem.l	(a7)+,d0-d3/d7/a0-a2
	rts
write_fore_videoram:
    .ifeq OPT_DISABLE_FG_LAYER
	lea		fg_videoram,a1
	add.w	d7,a1
	
	cmp.b	(a1),d0
	beq.b	0f		| already the proper value

	move.b	d0,(a1)	| update logical grid
	
	move.l		fg_drawed_screen_ptr,a1
	lea			fore_tile_table,a0
	move.l	#FG_SCREEN_PLANE_SIZE,d5
	jbsr		update_tile
	.endif
0:
	movem.l	(a7)+,d0-d3/d7/a0-a2
	rts


* d7: screen offset
* d0: tile code

*
update_tile:
	* compute Y

	and.w	#0xFF,d0	| mask up to 255
	move.w	d7,d3
	lsr.w	#5,d7		| this is X
	neg.w	d7
	add.w	#30,d7
	cmp.w	#5,d7
	bcs.b	0f			| ignore those tiles on the left side (not shown anyway)
	and.w	#0x1F,d3	| this is Y
	addq	#1,d3
	lea		mulNB_BYTES_PER_ROW_table(pc),a2

	
	* D3 = Y

	add.w	d3,d3
	move.w	(a2,d3.w),d3
	lsl.w	#3,d3		| times 8
	addq.w	#1,d3
	add.w	d3,a1
	add.w	d7,a1

	moveq	#NB_PLAYFIELD_PLANES-1,d3

	* optimization when a well-known
	* empty character is passed (standard charset)
	tst.b	d0
	jeq	11f

	moveq	#0,D2
	move.b	current_stage_43B8,d2
	and.w	#0xf,d2
	lsr.b	#1,d2
	
	add.w	d2,d2
	add.w	d2,d2
	move.l	(a0,d2.w),a0	| tile table
	add.w	d0,d0
	add.w	d0,d0
	move.l	(a0,d0.w),a0	| tile data
4:
	.set	offset,0
	.rept	8
	move.b	(a0)+,(offset,a1)	
	.set	offset,offset+NB_BYTES_PER_ROW
	.endr
	add.w	d5,a1
	dbf		d3,4b
0:
	rts

	* clear tile

11:
	.set	offset,0
	.rept	8
	clr.b	(offset,a1)
	.set	offset,offset+NB_BYTES_PER_ROW
	.endr
	add.w	d5,a1
	dbf		d3,11b
2:
	rts

12:
	* clut/tile combo not declared as used
	**blitz
	rts


			
store_sprite_pos_16:
	move.l	a1,-(a7)
	lea		HW_SpriteYTable_16,a1
	bsr		store_sprite_pos
	move.l	(a7)+,a1
	rts
	
* < d0.w: x
* < d1.w: y
* < a1: sprite pos table (depending on height)
* > d0.L: control word
store_sprite_pos:
    move.l  a0,-(a7)

    lea	HW_SpriteXTable(pc),a0
	
	.ifdef	NO68020
    add.w	d0,d0
    add.w	d0,d0
    move.l	(a0,d0.w),d0
	move.w	d1,-(a7)
    add.w	d1,d1
    add.w	d1,d1
    or.l	(a1,d1.w),d0
	move.w	(a7)+,d1
	.else
    move.l	(a0,d0.w*4),d0
    or.l	(a1,d1.w*4),d0	
	.endc
    move.l  (a7)+,a0
    rts
	
HW_SpriteXTable:
	.set	reptn,0
	.rept 320
	.set	x,reptn+0x80
	.set reptn,reptn+1
    .byte  0,x>>1,0,x&1
  .endr

	.macro DEF_HW_SPRITE_Y_TABLE	height
HW_SpriteYTable_\height:
  .set	reptn,0
  .rept 288
	.set	ys,reptn+0x1c
	.set	ye,ys+\height
    .byte  ys&255, 0, ye&255, ((ys>>6)&4)+((ye>>7)&2)
	.set	reptn,reptn+1
  .endr
	.endm


	DEF_HW_SPRITE_Y_TABLE	16




	
* set_bitplanes
* what: sets bitplanes in copperlist

set_bg_bitplanes:
    moveq #NB_PLAYFIELD_PLANES-1,d1
	moveq	#0,d0
	move.b	scroll_value,d0

	lea		mulNB_BYTES_PER_ROW_table(pc),a0
	add.w	d0,d0
	move.w	(a0,d0.w),d0
    add.l	bg_displayed_screen_ptr,d0
    lea		bg_bitplanes+2,a0
1:
    swap d0
    move.w d0,(a0)
    swap d0
    move.w d0,(4,a0)    
    addq.w  #8,a0
    add.l #BG_SCREEN_PLANE_SIZE,d0
    dbf d1,1b
    rts


set_fg_bitplanes:
    move.l	fg_displayed_screen_ptr(pc),a0
    moveq #NB_PLAYFIELD_PLANES-1,d1
	move.l	a0,d0
    lea	fg_bitplanes+2,a0
1:
    swap d0
    move.w d0,(a0)
    swap d0
    move.w d0,(4,a0)    
    addq.w  #8,a0
    add.l #FG_SCREEN_PLANE_SIZE,d0
    dbf d1,1b
    rts

	
osd_set_scroll_value:
	move.b	d0,scroll_value
	rts
	
osd_debug_hook:
	rts
	
osd_get_random:
* > D0: pseudo random value (8 bits, all other bits zeroed)
	movem.l	a0,-(a7)
	lea	seed(pc),a0
	move.l	(a0),d0
	* thanks meynaf
	mulu #0xa57b,d0
	addi.l #0xbb40e62d,d0
	rol.l #6,d0	
	move.l	d0,(a0) 
	movem.l	(a7)+,a0
	add.b	_custom+vposr,d0
	and.l	#0xFF,d0
	rts
seed:
	dc.l	0x12345678

	

osd_read_dipswitches:
	* actual dipswitches
	move.b	dip_switches(pc),d0
	not.b	d0		| active low
	

	rts
	
BIT_COIN = 0
BIT_RIGHT = 5
BIT_LEFT = 6
BIT_BLUE = 7
BIT_RED = 4
BIT_START_1 = 1
BIT_START_2 = 2

* reads most inputs in one call
* bits 0-1    coins
* bit 2: start game 1 player
* bit 10: (added) start game 2 players

osd_read_inputs:
	moveq	#-1,d0
	movem.l	a0/d1,-(a7)
	lea		keyboard_table(pc),a0
	* misc control keys
	tst.b	(6,a0)		| "6" key like in MAME
	beq.b	0f
	bclr	#1,d0
0:	
	tst.b	(5,a0)		| "5" key like in MAME
	beq.b	0f
	bclr	#BIT_COIN,d0
0:
	tst.b	(1,a0)		| "1" key like in MAME
	beq.b	0f
	bclr	#BIT_START_1,d0
0:
	tst.b	(2,a0)		| "2" key like in MAME
	beq.b	0f
	bclr	#BIT_START_2,d0
0:	
	tst.b	(0x4F,a0)		| "<-" key
	beq.b	0f
	bclr	#BIT_LEFT,d0
0:
	tst.b	(0x4E,a0)		| "->" key
	beq.b	0f
	bclr	#BIT_RIGHT,d0
0:
	tst.b	(0x63,a0)		| "ctrl" key
	beq.b	0f
	bclr	#BIT_RED,d0
0:
	tst.b	(0x64,a0)		| "alt" key
	beq.b	0f
	bclr	#BIT_BLUE,d0
0:
	* directions + fire
	move.l	_joypad_state(pc),d1
	btst	#JPB_BTN_UP,d1
	beq.b	0f
	bclr	#BIT_BLUE,d0
0:
	btst	#JPB_BTN_DOWN,d1
	beq.b	0f
	bclr	#BIT_BLUE,d0
0:
	btst	#JPB_BTN_LEFT,d1
	beq.b	0f
	bclr	#BIT_LEFT,d0
0:
	btst	#JPB_BTN_RIGHT,d1
	beq.b	0f
	bclr	#BIT_RIGHT,d0
0:
	btst	#JPB_BTN_RED,d1
	beq.b	0f
	bclr	#BIT_RED,d0
0:
	btst	#JPB_BTN_RED,d1
	beq.b	0f
	bclr	#BIT_BLUE,d0
0:
	* test all those flags to see if normal controls
	* could be used to insert coins/start game

	bra.b	3f
	*** unreach
	
	move.l	d2,-(a7)
	move.l	_previous_joypad_state(pc),d2
	* save prev state as game loops within vblank
	* pushing fire would either lockup the game
	* or insert a lot of credits simulatenously
	move.l	d1,_previous_joypad_state
	
	* game not in play, accept start 1P game with "up"
	btst	#JPB_BTN_UP,d1
	beq.b	0f
	bclr	#2,d0
0:
	* game not in play, accept start 2P game with "down"
	btst	#JPB_BTN_DOWN,d1
	beq.b	0f
	bclr	#10,d0
0:
	btst	#JPB_BTN_RED,d1
	beq.b	0f
	btst	#JPB_BTN_RED,d2
	bne.b	0f
	* game not in play, accept insert coin with fire
	bclr	#0,d0
0:
	move.l	(a7)+,d2
3:

	movem.l	(a7)+,a0/d1
	rts
	


		
osd_read_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	move.l	a0,a4
	move.l	_resload(pc),d0
	beq.b	0f
	move.l	d0,a2
	move.l	a0,a3
	bsr		get_hiscore_name
 	jsr		resload_GetFileSize(a2)		
	tst.l	d0
	beq.b	1f
	bsr		get_hiscore_name
	move.l	a3,a1
	jsr		resload_LoadFile(a2)
	* set highest score entry
    move.b    (a3)+,(a4)+
    move.b    (a3)+,(a4)+
    move.b    (a3)+,(a4)+		
	bra.b	1f
0:
	tst.b	highscore_loaded
	beq.b	1f
	* from DOS: just copy buffer
	lea		high_score_buffer(pc),a1
	* set highest score entry
	move.w	#SCORE_FILE_SIZE-1,d0
0:
    move.b    (a1)+,(a4)+
	dbf		d0,0b
1:
	movem.l	(a7)+,d0-d7/a0-a6
	rts
	
osd_write_high_scores:
	movem.l	d0-d7/a0-a6,-(a7)
	tst.b	cheat_used		| don't save score if cheat on
	bne.b	1f
	move.l	_resload(pc),d0
	beq.b	0f
	move.l	d0,a2
	move.l	#SCORE_FILE_SIZE,d0
	move.l	a0,a1
	bsr		get_hiscore_name
	jsr		resload_SaveFile(a2)
	bra.b	1f
0:
	* from DOS: just copy buffer
	lea		high_score_buffer(pc),a1
	move.w	#SCORE_FILE_SIZE-1,d0
0:
	move.b	(a0)+,(a1)+
	dbf		d0,0b

	st.b	highscore_needs_saving
1:
	movem.l	(a7)+,d0-d7/a0-a6
	rts


level2_interrupt:
	bsr		handle_keyboard
	move.w	#8,_custom+intreq
	rte
	
handle_keyboard:
	movem.l	D0/A0/A5,-(a7)
	LEA	0x00BFD000,A5
	MOVEQ	#0x08,D0
	AND.B	0x1D01(A5),D0
	jeq		1f
	MOVE.B	0x1C01(A5),D0
	NOT.B	D0
	ROR.B	#1,D0		| raw key code here
  
	CLR.B	0x1C01(A5)
  
    lea keyboard_table(pc),a0
    bclr    #7,d0
    seq (a0,d0.w)       | updates keyboard table
    jne   2f     | we don't care about key release
	
    cmp.b   #0x19,d0	| "P" key
    bne.b   0f

    bsr	toggle_pause
0:

	btst	#4,cheat_flags+3
	jeq		10f
	* cheat keys
	cmp.b	#0x50,d0	| F1 key
	bne.b	0f
	move.w	#0x0FF,_custom+color
	st.b	cheat_used

	
0:
	cmp.b	#0x51,d0	| F2 key
	bne.b	0f
	st.b	cheat_used
	move.w	#0x0FF,_custom+color
	eor.b	#1,invincible_flag
	
0:
	cmp.b	#0x52,d0	| F3 key
	bne.b	0f
	st.b	cheat_used
	* add 10000 points

0:
	cmp.b	#0x53,d0	| F4 key, skip level
	bne.b	0f
	st.b	cheat_used
	move.w	#0x0FF,_custom+color
	clr.b	nb_to_kill_before_stage_completed_43BA
0:
	cmp.b	#0x54,d0	| F5 key
	bne.b	0f
	st.b	cheat_used
	move.w	#0x0FF,_custom+color
0:

	cmp.b	#0x55,d0	| F6 key
	bne.b	0f
	* game over, no lives
	nop
0:
10:
	.ifndef	RELEASE
	cmp.b	#0x58,d0	| F9 key crashes game (restarts whdload)
	bne.b	0f
	illegal
	.endif
0:

	cmp.b	_keyexit,d0	| "ESC" key or whdload quitkey
	bne.b	2f
	BSET	#0x06,0x1E01(A5)
	moveq	#2,d0
	bsr	beamdelay
	BCLR	#0x06,0x1E01(A5)	| acknowledge key
	bra		quit_to_os
2:
	BSET	#0x06,0x1E01(A5)
	moveq	#2,d0
	bsr	beamdelay
	BCLR	#0x06,0x1E01(A5)	| acknowledge key

1:
	movem.l	(a7)+,d0/a0/a5
	rts
	
toggle_pause:
	* pause only within game

	eor.b   #1,pause_flag
0:
	rts
	
    
* < D0: numbers of vertical positions to wait
beamdelay:
0:
	move.w  d0,-(a7)
    move.b	0xdff006,d0	| VPOS
1:
	cmp.b	0xdff006,d0
	beq.s	1b
	move.w	(a7)+,d0
	dbf	d0,0b
	rts

	
	MUL_TABLE	NB_BYTES_PER_ROW,288

	.align	4		| leave this long word alignment
program_args:	ds.l	64,0
program_args_end:
	.long	0		| add a longword else it overwrites the read args string in kick 1.3!
	.align	4
read_args_string:
	.byte	read_args_string_end-read_args_string
	.ascii	"INVINCIBLE/S,INFLIVES/S,INFTIME/S,INFPICK/S,"
	.ascii	"CHEATKEYS/S,HARDBAGS/S,FRENCH/S,SKILL/K/N,STARTLIVES/K/N,EXTRA40000/S"
read_args_string_end:
	.align	2


old_intena:
	.long	0
old_dmacon:
	.long	0
old_sysvectors:
	ds.l	10
old_vbr:
	.long	0
old_syscoplist:
	.long	0
old_actiview:
	.long	0
old_stack:
	.long	0
scroll_value:
	.byte	0
current_bank:
	.byte	0
	align	2
	
_tag:
		.long	WHDLTAG_CUSTOM1_GET
cheat_flags:
		.long	0

		.long	WHDLTAG_CUSTOM3_GET
misc_options:
		.long	0
		.long	WHDLTAG_CUSTOM4_GET
dip_switch_difficulty:
		.long	0
		.long	WHDLTAG_CUSTOM5_GET
dip_switch_start_lives:
		.long	0
	.long	0
dip_switches:
		.byte	0x20	| default english
		.byte	0

system_vbr:
	.long	0
	
	
high_score_buffer:
	ds.b	SCORE_FILE_SIZE

highscore_needs_saving:
	.byte	0
highscore_loaded:
	.byte	0
flip_flop:
	.byte	0
	.align	2


keyboard_table:
	ds.b	0x100

	
pause_flag:
	.word	0

	* sound variables
music_duration:
	.word	0
music_track_start_number:
	.word	0
music_pattern:
	.word	0
music_tick:
	.word	0
intro_music_counter:
	.word	0
vbl_counter:
	.word	0
_resload:
	.long	0
_joypad_state:
	.long	0
_previous_joypad_state:
	.long	0
_gfxbase:
	.long	0
_dosbase:
	.long	0
delay_timer:
	.word	0
one_out_of_five:
	.word	0
bg_drawed_screen_ptr:
	.long	bg_screen_data_1
bg_displayed_screen_ptr:
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING_BG
	.long	bg_screen_data_2
	.else
	.long	bg_screen_data_1
	.endif
fg_drawed_screen_ptr:
	.long	fg_screen_data_1
fg_displayed_screen_ptr:
	.ifne	OPT_ENABLE_DOUBLE_BUFFERING_BG
	.long	fg_screen_data_2
	.else
	.long	fg_screen_data_1
	.endif


	.include	"sound_entries.68k"
	* continuing on sound table for guard step/climb sounds
	* which are the same as the player, only less loud
	.word	1,0
	.long	guard_climb_sound | 15

	.word	1,0
	.long	guard_walk_sound | 16

guard_climb_sound:
    .long    player_climb_raw
    .word   5136    | copied from player climb
    .word   FXFREQBASE/HQ_SOUNDFREQ,8
    .byte    2
    .byte    2		| priority

guard_walk_sound:
    .long    player_walk_raw
    .word   4467   | copied from player walk
    .word   FXFREQBASE/HQ_SOUNDFREQ,8
    .byte    2
    .byte    2		| priority

	
_keyexit:
	.byte	0x45	| ESC by default unless whdload overwrites it
music_loops:
	.byte	0
music_volume:
	.byte	0
music_playing:
	.byte	0
music_muted:
	.byte	0
dynamic_color_mode:
	.byte	0
vblank_flag:
	.byte	0
	
cheat_used:
	.byte	0
dosname:
	.asciz	"dos.library"

graphicsname:
	.asciz	"graphics.library"
normal_hiscorename:
	.asciz	"phoenix.high"
floppy_file:
	.asciz	"floppy"
write_videoram_out_of_range:
	.asciz	"write videoram out of range"
temp_filename_buffer:
	ds.b	255
_end_of_ng_code:
		
	.align 2

	.include "palette.68k"

	
	
	* on amiga, this file is included in phoenix.68k file
	* so the assembler can optimize by using PC-relative addressing
	* whenever possible (and it does)
	.ifndef	RELEASE
	* easier to debug game to have memory aligned on 0x10000
	.align	0x10000

	.ifne	OPT_ENABLE_LOGGING
	.section	.bss
	.ascii	"TILE"
tile_log_table:
	* 32 cluts, 1024 tiles
	* a lot of combinations aren't used (fortunately!)
	ds.w	0x10000
	.endif
	.endif
	.ascii	"CODE_END"


	.section	.datachip
	
.macro	DECL_COLORS	offset,nb_colors
	.set	colidx,\offset
	.rept	\nb_colors
	dc.w	color+(colidx*2),0
	.set	colidx,colidx+1
	.endr
	.endm

.macro	DECL_BITPLANES	bpoff_start
	.set	bpoff,\bpoff_start
	.rept	NB_PLAYFIELD_PLANES
	dc.w  0xe0+bpoff,0
	dc.w  0xe2+bpoff,0
	.set	bpoff,bpoff+4
	.endr
	.endm

.macro	DECL_16_COLORS	offset
	.set	colidx,\offset
	.rept	16
	dc.w	color+(colidx*2),0
	.set	colidx,colidx+1
	.endr
	.endm

blank_sound:
	ds.l	4
	
debug_copperlist:
	dc.w	bplcon0,0x200
	dc.w	color
debug_color:
	dc.w	0
	dc.l	-2
	
blank_sprite:
	.rept	32
	.long	0
	.endr

.macro	DECL_EVEN_BITPLANES	bpoff_start,nb_planes
	.set	bpoff,\bpoff_start
	.rept	\nb_planes
	dc.w  bplpt+bpoff,0
	dc.w  bplpt+bpoff+2,0
	.set	bpoff,bpoff+8
	.endr
	.endm
	
	
	* main copperlist
copperlist:
    *.word   0x1801,0xFFFE	

bg_bitplanes:
	DECL_EVEN_BITPLANES	0,3
fg_bitplanes:
	DECL_EVEN_BITPLANES	4,3
bg_colors:
	DECL_COLORS	0,8
fg_colors:
	DECL_COLORS	8,8
sprites:
    * #0
    .word    sprpt+0,0
    .word    sprpt+2,0
    * #1
    .word    sprpt+4,0
    .word    sprpt+6,0
    * #2
    .word    sprpt+8,0
    .word    sprpt+10,0
    * #3
    .word    sprpt+12,0
    .word    sprpt+14,0   
    * #4
    .word    sprpt+16,0
    .word    sprpt+18,0
    * #5
    .word    sprpt+20,0
    .word    sprpt+22,0
    * #6
    .word    sprpt+24,0
    .word    sprpt+26,0
    * #7
    .word    sprpt+28,0
    .word    sprpt+30,0

    .word  0xE001,0xFFFE       | PAL wait
alien_purple_score_screen:
	.long	PURPLE_ALIEN_HEAD_COPPER_LONGWORD		| alien purple
	* pal limit
    .word  0xFFDF,0xFFFE       | PAL wait
    .word  0x0401,0xFFFE
	
    .word   0x1C01,0xFFFE
	.set    beampos,0x1E01
	
 	.word	beampos,0xFFFE   | wait before interrupt, avoid losing last bobs lines
    .word	 intreq,0x8010
    .long    -2					
	.ascii	"ENDCPLST"

	* aligning on 8 bytes so .align will work
	* in the next datachip sections
	.align	8
	
		.section .bsschip

bg_screen_data_1:
	ds.b	BG_SCREEN_SIZE
	ds.b	NB_BYTES_PER_ROW*12*3
	.ifne  OPT_ENABLE_DOUBLE_BUFFERING_BG
bg_screen_data_2:
	ds.b	BG_SCREEN_SIZE
	ds.b	NB_BYTES_PER_ROW*12*3
	.endif
fg_screen_data_1:
	ds.b	FG_SCREEN_SIZE
	ds.b	NB_BYTES_PER_ROW*12*3
	.ifne  OPT_ENABLE_DOUBLE_BUFFERING_FG
fg_screen_data_2:
	ds.b	FG_SCREEN_SIZE
	ds.b	NB_BYTES_PER_ROW*12*3
	.endif
	.align	8

		